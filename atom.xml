<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mhy-blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-12T14:19:06.884Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springmvc文件上传&amp;异常处理</title>
    <link href="http://example.com/2022/05/12/Springmvc%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2022/05/12/Springmvc%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2022-05-12T01:47:42.000Z</published>
    <updated>2022-05-12T14:19:06.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC的文件上传"><a href="#SpringMVC的文件上传" class="headerlink" title="SpringMVC的文件上传"></a>SpringMVC的文件上传</h2><h3 id="1-SpringMVC的请求-文件上传-客户端表单实现-应用"><a href="#1-SpringMVC的请求-文件上传-客户端表单实现-应用" class="headerlink" title="1-SpringMVC的请求-文件上传-客户端表单实现(应用)"></a>1-SpringMVC的请求-文件上传-客户端表单实现(应用)</h3><p>文件上传客户端表单需要满足：</p><p>表单项type&#x3D;“file”</p><p>表单的提交方式是post  </p><p>表单的enctype属性是多部分表单形式，及enctype&#x3D;“multipart&#x2F;form-data”</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick22&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        文件<span class="number">1</span>&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="2-SpringMVC的请求-文件上传-文件上传的原理-理解"><a href="#2-SpringMVC的请求-文件上传-文件上传的原理-理解" class="headerlink" title="2-SpringMVC的请求-文件上传-文件上传的原理(理解)"></a>2-SpringMVC的请求-文件上传-文件上传的原理(理解)</h3><p>![截屏2022-05-12 09.56.09](&#x2F;Users&#x2F;mhy&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;Springmvc文件上传-异常处理&#x2F;截屏2022-05-12 09.56.09.png)</p><h3 id="3-SpringMVC的请求-文件上传-单文件上传的代码实现1-应用"><a href="#3-SpringMVC的请求-文件上传-单文件上传的代码实现1-应用" class="headerlink" title="3-SpringMVC的请求-文件上传-单文件上传的代码实现1(应用)"></a>3-SpringMVC的请求-文件上传-单文件上传的代码实现1(应用)</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置多媒体解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UYF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后台程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick22&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save22</span><span class="params">(String username, MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">       System.out.println(uploadFile);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-SpringMVC的请求-文件上传-单文件上传的代码实现2-应用"><a href="#4-SpringMVC的请求-文件上传-单文件上传的代码实现2-应用" class="headerlink" title="4-SpringMVC的请求-文件上传-单文件上传的代码实现2(应用)"></a>4-SpringMVC的请求-文件上传-单文件上传的代码实现2(应用)</h3><p>完成文件上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick22&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save22</span><span class="params">(String username, MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">//获得上传文件的名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> uploadFile.getOriginalFilename();</span><br><span class="line">        uploadFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\upload\\&quot;</span>+originalFilename));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-SpringMVC的请求-文件上传-多文件上传的代码实现-应用"><a href="#5-SpringMVC的请求-文件上传-多文件上传的代码实现-应用" class="headerlink" title="5-SpringMVC的请求-文件上传-多文件上传的代码实现(应用)"></a>5-SpringMVC的请求-文件上传-多文件上传的代码实现(应用)</h3><p>多文件上传，只需要将页面修改为多个文件上传项，将方法参数MultipartFile类型修改为MultipartFile[]即可</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick23&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        文件<span class="number">1</span>&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        文件<span class="number">2</span>&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick23&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save23</span><span class="params">(String username, MultipartFile[] uploadFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile multipartFile : uploadFile) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">            multipartFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\upload\\&quot;</span>+originalFilename));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-SpringMVC的请求-知识要点-理解，记忆"><a href="#6-SpringMVC的请求-知识要点-理解，记忆" class="headerlink" title="6-SpringMVC的请求-知识要点(理解，记忆)"></a>6-SpringMVC的请求-知识要点(理解，记忆)</h3><p>MVC实现数据请求方式</p><ul><li>基本类型参数</li><li>POJO类型参数</li><li>数组类型参数</li><li>集合类型参数</li></ul><p>MVC获取数据细节</p><ul><li>中文乱码问题</li><li>@RequestParam和@PathVariable</li><li>自定义类型转换器</li><li>获得Servlet相关API</li><li>@RequestHeader和@CookieValue</li><li>文件上传</li></ul><h1 id="SpringMVC的拦截器"><a href="#SpringMVC的拦截器" class="headerlink" title="SpringMVC的拦截器"></a>SpringMVC的拦截器</h1><h3 id="01-SpringMVC拦截器-拦截器的作用-理解"><a href="#01-SpringMVC拦截器-拦截器的作用-理解" class="headerlink" title="01-SpringMVC拦截器-拦截器的作用(理解)"></a>01-SpringMVC拦截器-拦截器的作用(理解)</h3><p>Spring MVC 的拦截器类似于 Servlet  开发中的过滤器 Filter，用于对处理器进行预处理和后处理。</p><p>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（InterceptorChain）。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是AOP思想的具体实现。</p><h3 id="02-SpringMVC拦截器-interceptor和filter区别-理解，记忆"><a href="#02-SpringMVC拦截器-interceptor和filter区别-理解，记忆" class="headerlink" title="02-SpringMVC拦截器-interceptor和filter区别(理解，记忆)"></a>02-SpringMVC拦截器-interceptor和filter区别(理解，记忆)</h3><p>关于interceptor和filter的区别，如图所示：</p><table><thead><tr><th>区别</th><th>过滤器</th><th>拦截器</th></tr></thead><tbody><tr><td>使用范围</td><td>是 servlet 规范中的一部分，任何Java Web 工程都可以使用</td><td>是 SpringMVC 框架自己的，只有使用了SpringMVC 框架的工程才能用</td></tr><tr><td>拦截范围</td><td>在 url-pattern 中配置了&#x2F;*之后，可以对所有要访问的资源拦截</td><td>只会拦截访问的控制器方法，如果访问的是 jsp，html,css,image 或者 js 是不会进行拦截的</td></tr></tbody></table><h3 id="03-SpringMVC拦截器-快速入门-应用"><a href="#03-SpringMVC拦截器-快速入门-应用" class="headerlink" title="03-SpringMVC拦截器-快速入门(应用)"></a>03-SpringMVC拦截器-快速入门(应用)</h3><p>自定义拦截器很简单，只有如下三步：</p><p>①创建拦截器类实现HandlerInterceptor接口</p><p>②配置拦截器</p><p>③测试拦截器的拦截效果</p><p>编写拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//在目标方法执行之前 执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle.....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//在目标方法执行之后 视图对象返回之前执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在流程都执行完毕后 执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置：在SpringMVC的配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试程序测试：</p><p>编写Controller,发请求到controller,跳转页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/target&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标资源执行......&quot;</span>);</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World! $&#123;name&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="04-SpringMVC拦截器-快速入门详解-应用"><a href="#04-SpringMVC拦截器-快速入门详解-应用" class="headerlink" title="04-SpringMVC拦截器-快速入门详解(应用)"></a>04-SpringMVC拦截器-快速入门详解(应用)</h3><p>拦截器在预处理后什么情况下会执行目标资源，什么情况下不执行目标资源，以及在有多个拦截器的情况下拦截器的执行顺序是什么?</p><p>再编写一个拦截器2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor2</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//在目标方法执行之前 执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle22222.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在目标方法执行之后 视图对象返回之前执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle2222...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在流程都执行完毕后 执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion2222....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置拦截器2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结论：</p><p>当拦截器的preHandle方法返回true则会执行目标资源，如果返回false则不执行目标资源</p><p>多个拦截器情况下，配置在前的先执行，配置在后的后执行</p><p>拦截器中的方法执行顺序是：preHandler——-目标资源—-postHandle—- afterCompletion</p><h3 id="05-SpringMVC拦截器-知识小结-记忆"><a href="#05-SpringMVC拦截器-知识小结-记忆" class="headerlink" title="05-SpringMVC拦截器-知识小结(记忆)"></a>05-SpringMVC拦截器-知识小结(记忆)</h3><p>拦截器中的方法说明如下</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>preHandle()</td><td>方法将在请求处理之前进行调用，该方法的返回值是布尔值Boolean类型的，当它返回为false时，表示请求结束，后续的Interceptor 和Controller 都不会再执行；当返回值为true时就会继续调用下一个Interceptor 的preHandle 方法</td></tr><tr><td>postHandle()</td><td>该方法是在当前请求进行处理之后被调用，前提是preHandle 方法的返回值为true 时才能被调用，且它会在DispatcherServlet 进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作</td></tr><tr><td>afterCompletion()</td><td>该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行，前提是preHandle 方法的返回值为true 时才能被调用</td></tr></tbody></table><h3 id="06-SpringMVC拦截器-用户登录权限控制分析-理解"><a href="#06-SpringMVC拦截器-用户登录权限控制分析-理解" class="headerlink" title="06-SpringMVC拦截器-用户登录权限控制分析(理解)"></a>06-SpringMVC拦截器-用户登录权限控制分析(理解)</h3><p>在day06-Spring练习案例的基础之上：用户没有登录的情况下，不能对后台菜单进行访问操作，点击菜单跳转到登录页面，只有用户登录成功后才能进行后台功能的操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SpringMVC的文件上传&quot;&gt;&lt;a href=&quot;#SpringMVC的文件上传&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC的文件上传&quot;&gt;&lt;/a&gt;SpringMVC的文件上传&lt;/h2&gt;&lt;h3 id=&quot;1-SpringMVC的请求-文件</summary>
      
    
    
    
    
    <category term="Java-Spring" scheme="http://example.com/tags/Java-Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC的请求和响应</title>
    <link href="http://example.com/2022/05/10/SpringMVC%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/"/>
    <id>http://example.com/2022/05/10/SpringMVC%E7%9A%84%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</id>
    <published>2022-05-10T03:08:13.000Z</published>
    <updated>2022-05-12T14:19:04.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC的请求和响应"><a href="#SpringMVC的请求和响应" class="headerlink" title="SpringMVC的请求和响应"></a>SpringMVC的请求和响应</h1><h2 id="SpringMVC的数据响应"><a href="#SpringMVC的数据响应" class="headerlink" title="SpringMVC的数据响应"></a>SpringMVC的数据响应</h2><h3 id="01-SpringMVC的数据响应-数据响应方式-理解"><a href="#01-SpringMVC的数据响应-数据响应方式-理解" class="headerlink" title="01-SpringMVC的数据响应-数据响应方式(理解)"></a>01-SpringMVC的数据响应-数据响应方式(理解)</h3><h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><p>直接返回字符串</p><p>通过ModelAndView对象返回</p><h4 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h4><p>直接返回字符串</p><p>返回对象或集合  </p><h3 id="02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）"><a href="#02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）" class="headerlink" title="02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）"></a>02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）</h3><p>![截屏2022-05-11 09.18.37](&#x2F;Users&#x2F;mhy&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;SpringMVC的请求和响应&#x2F;截屏2022-05-11 09.18.37.png)</p><h3 id="03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1-应用"><a href="#03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1-应用" class="headerlink" title="03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1(应用)"></a>03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1(应用)</h3><p>在Controller中方法返回ModelAndView对象，并且设置视图名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">save2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Model:模型 作用封装数据</span></span><br><span class="line"><span class="comment">            View：视图 作用展示数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">//设置模型数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        <span class="comment">//设置视图名称</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2-应用"><a href="#04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2-应用" class="headerlink" title="04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2(应用)"></a>04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2(应用)</h3><p>n在Controller中方法形参上直接声明ModelAndView，无需在方法中自己创建，在方法中直接使用该对象设置视图，同样可以跳转页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">save3</span><span class="params">(ModelAndView modelAndView)</span>&#123;</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick4&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save4</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;博学谷&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="05-SpringMVC的数据响应-页面跳转-返回ModelAndView3-应用"><a href="#05-SpringMVC的数据响应-页面跳转-返回ModelAndView3-应用" class="headerlink" title="05-SpringMVC的数据响应-页面跳转-返回ModelAndView3(应用)"></a>05-SpringMVC的数据响应-页面跳转-返回ModelAndView3(应用)</h3><p>在Controller方法的形参上可以直接使用原生的HttpServeltRequest对象，只需声明即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick5&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save5</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;酷丁鱼&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="06-SpringMVC的数据响应-回写数据-直接回写字符串-应用"><a href="#06-SpringMVC的数据响应-回写数据-直接回写字符串-应用" class="headerlink" title="06-SpringMVC的数据响应-回写数据-直接回写字符串(应用)"></a>06-SpringMVC的数据响应-回写数据-直接回写字符串(应用)</h3><p>通过SpringMVC框架注入的response对象，使用response.getWriter().print(“hello world”) 回写数据，此时不需要视图跳转，业务方法返回值为void</p><p>将需要回写的字符串直接返回，但此时需要通过@ResponseBody注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick7&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span>  <span class="comment">//告知SpringMVC框架 不进行视图跳转 直接进行数据响应</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save7</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello itheima&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(value=&quot;/quick6&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save6</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      response.getWriter().print(<span class="string">&quot;hello itcast&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="07-SpringMVC的数据响应-回写数据-直接回写json格式字符串-应用"><a href="#07-SpringMVC的数据响应-回写数据-直接回写json格式字符串-应用" class="headerlink" title="07-SpringMVC的数据响应-回写数据-直接回写json格式字符串(应用)"></a>07-SpringMVC的数据响应-回写数据-直接回写json格式字符串(应用)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick8&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save8</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;zhangsan\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>手动拼接json格式字符串的方式很麻烦，开发中往往要将复杂的java对象转换成json格式的字符串，我们可以使用web阶段学习过的json转换工具jackson进行转换,通过jackson转换json格式字符串，回写字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick9&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">save9</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      user.setUsername(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">      user.setAge(<span class="number">30</span>);</span><br><span class="line">      <span class="comment">//使用json的转换工具将对象转换成json格式字符串在返回</span></span><br><span class="line">      <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">      <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> json;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="08-SpringMVC的数据响应-回写数据-返回对象或集合-应用"><a href="#08-SpringMVC的数据响应-回写数据-返回对象或集合-应用" class="headerlink" title="08-SpringMVC的数据响应-回写数据-返回对象或集合(应用)"></a>08-SpringMVC的数据响应-回写数据-返回对象或集合(应用)</h3><p>通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数，指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick10&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="comment">//期望SpringMVC自动将User转换成json格式的字符串</span></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">save10</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      user.setUsername(<span class="string">&quot;lisi2&quot;</span>);</span><br><span class="line">      user.setAge(<span class="number">32</span>);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="09-SpringMVC的数据响应-回写数据-返回对象或集合2-应用"><a href="#09-SpringMVC的数据响应-回写数据-返回对象或集合2-应用" class="headerlink" title="09-SpringMVC的数据响应-回写数据-返回对象或集合2(应用)"></a>09-SpringMVC的数据响应-回写数据-返回对象或集合2(应用)</h3><p>在方法上添加@ResponseBody就可以返回json格式的字符串，但是这样配置比较麻烦，配置的代码比较多，因此，我们可以使用mvc的注解驱动代替上述配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。</p><p>使用<code>&lt;mvc:annotation-driven /&gt;</code>自动加载 RequestMappingHandlerMapping（处理映射器）和</p><p>RequestMappingHandlerAdapter（ 处 理 适 配 器 ），可用在Spring-xml.xml配置文件中使用</p><p><code>&lt;mvc:annotation-driven /&gt;</code>替代注解处理器和适配器的配置。</p><p>同时使用<code>&lt;mvc:annotation-driven /&gt;</code></p><p><strong>默认底层就会集成jackson进行对象或集合的json格式字符串的转换</strong></p><h3 id="10-SpringMVC的数据响应-知识要点小结-理解，记忆"><a href="#10-SpringMVC的数据响应-知识要点小结-理解，记忆" class="headerlink" title="10-SpringMVC的数据响应-知识要点小结(理解，记忆)"></a>10-SpringMVC的数据响应-知识要点小结(理解，记忆)</h3><p>1） 页面跳转</p><p>直接返回字符串</p><p>通过ModelAndView对象返回</p><p>2） 回写数据 </p><p>直接返回字符串</p><p>HttpServletResponse 对象直接写回数据，HttpServletRequest对象带回数据，Model对象带回数据或者@ResponseBody将字符串数据写回</p><p>返回对象或集合 </p><p>@ResponseBody+<code>&lt;mvc:annotation-driven/&gt;   </code></p><h2 id="SpringMVC的请求"><a href="#SpringMVC的请求" class="headerlink" title="SpringMVC的请求"></a>SpringMVC的请求</h2><h3 id="11-SpringMVC的请求-获得请求参数-请求参数类型-理解"><a href="#11-SpringMVC的请求-获得请求参数-请求参数类型-理解" class="headerlink" title="11-SpringMVC的请求-获得请求参数-请求参数类型(理解)"></a>11-SpringMVC的请求-获得请求参数-请求参数类型(理解)</h3><p>客户端请求参数的格式是：name&#x3D;value&amp;name&#x3D;value……</p><p>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数</p><p>基本类型参数</p><p>POJO类型参数</p><p>数组类型参数</p><p>集合类型参数</p><h3 id="12-SpringMVC的请求-获得请求参数-获得基本类型参数-应用"><a href="#12-SpringMVC的请求-获得请求参数-获得基本类型参数-应用" class="headerlink" title="12-SpringMVC的请求-获得请求参数-获得基本类型参数(应用)"></a>12-SpringMVC的请求-获得请求参数-获得基本类型参数(应用)</h3><p>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配。并且能自动做类型转换；</p><p>自动的类型转换是指从String向其他类型的转换</p><p><code>http://localhost:8080/itheima_springmvc1/quick9?username=zhangsan&amp;age=12</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick11&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span><span class="comment">//不就行页面跳转</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save11</span><span class="params">(String username,<span class="type">int</span> age)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      System.out.println(username);</span><br><span class="line">      System.out.println(age);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="13-SpringMVC的请求-获得请求参数-获得POJO类型参数-应用"><a href="#13-SpringMVC的请求-获得请求参数-获得POJO类型参数-应用" class="headerlink" title="13-SpringMVC的请求-获得请求参数-获得POJO类型参数(应用)"></a>13-SpringMVC的请求-获得请求参数-获得POJO类型参数(应用)</h3><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick12&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save12</span><span class="params">(User user)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="14-SpringMVC的请求-获得请求参数-获得数组类型参数-应用"><a href="#14-SpringMVC的请求-获得请求参数-获得数组类型参数-应用" class="headerlink" title="14-SpringMVC的请求-获得请求参数-获得数组类型参数(应用)"></a>14-SpringMVC的请求-获得请求参数-获得数组类型参数(应用)</h3><p>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配。</p><p><code>http://localhost:8080/itheima_springmvc1/quick13?strs=111&amp;strs=222&amp;strs=333 </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick13&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save13</span><span class="params">(String[] strs)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      System.out.println(Arrays.asList(strs));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="15-SpringMVC的请求-获得请求参数-获得集合类型参数1-应用"><a href="#15-SpringMVC的请求-获得请求参数-获得集合类型参数1-应用" class="headerlink" title="15-SpringMVC的请求-获得请求参数-获得集合类型参数1(应用)"></a>15-SpringMVC的请求-获得请求参数-获得集合类型参数1(应用)</h3><p>获得集合参数时，要将集合参数包装到一个POJO中才可以。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick14&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;%--表明是第一个User对象的username age--%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;VO&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userList=&quot;</span> + userList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick14&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save14</span><span class="params">(VO vo)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(vo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="16-SpringMVC的请求-获得请求参数-获得集合类型参数2-应用"><a href="#16-SpringMVC的请求-获得请求参数-获得集合类型参数2-应用" class="headerlink" title="16-SpringMVC的请求-获得请求参数-获得集合类型参数2(应用)"></a>16-SpringMVC的请求-获得请求参数-获得集合类型参数2(应用)</h3><p>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POJO进行包装</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.3.1.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="type">var</span> <span class="variable">userList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">        userList.push(&#123;username:<span class="string">&quot;zhangsan&quot;</span>,age:<span class="number">18</span>&#125;);</span><br><span class="line">        userList.push(&#123;username:<span class="string">&quot;lisi&quot;</span>,age:<span class="number">28</span>&#125;);</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick15&quot;</span>,</span><br><span class="line">            data:JSON.stringify(userList),</span><br><span class="line">            contentType:<span class="string">&quot;application/json;charset=utf-8&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick15&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save15</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在spring-mvc.xml文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="17-SpringMVC的请求-获得请求参数-静态资源访问的开启-应用"><a href="#17-SpringMVC的请求-获得请求参数-静态资源访问的开启-应用" class="headerlink" title="17-SpringMVC的请求-获得请求参数-静态资源访问的开启(应用)"></a>17-SpringMVC的请求-获得请求参数-静态资源访问的开启(应用)</h3><p>当有静态资源需要加载时，比如jquery文件，通过谷歌开发者工具抓包发现，没有加载到jquery文件，原因是SpringMVC的前端控制器DispatcherServlet的url-pattern配置的是&#x2F;,代表对所有的资源都进行过滤操作，我们可以通过以下两种方式指定放行静态资源：</p><ul><li>在spring-mvc.xml配置文件中指定放行的资源<ul><li><code>&lt;mvc:resources mapping=&quot;/js/**&quot;location=&quot;/js/&quot;/&gt; </code></li></ul></li><li>使用<code>&lt;mvc:default-servlet-handler/&gt;</code>标签<ul><li>交给原始的容器tomcat帮你找静态资源</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开发资源的访问--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;mvc:resources mapping=&quot;/img/**&quot; location=&quot;/img/&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器-应用"><a href="#18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器-应用" class="headerlink" title="18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器(应用)"></a>18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器(应用)</h3><p>当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局过滤的filter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="19-SpringMVC的请求-获得请求参数-参数绑定注解-RequestParam-应用"><a href="#19-SpringMVC的请求-获得请求参数-参数绑定注解-RequestParam-应用" class="headerlink" title="19-SpringMVC的请求-获得请求参数-参数绑定注解@RequestParam(应用)"></a>19-SpringMVC的请求-获得请求参数-参数绑定注解@RequestParam(应用)</h3><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显示的绑定</p><p>还有以下参数</p><ul><li>value：与请求参数名称</li><li>required：此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错</li><li>defaultValue：当没有指定请求参数时，则使用指定的默认值赋值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/quick16&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick16&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save16</span><span class="params">(<span class="meta">@RequestParam(value=&quot;name&quot;,required = false,defaultValue = &quot;itcast&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取-应用"><a href="#20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取-应用" class="headerlink" title="20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取(应用)"></a>20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取(应用)</h3><p>Restful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</p><p>Restful风格的请求是使用“url+请求方式”表示一次请求目的的，HTTP 协议里面四个表示操作方式的动词如下：</p><p>GET：用于获取资源</p><p>POST：用于新建资源</p><p>PUT：用于更新资源</p><p>DELETE：用于删除资源  </p><p>例如：</p><p>&#x2F;user&#x2F;1    GET ：       得到 id &#x3D; 1 的 user</p><p>&#x2F;user&#x2F;1   DELETE：  删除 id &#x3D; 1 的 user</p><p>&#x2F;user&#x2F;1    PUT：       更新 id &#x3D; 1 的 user</p><p>&#x2F;user       POST：      新增 user</p><p>上述url地址&#x2F;user&#x2F;1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。地址&#x2F;user&#x2F;1可以写成&#x2F;user&#x2F;{id}，占位符{id}对应的就是1的值。在业务方法中我们可以使用@PathVariable注解进行占位符的匹配获取工作。</p><p><code>http://localhost:8080/itheima_springmvc1/quick17/zhangsan</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick17/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save17</span><span class="params">(<span class="meta">@PathVariable(value=&quot;name&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="21-SpringMVC的请求-获得请求参数-自定义类型转换器-应用"><a href="#21-SpringMVC的请求-获得请求参数-自定义类型转换器-应用" class="headerlink" title="21-SpringMVC的请求-获得请求参数-自定义类型转换器(应用)"></a>21-SpringMVC的请求-获得请求参数-自定义类型转换器(应用)</h3><p>SpringMVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置。</p><p>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如：日期类型的数据就需要自定义转换器。</p><h4 id="自定义类型转换器的开发步骤："><a href="#自定义类型转换器的开发步骤：" class="headerlink" title="自定义类型转换器的开发步骤："></a>自定义类型转换器的开发步骤：</h4><ol><li>定义转换器类实现Converter接口</li><li>在配置文件中声明转换器</li><li>在&lt;annotation-driven&gt;中引用转换器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String dateStr)</span> &#123;</span><br><span class="line">        <span class="comment">//将日期字符串转换成日期对象 返回</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = format.parse(dateStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick18&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save18</span><span class="params">(Date date)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;converterService&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.converter.DateConverter&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion</span> <span class="attr">service</span>=<span class="string">&quot;converterService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="22-SpringMVC的请求-获得请求参数-获得Servlet相关API-应用"><a href="#22-SpringMVC的请求-获得请求参数-获得Servlet相关API-应用" class="headerlink" title="22-SpringMVC的请求-获得请求参数-获得Servlet相关API(应用)"></a>22-SpringMVC的请求-获得请求参数-获得Servlet相关API(应用)</h3><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p><p>HttpServletRequest</p><p>HttpServletResponse</p><p>HttpSession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick19&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save19</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        System.out.println(session);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="23-SpringMVC的请求-获得请求参数-获得请求头信息-应用"><a href="#23-SpringMVC的请求-获得请求参数-获得请求头信息-应用" class="headerlink" title="23-SpringMVC的请求-获得请求参数-获得请求头信息(应用)"></a>23-SpringMVC的请求-获得请求参数-获得请求头信息(应用)</h3><p>使用@RequestHeader可以获得请求头信息，相当于web阶段学习的request.getHeader(name)</p><p>@RequestHeader注解的属性如下：</p><p>value：请求头的名称</p><p>required：是否必须携带此请求头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick20&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save20</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;User-Agent&quot;,required = false)</span> String user_agent)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(user_agent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用@CookieValue可以获得指定Cookie的值</p><p>@CookieValue注解的属性如下：</p><p>value：指定cookie的名称</p><p>required：是否必须携带此cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick21&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save21</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String jsessionId)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       System.out.println(jsessionId);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringMVC的请求和响应&quot;&gt;&lt;a href=&quot;#SpringMVC的请求和响应&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC的请求和响应&quot;&gt;&lt;/a&gt;SpringMVC的请求和响应&lt;/h1&gt;&lt;h2 id=&quot;SpringMVC的数据响</summary>
      
    
    
    
    
    <category term="Java-Spring" scheme="http://example.com/tags/Java-Spring/"/>
    
  </entry>
  
  <entry>
    <title>小程序-视图与逻辑</title>
    <link href="http://example.com/2022/05/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/"/>
    <id>http://example.com/2022/05/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/</id>
    <published>2022-05-09T12:55:12.000Z</published>
    <updated>2022-05-09T14:55:09.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>页面导航</li><li>页面事件</li><li>生命周期</li><li>WXS 脚本</li><li>案例 - 本地生活（列表页面）</li></ul><h2 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a><strong>页面导航</strong></h2><h3 id="什么是页面导航"><a href="#什么是页面导航" class="headerlink" title="什么是页面导航"></a><strong>什么是页面导航</strong></h3><p>页面导航指的是页面之间的相互跳转。例如，浏览器中实现页面导航的方式有如下两种：</p><ul><li>&lt;a&gt; 链接</li><li>location.href</li></ul><h3 id="小程序中实现页面导航的两种方式"><a href="#小程序中实现页面导航的两种方式" class="headerlink" title="小程序中实现页面导航的两种方式"></a><strong>小程序中实现页面导航的两种方式</strong></h3><ol><li>声明式导航<ul><li>在页面上声明一个 &lt;navigator&gt; 导航组件</li><li>通过点击 &lt;navigator&gt; 组件实现页面跳转</li></ul></li><li>编程式导航<ul><li>调用小程序的导航 API，实现页面的跳转</li></ul></li></ol><h2 id="页面导航-声明式导航"><a href="#页面导航-声明式导航" class="headerlink" title="页面导航 - 声明式导航"></a><strong>页面导航 -</strong> <strong>声明式导航</strong></h2><h3 id="导航到-tabBar-页面"><a href="#导航到-tabBar-页面" class="headerlink" title="导航到 tabBar 页面"></a><strong>导航到 tabBar 页面</strong></h3><p>tabBar 页面指的是被配置为 tabBar 的页面。</p><p>在使用 &lt;navigator&gt; 组件跳转到指定的 tabBar 页面时，需要指定 url 属性和 open-type 属性，其中：</p><ul><li>url 表示要跳转的页面的地址，必须以 &#x2F; 开头</li><li>open-type 表示跳转的方式，必须为 switchTab</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/home/home&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;switchTab&quot;</span>&gt;</span>导航到主页<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="导航到非-tabBar-页面"><a href="#导航到非-tabBar-页面" class="headerlink" title="导航到非 tabBar 页面"></a><strong>导航到非 tabBar 页面</strong></h3><p>非 tabBar 页面指的是没有被配置为 tabBar 的页面。</p><p>在使用&lt;navigator&gt; 组件跳转到普通的非 tabBar 页面时，则需要指定 url 属性和 open-type 属性，其中：</p><ul><li>url 表示要跳转的页面的地址，必须以 &#x2F; 开头</li><li>open-type 表示跳转的方式，必须为 navigate</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/home/home&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;navigate&quot;</span>&gt;</span>导航到主页<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：为了简便，在导航到非 tabBar 页面时，open-type&#x3D;”navigate” 属性可以省略。</p><h3 id="后退导航"><a href="#后退导航" class="headerlink" title="后退导航"></a><strong>后退导航</strong></h3><p>如果要后退到上一页面或多级页面，则需要指定 open-type 属性和 delta 属性，其中：</p><ul><li>open-type 的值必须是 navigateBack，表示要进行后退导航</li><li>delta 的值必须是数字，表示要后退的层级</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">open-type</span>=<span class="string">&quot;navigateBack&quot;</span> <span class="attr">delta</span>=<span class="string">&quot;1&quot;</span>&gt;</span>返回上一页<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：为了简便，如果只是后退到上一页面，则可以省略 delta 属性，因为其默认值就是 1。</p><h2 id="页面导航-编程式导航"><a href="#页面导航-编程式导航" class="headerlink" title="页面导航 - 编程式导航"></a><strong>页面导航 -</strong> <strong>编程式导航</strong></h2><h3 id="导航到-tabBar-页面-1"><a href="#导航到-tabBar-页面-1" class="headerlink" title="导航到 tabBar 页面"></a><strong>导航到 tabBar 页面</strong></h3><p>调用 wx.switchTab(Object object) 方法，可以跳转到 tabBar 页面。其中 Object 参数对象的属性列表如下：</p><table><thead><tr><th>属性</th><th>类型</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>需要跳转的 tabBar 页面的路径，路径后不能带参数</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;gotoHome&quot;</span>&gt;</span>跳转到home页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">gotoHome</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/home/home&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="导航到非-tabBar-页面-1"><a href="#导航到非-tabBar-页面-1" class="headerlink" title="导航到非 tabBar 页面"></a><strong>导航到非 tabBar 页面</strong></h3><p>调用 wx.navigateTo(Object object) 方法，可以跳转到非 tabBar 的页面。其中 Object 参数对象的属性列表</p><table><thead><tr><th>属性</th><th>类型</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td>string</td><td>是</td><td>需要跳转到的非 tabBar 页面的路径，路径后可以带参数</td></tr><tr><td>success</td><td>function</td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;gotoInfo&quot;</span>&gt;</span>跳转到home页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">gotoHome</span>(<span class="params"></span>) &#123;</span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/info/info&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="后退导航-1"><a href="#后退导航-1" class="headerlink" title="后退导航"></a><strong>后退导航</strong></h3><p>调用 wx.navigateBack(Object object) 方法，可以返回上一页面或多级页面。其中 Object 参数对象可选的</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>是否必选</th><th>说明</th></tr></thead><tbody><tr><td>delta</td><td>number</td><td>1</td><td>否</td><td>返回的页面数，如果 delta 大于现有页面数，则返回到首页</td></tr><tr><td>success</td><td>function</td><td></td><td>否</td><td>接口调用成功的回调函数</td></tr><tr><td>fail</td><td>function</td><td></td><td>否</td><td>接口调用失败的回调函数</td></tr><tr><td>complete</td><td>function</td><td></td><td>否</td><td>接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;gotoBack&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">gotoBack</span>(<span class="params"></span>) &#123;</span><br><span class="line">wx.<span class="title function_">navigateBack</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="页面导航-导航传参"><a href="#页面导航-导航传参" class="headerlink" title="页面导航 - 导航传参"></a><strong>页面导航 -</strong> <strong>导航传参</strong></h2><h3 id="声明式导航传参"><a href="#声明式导航传参" class="headerlink" title="声明式导航传参"></a><strong>声明式导航传参</strong></h3><p>navigator 组件的 url 属性用来指定将要跳转到的页面的路径。同时，路径的后面还可以携带参数： </p><ul><li>参数与路径之间使用 ? 分隔</li><li>参数键与参数值用 &#x3D; 相连</li><li>不同参数用 &amp; 分隔</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;/pages/info/info?name=mhy&amp;age=20&quot;</span>&gt;</span>跳转到info页面<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：不能跳转到tabBar页面</p><h3 id="编程式导航传参"><a href="#编程式导航传参" class="headerlink" title="编程式导航传参"></a><strong>编程式导航传参</strong></h3><p>调用 wx.navigateTo(Object object) 方法跳转页面时，也可以携带参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;gotoinfo2&quot;</span>&gt;</span>跳转到info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">gotoinfo2</span>(<span class="params"></span>) &#123;</span><br><span class="line">wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;/pages/info/info?name=ls&amp;gender=男&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-onLoad-中接收导航参数"><a href="#在-onLoad-中接收导航参数" class="headerlink" title="在 onLoad 中接收导航参数"></a><strong>在 onLoad 中接收导航参数</strong></h3><p>通过声明式导航传参或编程式导航传参所携带的参数，可以直接在 onLoad 事件中直接获取到</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;页面导航&lt;/li&gt;
&lt;li&gt;页面事件&lt;/li&gt;
&lt;li&gt;生命周期&lt;/li&gt;
&lt;li&gt;WXS 脚本&lt;/li&gt;
&lt;li&gt;案例 - 本</summary>
      
    
    
    
    
    <category term="小程序" scheme="http://example.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring集成web开发环境</title>
    <link href="http://example.com/2022/05/09/Spring%E9%9B%86%E6%88%90web%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2022/05/09/Spring%E9%9B%86%E6%88%90web%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2022-05-09T00:40:41.000Z</published>
    <updated>2022-05-09T07:41:31.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring与Web环境集成"><a href="#1-Spring与Web环境集成" class="headerlink" title="1. Spring与Web环境集成"></a>1. Spring与Web环境集成</h2><h3 id="1-1-ApplicationContext应用上下文获取方式"><a href="#1-1-ApplicationContext应用上下文获取方式" class="headerlink" title="1.1 ApplicationContext应用上下文获取方式"></a>1.1 ApplicationContext应用上下文获取方式</h3><p>应用上下文对象是通过new ClasspathXmlApplicationContext(spring配置文件) 方式获取的，但是每次从容器中获得Bean时都要编写new ClasspathXmlApplicationContext(spring配置文件) ，这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p><p>在Web项目中，可以使用ServletContextListener监听Web应用的启动，我们可以在Web应用启动时，就加载Spring的配置文件，创建应用上下文对象ApplicationContext，在将其存储到最大的域servletContext域中，这样就可以在任意位置从域中获得应用上下文ApplicationContext对象了。</p><h3 id="1-2-Spring提供获取应用上下文的工具"><a href="#1-2-Spring提供获取应用上下文的工具" class="headerlink" title="1.2 Spring提供获取应用上下文的工具"></a>1.2 Spring提供获取应用上下文的工具</h3><p>上面的分析不用手动实现，Spring提供了一个监听器ContextLoaderListener就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，提供了一个客户端工具WebApplicationContextUtils供使用者获得应用上下文对象。</p><p>所以我们需要做的只有两件事：</p><p>①在web.xml中配置ContextLoaderListener监听器（导入spring-web坐标）</p><p>②使用WebApplicationContextUtils获得应用上下文对象ApplicationContext</p><h3 id="1-3-导入Spring集成web的坐标"><a href="#1-3-导入Spring集成web的坐标" class="headerlink" title="1.3 导入Spring集成web的坐标"></a>1.3 导入Spring集成web的坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-配置ContextLoaderListener监听器"><a href="#1-4-配置ContextLoaderListener监听器" class="headerlink" title="1.4 配置ContextLoaderListener监听器"></a>1.4 配置ContextLoaderListener监听器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring的监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">       org.springframework.web.context.ContextLoaderListener</span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-通过工具获得应用上下文对象"><a href="#1-5-通过工具获得应用上下文对象" class="headerlink" title="1.5 通过工具获得应用上下文对象"></a>1.5 通过工具获得应用上下文对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span>    </span><br><span class="line">    WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>知识要点</strong></p><p>Spring集成web环境步骤</p><p>​      ①配置ContextLoaderListener监听器</p><p>​      ②使用WebApplicationContextUtils获得应用上下文</p><h2 id="2-SpringMVC的简介"><a href="#2-SpringMVC的简介" class="headerlink" title="2. SpringMVC的简介"></a>2. SpringMVC的简介</h2><h3 id="2-1-SpringMVC概述"><a href="#2-1-SpringMVC概述" class="headerlink" title="2.1 SpringMVC概述"></a>2.1 SpringMVC概述</h3><p>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于SpringFrameWork 的后续产品，已经融合在 Spring Web Flow 中。</p><p>SpringMVC 已经成为目前最主流的MVC框架之一，并且随着Spring3.0 的发布，全面超越 Struts2，成为最优秀的 MVC 框架。它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持 RESTful 编程风格的请求。</p><h3 id="2-3-SpringMVC快速入门"><a href="#2-3-SpringMVC快速入门" class="headerlink" title="2.3 SpringMVC快速入门"></a>2.3 SpringMVC快速入门</h3><p>需求：客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转。</p><p><strong>开发步骤</strong></p><p>①导入SpringMVC相关坐标</p><p>②配置SpringMVC核心控制器DispathcerServlet（前端控制器）</p><p>③创建Controller类和视图页面</p><p>④使用注解配置Controller类中业务方法的映射地址</p><p>⑤配置SpringMVC核心文件 spring-mvc.xml(配置组件扫描)</p><p>⑥客户端发起请求测试</p><p><strong>代码实现</strong></p><p>①导入Spring和SpringMVC的坐标、导入Servlet和Jsp的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--Spring坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--SpringMVC坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Jsp坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②在web.xml配置SpringMVC的核心控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③创建Controller和业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickController</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quickMethod</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;quickMethod running.....&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③创建视图页面index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;Hello SpringMVC!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>④配置注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickController</span> &#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quickMethod</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;quickMethod running.....&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤创建spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/mvc   </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/mvc/spring-mvc.xsd  </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑥访问测试地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/itheima_springmvc1/quick </span><br></pre></td></tr></table></figure><h3 id="2-3-SpringMVC流程图示"><a href="#2-3-SpringMVC流程图示" class="headerlink" title="2.3 SpringMVC流程图示"></a>2.3 SpringMVC流程图示</h3><p>![截屏2022-05-09 14.48.28](&#x2F;Users&#x2F;mhy&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;Spring集成web开发环境&#x2F;截屏2022-05-09 14.48.28.png)</p><h3 id="2-4-知识要点"><a href="#2-4-知识要点" class="headerlink" title="2.4 知识要点"></a>2.4 知识要点</h3><p>SpringMVC的开发步骤 </p><p>   ①导入SpringMVC相关坐标</p><p>   ②配置SpringMVC核心控制器DispathcerServlet</p><p>   ③创建Controller类和视图页面</p><p>   ④使用注解配置Controller类中业务方法的映射地址</p><p>   ⑤配置SpringMVC核心文件 spring-mvc.xml</p><p>   ⑥客户端发起请求测试</p><h2 id="3-SpringMVC的组件解析"><a href="#3-SpringMVC的组件解析" class="headerlink" title="3. SpringMVC的组件解析"></a>3. SpringMVC的组件解析</h2><h3 id="3-1-SpringMVC的执行流程"><a href="#3-1-SpringMVC的执行流程" class="headerlink" title="3.1 SpringMVC的执行流程"></a>3.1 SpringMVC的执行流程</h3><h3 id="截屏2022-05-09-14-55-29-x2F-Users-x2F-mhy-x2F-blog-x2F-source-x2F-posts-x2F-Spring集成web开发环境-x2F-截屏2022-05-09-14-55-29-png"><a href="#截屏2022-05-09-14-55-29-x2F-Users-x2F-mhy-x2F-blog-x2F-source-x2F-posts-x2F-Spring集成web开发环境-x2F-截屏2022-05-09-14-55-29-png" class="headerlink" title="![截屏2022-05-09 14.55.29](&#x2F;Users&#x2F;mhy&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;Spring集成web开发环境&#x2F;截屏2022-05-09 14.55.29.png)"></a>![截屏2022-05-09 14.55.29](&#x2F;Users&#x2F;mhy&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;Spring集成web开发环境&#x2F;截屏2022-05-09 14.55.29.png)</h3><p>①用户发送请求至前端控制器DispatcherServlet。</p><p>②DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p><p>③处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p><p>④DispatcherServlet调用HandlerAdapter处理器适配器。</p><p>⑤HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p><p>⑥Controller执行完成返回ModelAndView。</p><p>⑦HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p><p>⑧DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p><p>⑨ViewReslover解析后返回具体View。</p><p>⑩DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户。</p><h3 id="3-2-SpringMVC组件解析"><a href="#3-2-SpringMVC组件解析" class="headerlink" title="3.2 SpringMVC组件解析"></a>3.2 SpringMVC组件解析</h3><ol><li><strong>前端控制器：DispatcherServlet</strong></li></ol><p>​    用户请求到达前端控制器，它就相当于 MVC 模式中的 C，DispatcherServlet 是整个流程控制的中心，由</p><p>它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。</p><ol start="2"><li><strong>处理器映射器：HandlerMapping</strong></li></ol><p>​    HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的</p><p>映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><ol start="3"><li><strong>处理器适配器：HandlerAdapter</strong></li></ol><p>​    通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理</p><p>器进行执行。</p><ol start="4"><li><strong>处理器：Handler</strong></li></ol><p>​    它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由</p><p>Handler 对具体的用户请求进行处理。</p><ol start="5"><li><strong>视图解析器：View Resolver</strong></li></ol><p>​    View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p><ol start="6"><li><strong>视图：View</strong></li></ol><p>​    SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。最常用的视图就是 jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面</p><h3 id="3-3-SpringMVC注解解析"><a href="#3-3-SpringMVC注解解析" class="headerlink" title="3.3 SpringMVC注解解析"></a>3.3 SpringMVC注解解析</h3><p>@RequestMapping</p><p>作用：用于建立请求 URL 和处理请求方法之间的对应关系</p><p>位置：</p><p>​      类上，请求URL 的第一级访问目录。此处不写的话，就相当于应用的根目录</p><p>​      方法上，请求 URL 的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径</p><p>属性：</p><p>​      value：用于指定请求的URL。它和path属性的作用是一样的</p><p>​      method：用于指定请求的方式</p><p>​      params：用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模一样</p><p>例如：</p><p>​      params &#x3D; {“accountName”}，表示请求参数必须有accountName</p><p>​      params &#x3D; {“moeny!100”}，表示请求参数中money不能是100</p><p>1.mvc命名空间引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">命名空间：xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">        xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">约束地址：http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">        http://www.springframework.org/schema/mvc </span><br><span class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span><br></pre></td></tr></table></figure><ol start="2"><li>组件扫描</li></ol><p>SpringMVC基于Spring容器，所以在进行SpringMVC操作时，需要将Controller存储到Spring容器中，如果使用@Controller注解标注的话，就需要使用&lt;context:component-scan base-package&#x3D;“com.itheima.controller”&#x2F;&gt;进行组件扫描。</p><h3 id="3-4-SpringMVC的XML配置解析"><a href="#3-4-SpringMVC的XML配置解析" class="headerlink" title="3.4 SpringMVC的XML配置解析"></a>3.4 SpringMVC的XML配置解析</h3><p>SpringMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的，该配置文件地址org&#x2F;springframework&#x2F;web&#x2F;servlet&#x2F;DispatcherServlet.properties，该文件中配置了默认的视图解析器，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.web.servlet.ViewResolver</span>=<span class="string">org.springframework.web.servlet.view.InternalResourceViewResolver</span></span><br></pre></td></tr></table></figure><p>翻看该解析器源码，可以看到该解析器的默认设置，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">REDIRECT_URL_PREFIX</span> = <span class="string">&quot;redirect:&quot;  --重定向前缀</span></span><br><span class="line"><span class="attr">FORWARD_URL_PREFIX</span> = <span class="string">&quot;forward:&quot;    --转发前缀（默认值）</span></span><br><span class="line"><span class="attr">prefix</span> = <span class="string">&quot;&quot;;     --视图名称前缀</span></span><br><span class="line"><span class="attr">suffix</span> = <span class="string">&quot;&quot;;     --视图名称后缀</span></span><br></pre></td></tr></table></figure><ol><li>视图解析器</li></ol><p>我们可以通过属性注入的方式修改视图的的前后缀</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-知识要点"><a href="#3-5-知识要点" class="headerlink" title="3.5 知识要点"></a>3.5 知识要点</h3><p><strong>SpringMVC的相关组件</strong> </p><p>前端控制器：DispatcherServlet</p><p>处理器映射器：HandlerMapping</p><p>处理器适配器：HandlerAdapter</p><p>处理器：Handler</p><p>视图解析器：View Resolver</p><p>视图：View</p><p><strong>SpringMVC的注解和配置</strong> </p><p>请求映射注解：@RequestMapping</p><p>视图解析器配置：</p><p>REDIRECT_URL_PREFIX &#x3D; “redirect:”  </p><p>FORWARD_URL_PREFIX &#x3D; “forward:”    </p><p>prefix &#x3D; “”;     </p><p>suffix &#x3D; “”;     </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Spring与Web环境集成&quot;&gt;&lt;a href=&quot;#1-Spring与Web环境集成&quot; class=&quot;headerlink&quot; title=&quot;1. Spring与Web环境集成&quot;&gt;&lt;/a&gt;1. Spring与Web环境集成&lt;/h2&gt;&lt;h3 id=&quot;1-1-App</summary>
      
    
    
    
    
    <category term="Java-Spring" scheme="http://example.com/tags/Java-Spring/"/>
    
  </entry>
  
  <entry>
    <title>spring jdbcTemplate</title>
    <link href="http://example.com/2022/05/08/spring-jdbcTemplate/"/>
    <id>http://example.com/2022/05/08/spring-jdbcTemplate/</id>
    <published>2022-05-08T02:40:58.000Z</published>
    <updated>2022-05-08T14:26:36.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JdbcTemplate基本使用"><a href="#JdbcTemplate基本使用" class="headerlink" title="JdbcTemplate基本使用"></a>JdbcTemplate基本使用</h1><h2 id="01-JdbcTemplate基本使用-概述-了解"><a href="#01-JdbcTemplate基本使用-概述-了解" class="headerlink" title="01-JdbcTemplate基本使用-概述(了解)"></a>01-JdbcTemplate基本使用-概述(了解)</h2><p>JdbcTemplate是spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类。例如：操作关系型数据的JdbcTemplate和HibernateTemplate，操作nosql数据库的RedisTemplate，操作消息队列的JmsTemplate等等。</p><h2 id="02-JdbcTemplate基本使用-开发步骤-理解"><a href="#02-JdbcTemplate基本使用-开发步骤-理解" class="headerlink" title="02-JdbcTemplate基本使用-开发步骤(理解)"></a>02-JdbcTemplate基本使用-开发步骤(理解)</h2><p>①导入spring-jdbc和spring-tx坐标</p><p>②创建数据库表和实体</p><p>③创建JdbcTemplate对象</p><p>④执行数据库操作</p><h2 id="03-JdbcTemplate基本使用-快速入门代码实现-应用"><a href="#03-JdbcTemplate基本使用-快速入门代码实现-应用" class="headerlink" title="03-JdbcTemplate基本使用-快速入门代码实现(应用)"></a>03-JdbcTemplate基本使用-快速入门代码实现(应用)</h2><p>导入spring-jdbc和spring-tx坐标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;itheima_spring_jdbc&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;itheima_spring_jdbc Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br><span class="line">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.32&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;c3p0&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.1.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1.10&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.3&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>创建数据库表和实体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.itheima.domain;</span><br><span class="line"></span><br><span class="line">public class Account &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private double money;</span><br><span class="line"></span><br><span class="line">    public String getNa me() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getMoney() &#123;</span><br><span class="line">        return money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMoney(double money) &#123;</span><br><span class="line">        this.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Account&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, money=&quot; + money +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建JdbcTemplate对象</p><p>执行数据库操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    //测试JdbcTemplate开发步骤</span><br><span class="line">    public void test1() throws PropertyVetoException &#123;</span><br><span class="line">        //创建数据源对象</span><br><span class="line">        ComboPooledDataSource dataSource = new ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        dataSource.setJdbcUrl(&quot;jdbc:mysql://localhost:3306/test&quot;);</span><br><span class="line">        dataSource.setUser(&quot;root&quot;);</span><br><span class="line">        dataSource.setPassword(&quot;root&quot;);</span><br><span class="line"></span><br><span class="line">        JdbcTemplate jdbcTemplate = new JdbcTemplate();</span><br><span class="line">        //设置数据源对象  知道数据库在哪</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        //执行操作</span><br><span class="line">        int row = jdbcTemplate.update(&quot;insert into account values(?,?)&quot;, &quot;tom&quot;, 5000);</span><br><span class="line">        System.out.println(row);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="04-JdbcTemplate基本使用-spring产生模板对象分析-理解"><a href="#04-JdbcTemplate基本使用-spring产生模板对象分析-理解" class="headerlink" title="04-JdbcTemplate基本使用-spring产生模板对象分析(理解)"></a>04-JdbcTemplate基本使用-spring产生模板对象分析(理解)</h2><p>我们可以将JdbcTemplate的创建权交给Spring，将数据源DataSource的创建权也交给Spring，在Spring容器内部将数据源DataSource注入到JdbcTemplate模版对象中,然后通过Spring容器获得JdbcTemplate对象来执行操作。</p><h2 id="05-JdbcTemplate基本使用-spring产生模板对象代码实现-应用"><a href="#05-JdbcTemplate基本使用-spring产生模板对象代码实现-应用" class="headerlink" title="05-JdbcTemplate基本使用-spring产生模板对象代码实现(应用)"></a>05-JdbcTemplate基本使用-spring产生模板对象代码实现(应用)</h2><p>配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jdbc模板对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="comment">//测试Spring产生jdbcTemplate对象</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException &#123;</span><br><span class="line">       <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">       <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> app.getBean(JdbcTemplate.class);</span><br><span class="line">       <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> jdbcTemplate.update(<span class="string">&quot;insert into account values(?,?)&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">       System.out.println(row);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc-properties）-应用"><a href="#06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc-properties）-应用" class="headerlink" title="06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc.properties）(应用)"></a>06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc.properties）(应用)</h2><p>将数据库的连接信息抽取到外部配置文件中，和spring的配置文件分离开，有利于后期维护</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>配置文件修改为:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载jdbc.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jdbc模板对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="07-JdbcTemplate基本使用-常用操作-更新操作-应用"><a href="#07-JdbcTemplate基本使用-常用操作-更新操作-应用" class="headerlink" title="07-JdbcTemplate基本使用-常用操作-更新操作(应用)"></a>07-JdbcTemplate基本使用-常用操作-更新操作(应用)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateCRUDTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//修改更新</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=? where name=?&quot;</span>,<span class="number">10000</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;delete from account where name=?&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="08-JdbcTemplate基本使用-常用操作-查询操作-应用"><a href="#08-JdbcTemplate基本使用-常用操作-查询操作-应用" class="headerlink" title="08-JdbcTemplate基本使用-常用操作-查询操作(应用)"></a>08-JdbcTemplate基本使用-常用操作-查询操作(应用)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateCRUDTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//聚合查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from account&quot;</span>, Long.class);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//查询一个</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryOne</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> jdbcTemplate.queryForObject(<span class="string">&quot;select * from account where name=?&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Account&gt;(Account.class), <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Account&gt; accountList = jdbcTemplate.query(<span class="string">&quot;select * from account&quot;</span>, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Account&gt;(Account.class));</span><br><span class="line">        System.out.println(accountList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="09-JdbcTemplate基本使用-知识要点-理解，记忆"><a href="#09-JdbcTemplate基本使用-知识要点-理解，记忆" class="headerlink" title="09-JdbcTemplate基本使用-知识要点(理解，记忆)"></a>09-JdbcTemplate基本使用-知识要点(理解，记忆)</h2><p>①导入spring-jdbc和spring-tx坐标</p><p>②创建数据库表和实体</p><p>③创建JdbcTemplate对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> newJdbcTemplate();</span><br><span class="line">       jdbcTemplate.setDataSource(dataSource);</span><br></pre></td></tr></table></figure><p>④执行数据库操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">更新操作：</span><br><span class="line"></span><br><span class="line">    jdbcTemplate.update (sql,params)</span><br><span class="line"></span><br><span class="line">查询操作：</span><br><span class="line"></span><br><span class="line">    jdbcTemplate.query (sql,Mapper,params)</span><br><span class="line"></span><br><span class="line">jdbcTemplate.queryForObject(sql,Mapper,params)</span><br></pre></td></tr></table></figure><h1 id="声明式事务控制"><a href="#声明式事务控制" class="headerlink" title="声明式事务控制"></a>声明式事务控制</h1><h2 id="1-编程式事务控制相关对象"><a href="#1-编程式事务控制相关对象" class="headerlink" title="1. 编程式事务控制相关对象"></a>1. 编程式事务控制相关对象</h2><h3 id="1-1-PlatformTransactionManager-平台事物管理器"><a href="#1-1-PlatformTransactionManager-平台事物管理器" class="headerlink" title="1.1 PlatformTransactionManager (平台事物管理器)"></a>1.1 PlatformTransactionManager (平台事物管理器)</h3><p>PlatformTransactionManager 接口是 spring 的事务管理器，它里面提供了我们常用的操作事务的方法。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>TransactionStatusgetTransaction(TransactionDefination defination)</td><td>获取事物的状态信息</td></tr><tr><td>void commit(TransactionStatus status)</td><td>提交事物</td></tr><tr><td>void rollback(TransactionStatus status)</td><td>回滚事物</td></tr></tbody></table><p>注意：</p><p>PlatformTransactionManager 是接口类型，不同的 Dao 层技术则有不同的实现类，例如：Dao 层技术是jdbc 或 mybatis 时：org.springframework.jdbc.datasource.DataSourceTransactionManager </p><p>Dao 层技术是hibernate时：org.springframework.orm.hibernate5.HibernateTransactionManager</p><h3 id="1-2-TransactionDefinition"><a href="#1-2-TransactionDefinition" class="headerlink" title="1.2 TransactionDefinition"></a>1.2 TransactionDefinition</h3><p>TransactionDefinition 是事务的定义信息对象，里面有如下方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int getIsolationLevel()</td><td>获得事务的隔离级别</td></tr><tr><td>int getPropogationBehavior()</td><td>获得事务的传播行为</td></tr><tr><td>int getTimeout()</td><td>获得超时时间</td></tr><tr><td>boolean isReadOnly()</td><td>是否只读</td></tr></tbody></table><h4 id="1-事务隔离级别"><a href="#1-事务隔离级别" class="headerlink" title="1. 事务隔离级别"></a>1. 事务隔离级别</h4><p>设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读。</p><ul><li>ISOLATION_DEFAULT</li><li>ISOLATION_READ_UNCOMMITTED</li><li>ISOLATION_READ_COMMITTED</li><li>ISOLATION_REPEATABLE_READ</li><li>ISOLATION_SERIALIZABLE</li></ul><h4 id="2-事务传播行为（业务处相互调用是事物的问题）"><a href="#2-事务传播行为（业务处相互调用是事物的问题）" class="headerlink" title="2. 事务传播行为（业务处相互调用是事物的问题）"></a>2. 事务传播行为（业务处相互调用是事物的问题）</h4><ul><li><p><strong>REQUIRED：如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</strong></p></li><li><p><strong>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</strong></p></li><li><p>MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常</p></li><li><p>REQUERS_NEW：新建事务，如果当前在事务中，把当前事务挂起。</p></li><li><p>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</p></li><li><p>NEVER：以非事务方式运行，如果当前存在事务，抛出异常</p></li><li><p>NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行 REQUIRED 类似的操作</p></li><li><p>超时时间：默认值是-1，没有超时限制。如果有，以秒为单位进行设置</p></li><li><p>是否只读：建议查询时设置为只读</p></li></ul><h3 id="1-3-TransactionStatus（事物的状态对象）"><a href="#1-3-TransactionStatus（事物的状态对象）" class="headerlink" title="1.3 TransactionStatus（事物的状态对象）"></a>1.3 TransactionStatus（事物的状态对象）</h3><p>TransactionStatus 接口提供的是事务具体的运行状态，方法介绍如下。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasSavepoint()</td><td>是否存储回滚点</td></tr><tr><td>boolean isCompleted()</td><td>事务是否完成</td></tr><tr><td>boolean isNewTransaction()</td><td>是否是新事务</td></tr><tr><td>boolean isRollbackOnly()</td><td>事务是否回滚</td></tr></tbody></table><h3 id="1-4-知识要点"><a href="#1-4-知识要点" class="headerlink" title="1.4 知识要点"></a>1.4 知识要点</h3><p>编程式事务控制三大对象</p><ul><li>PlatformTransactionManager（用什么平台事物管理器）</li><li>TransactionDefinition（封装事物参数）</li><li>TransactionStatus（别动封装事物状态信息）</li></ul><h2 id="2-基于-XML-的声明式事务控制"><a href="#2-基于-XML-的声明式事务控制" class="headerlink" title="2 基于 XML 的声明式事务控制"></a>2 基于 XML 的声明式事务控制</h2><h3 id="2-1-什么是声明式事务控制"><a href="#2-1-什么是声明式事务控制" class="headerlink" title="2.1 什么是声明式事务控制"></a>2.1 什么是声明式事务控制</h3><p>Spring 的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是指在配置文件中声明，用在 Spring 配置文件中声明式的处理事务来代替代码式的处理事务。</p><p><strong>声明式事务处理的作用</strong></p><ul><li>事务管理不侵入开发的组件。具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可</li><li>在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译，这样维护起来极其方便</li></ul><p><strong>注意：Spring 声明式事务控制底层就是AOP。</strong></p><h3 id="2-2-声明式事务控制的实现"><a href="#2-2-声明式事务控制的实现" class="headerlink" title="2.2 声明式事务控制的实现"></a>2.2 声明式事务控制的实现</h3><p>声明式事务控制明确事项：</p><ul><li>谁是切点？</li><li>谁是通知？</li><li>配置切面？</li></ul><p>①引入tx命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②配置事务增强</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事务增强配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③配置事务 AOP 织入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务的aop增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>④测试事务控制转账业务代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String outMan, String inMan, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">    accountDao.out(outMan,money);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    accountDao.in(inMan,money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-切点方法的事务参数的配置"><a href="#2-3-切点方法的事务参数的配置" class="headerlink" title="2.3 切点方法的事务参数的配置"></a>2.3 切点方法的事务参数的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务增强配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，&lt;tx:method&gt; 代表切点方法的事务参数的配置，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>name：切点方法名称</p></li><li><p>isolation:事务的隔离级别</p></li><li><p>propogation：事务的传播行为</p></li><li><p>timeout：超时时间</p></li><li><p>read-only：是否只读</p></li></ul><h3 id="2-4-知识要点"><a href="#2-4-知识要点" class="headerlink" title="2.4 知识要点"></a>2.4 知识要点</h3><p><strong>声明式事务控制的配置要点</strong></p><ul><li>平台事务管理器配置</li><li>事务通知的配置<ul><li>引用上面配好的平台事物管理器</li><li>每个方法事物可以配置不同的参数</li></ul></li><li>事务aop织入的配置<ul><li>织入使用&lt;aop:advisor</li></ul></li></ul><h2 id="3-基于注解的声明式事务控制"><a href="#3-基于注解的声明式事务控制" class="headerlink" title="3 基于注解的声明式事务控制"></a>3 基于注解的声明式事务控制</h2><h3 id="3-1-使用注解配置声明式事务控制"><a href="#3-1-使用注解配置声明式事务控制" class="headerlink" title="3.1 使用注解配置声明式事务控制"></a>3.1 使用注解配置声明式事务控制</h3><ul><li>编写 AccoutDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">(String outMan, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money-? where name=?&quot;</span>,money,outMan);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">(String inMan, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money+? where name=?&quot;</span>,money,inMan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写 AccoutService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String outMan, String inMan, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        accountDao.out(outMan,money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.in(inMan,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编写 applicationContext.xml 配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!—之前省略datsSource、jdbcTemplate、平台事务管理器的配置--&gt;</span><br><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-注解配置声明式事务控制解析"><a href="#3-2-注解配置声明式事务控制解析" class="headerlink" title="3.2 注解配置声明式事务控制解析"></a>3.2 注解配置声明式事务控制解析</h3><p>①使用 @Transactional 在需要进行事务控制的类或是方法上修饰，注解可用的属性同 xml 配置方式，例如隔离级别、传播行为等。</p><p>②注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置。</p><p>③使用在方法上，不同的方法可以采用不同的事务参数配置。</p><p>④Xml配置文件中要开启事务的注解驱动&lt;tx:annotation-driven &#x2F;&gt;</p><h3 id="3-3-知识要点"><a href="#3-3-知识要点" class="headerlink" title="3.3 知识要点"></a>3.3 知识要点</h3><p><strong>注解声明式事务控制的配置要点</strong></p><ul><li><p>平台事务管理器配置（xml方式）</p></li><li><p>事务通知的配置（@Transactional注解配置）</p></li><li><p>事务注解驱动的配置 &lt;tx:annotation-driven&#x2F;&gt;</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JdbcTemplate基本使用&quot;&gt;&lt;a href=&quot;#JdbcTemplate基本使用&quot; class=&quot;headerlink&quot; title=&quot;JdbcTemplate基本使用&quot;&gt;&lt;/a&gt;JdbcTemplate基本使用&lt;/h1&gt;&lt;h2 id=&quot;01-JdbcTe</summary>
      
    
    
    
    
    <category term="Java-Spring" scheme="http://example.com/tags/Java-Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-aop</title>
    <link href="http://example.com/2022/05/07/Spring-aop/"/>
    <id>http://example.com/2022/05/07/Spring-aop/</id>
    <published>2022-05-07T02:51:45.000Z</published>
    <updated>2022-05-07T15:52:15.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-的-AOP-简介"><a href="#1-Spring-的-AOP-简介" class="headerlink" title="1.Spring 的 AOP 简介"></a>1.Spring 的 AOP 简介</h2><h3 id="1-1-什么是-AOP"><a href="#1-1-什么是-AOP" class="headerlink" title="1.1 什么是 AOP"></a>1.1 什么是 AOP</h3><p>AOP 为 Aspect Oriented Programming 的缩写，意思为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p><p>AOP 是 OOP 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h3 id="1-2-AOP-的作用及其优势"><a href="#1-2-AOP-的作用及其优势" class="headerlink" title="1.2 AOP 的作用及其优势"></a>1.2 AOP 的作用及其优势</h3><p>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强</p><p>优势：减少重复代码，提高开发效率，并且便于维护</p><h3 id="1-3-AOP-的底层实现"><a href="#1-3-AOP-的底层实现" class="headerlink" title="1.3 AOP 的底层实现"></a>1.3 AOP 的底层实现</h3><p>实际上，AOP 的底层是通过 Spring 提供的的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p><h3 id="1-4-AOP-的动态代理技术"><a href="#1-4-AOP-的动态代理技术" class="headerlink" title="1.4 AOP 的动态代理技术"></a>1.4 AOP 的动态代理技术</h3><p>常用的动态代理技术</p><p>JDK 代理 : 基于接口的动态代理技术</p><p>cglib 代理：基于父类的动态代理技术</p><h3 id="1-5-JDK-的动态代理"><a href="#1-5-JDK-的动态代理" class="headerlink" title="1.5 JDK 的动态代理"></a>1.5 JDK 的动态代理</h3><p>①目标类接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③动态代理代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>(); <span class="comment">//创建目标对象</span></span><br><span class="line"><span class="comment">//创建代理对象</span></span><br><span class="line"><span class="type">TargetInterface</span> <span class="variable">proxy</span> <span class="operator">=</span> (TargetInterface) Proxy.newProxyInstance(target.getClass()</span><br><span class="line">.getClassLoader(),target.getClass().getInterfaces(),<span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span><br><span class="line">            <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;前置增强代码...&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;后置增强代码...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>④  调用代理对象的方法测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 测试,当调用接口的任何方法时，代理对象的代码都无序修改</span><br><span class="line">proxy.method();</span><br></pre></td></tr></table></figure><h3 id="1-6-cglib-的动态代理"><a href="#1-6-cglib-的动态代理" class="headerlink" title="1.6 cglib 的动态代理"></a>1.6 cglib 的动态代理</h3><p>导入cglib对应的jar包</p><p>导入spring-context坐标 里面有cglib</p><p>①目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②动态代理代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>(); <span class="comment">//创建目标对象</span></span><br><span class="line"><span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();   <span class="comment">//创建增强器</span></span><br><span class="line">enhancer.setSuperclass(Target.class); <span class="comment">//设置父类</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123; <span class="comment">//设置回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, </span></span><br><span class="line"><span class="params">    MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强....&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(target, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;后置代码增强....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">Target</span> <span class="variable">proxy</span> <span class="operator">=</span> (Target) enhancer.create(); <span class="comment">//创建代理对象</span></span><br></pre></td></tr></table></figure><p>③调用代理对象的方法测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//测试,当调用接口的任何方法时，代理对象的代码都无序修改</span><br><span class="line">proxy.method();</span><br></pre></td></tr></table></figure><h3 id="1-7-AOP-相关概念"><a href="#1-7-AOP-相关概念" class="headerlink" title="1.7 AOP 相关概念"></a>1.7 AOP 相关概念</h3><p>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</p><p>在正式讲解 AOP 的操作之前，我们必须理解 AOP 的相关术语，常用的术语如下：</p><ul><li>Target（目标对象）：代理的目标对象</li><li>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</li><li>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点<strong>（可以被增强的方法）</strong></li><li>Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义<strong>（被增强的方法）</strong></li><li>Advice（通知&#x2F; 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知</li><li>Aspect（切面）：是切入点和通知（引介）的结合<strong>（目标方法加增强）</strong> </li><li>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入<strong>（切点和通知结合的过程）</strong></li></ul><h3 id="1-8-AOP-开发明确的事项"><a href="#1-8-AOP-开发明确的事项" class="headerlink" title="1.8 AOP 开发明确的事项"></a>1.8 AOP 开发明确的事项</h3><h5 id="1-需要编写的内容"><a href="#1-需要编写的内容" class="headerlink" title="1)需要编写的内容"></a>1)需要编写的内容</h5><ul><li>编写核心业务代码（目标类的目标方法）</li><li>编写切面类，切面类中有通知(增强功能方法)</li><li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li></ul><h5 id="2）AOP-技术实现的内容"><a href="#2）AOP-技术实现的内容" class="headerlink" title="2）AOP 技术实现的内容"></a>2）AOP 技术实现的内容</h5><p>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p><h5 id="3）AOP-底层使用哪种代理方式"><a href="#3）AOP-底层使用哪种代理方式" class="headerlink" title="3）AOP 底层使用哪种代理方式"></a>3）AOP 底层使用哪种代理方式</h5><p>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p><h3 id="1-9-知识要点"><a href="#1-9-知识要点" class="headerlink" title="1.9 知识要点"></a>1.9 知识要点</h3><ul><li>aop：面向切面编程</li><li>aop底层实现：基于JDK的动态代理 和 基于Cglib的动态代理</li><li>aop的重点概念：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Pointcut（切入点）：被增强的方法</span><br><span class="line"></span><br><span class="line">Advice（通知/ 增强）：封装增强业务逻辑的方法</span><br><span class="line"></span><br><span class="line">Aspect（切面）：切点+通知</span><br><span class="line"></span><br><span class="line">Weaving（织入）：将切点与通知结合的过程</span><br></pre></td></tr></table></figure><ul><li>开发明确事项：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">谁是切点（切点表达式配置）</span><br><span class="line"></span><br><span class="line">谁是通知（切面类中的增强方法）</span><br><span class="line"></span><br><span class="line">将切点和通知进行织入配置</span><br></pre></td></tr></table></figure><h2 id="2-基于-XML-的-AOP-开发"><a href="#2-基于-XML-的-AOP-开发" class="headerlink" title="2. 基于 XML 的 AOP 开发"></a>2. 基于 XML 的 AOP 开发</h2><h3 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h3><p>①导入 AOP 相关坐标</p><p>②创建目标接口和目标类（内部有切点）</p><p>③创建切面类（内部有增强方法）</p><p>④将目标类和切面类的对象创建权交给 spring</p><p>⑤在 applicationContext.xml 中配置织入关系</p><p>⑥测试代码</p><p>①导入 AOP 相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aspectj的织入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②创建目标接口和目标类（内部有切点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③创建切面类（内部有增强方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④将目标类和切面类的对象创建权交给 spring</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置目标类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.Target&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑤在 applicationContext.xml 中配置织入关系</p><p>导入aop命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑤在 applicationContext.xml 中配置织入关系</p><p>配置切点表达式和前置增强的织入关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用myAspect的Bean为切面对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置Target的method方法执行时要进行myAspect的before方法前置增强--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.itheima.aop.Target.method())&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑥测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        target.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-XML-配置-AOP-详解"><a href="#2-2-XML-配置-AOP-详解" class="headerlink" title="2.2 XML 配置 AOP 详解"></a>2.2 XML 配置 AOP 详解</h3><h4 id="1-切点表达式的写法"><a href="#1-切点表达式的写法" class="headerlink" title="1) 切点表达式的写法"></a>1) 切点表达式的写法</h4><p>表达式语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></figure><ul><li>访问修饰符可以省略</li><li>返回值类型、包名、类名、方法名可以使用星号*  代表任意</li><li>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</li><li>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</li></ul><p>例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execution(public void com.itheima.aop.Target.method())</span><br><span class="line">execution(void com.itheima.aop.Target.*(..))</span><br><span class="line">execution(* com.itheima.aop.*.*(..))</span><br><span class="line">execution(* com.itheima.aop..*.*(..))</span><br><span class="line">execution(* *..*.*(..))</span><br></pre></td></tr></table></figure><h4 id="2-通知的类型"><a href="#2-通知的类型" class="headerlink" title="2) 通知的类型"></a>2) 通知的类型</h4><p>通知的配置语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:通知类型 method=“切面类中方法名” pointcut=“切点表达式&quot;&gt;&lt;/aop:通知类型&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>前置通知</td><td>&lt;aop:before&gt;</td><td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td></tr><tr><td>后置通知</td><td>&lt;aop:after-returning&gt;</td><td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td></tr><tr><td>环绕通知</td><td>&lt;aop:around&gt;</td><td>用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行</td></tr><tr><td>异常抛出通知</td><td>&lt;aop:throwing&gt;</td><td>用于配置异常抛出通知。指定增强的方法在出现异常时执行</td></tr><tr><td>最终通知</td><td>&lt;aop:after&gt;</td><td>用于配置最终通知。无论增强方式执行是否有异常都会执行</td></tr></tbody></table><h4 id="切点表达式的抽取"><a href="#切点表达式的抽取" class="headerlink" title="切点表达式的抽取"></a>切点表达式的抽取</h4><p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替 pointcut 属性来引用抽取后的切点表达式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用myAspect的Bean为切面对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.aop.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-知识要点"><a href="#2-3-知识要点" class="headerlink" title="2.3 知识要点"></a>2.3 知识要点</h3><ul><li>aop织入的配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">“切面类”</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">“通知方法名称”</span> <span class="attr">pointcut</span>=<span class="string">“切点表达式</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通知的类型：前置通知、后置通知、环绕通知、异常抛出通知、最终通知</li><li>切点表达式的写法：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></figure><h3 id="3-基于注解的-AOP-开发"><a href="#3-基于注解的-AOP-开发" class="headerlink" title="3.基于注解的 AOP 开发"></a>3.基于注解的 AOP 开发</h3><h4 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1 快速入门"></a>3.1 快速入门</h4><p>基于注解的aop开发步骤：</p><p>①创建目标接口和目标类（内部有切点）</p><p>②创建切面类（内部有增强方法）</p><p>③将目标类和切面类的对象创建权交给 spring</p><p>④在切面类中使用注解配置织入关系</p><p>⑤在配置文件中开启组件扫描和 AOP 的自动代理</p><p>⑥测试</p><p>①创建目标接口和目标类（内部有切点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②创建切面类（内部有增强方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③将目标类和切面类的对象创建权交给 spring</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Target</span> <span class="keyword">implements</span> <span class="title class_">TargetInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④在切面类中使用注解配置织入关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤在配置文件中开启组件扫描和 AOP 的自动代理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.aop&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop的自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑥测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        target.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-注解配置-AOP-详解"><a href="#3-2-注解配置-AOP-详解" class="headerlink" title="3.2 注解配置 AOP 详解"></a>3.2 注解配置 AOP 详解</h4><p><strong>注解通知的类型</strong></p><p>通知的配置语法：@通知注解(“切点表达式”)</p><p><strong>切点表达式的抽取</strong></p><p>同 xml配置<br>aop 一样，我们可以将切点表达式抽取。抽取方式是在切面内定义方法，在该方法上使用@Pointcut注解定义切点表达式，然后在在增强注解中进行引用。具体如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@@Component(&quot;myAspect&quot;)</span><br><span class="line">@Aspect</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line">    @Before(&quot;MyAspect.myPoint()&quot;)</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;前置代码增强.....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Pointcut(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span><br><span class="line">    public void myPoint()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-知识要点"><a href="#3-3-知识要点" class="headerlink" title="3.3 知识要点"></a>3.3 知识要点</h3><ul><li>注解aop开发步骤</li></ul><p>①使用@Aspect标注切面类</p><p>②使用@通知注解标注通知方法</p><p>③在配置文件中配置aop自动代理<a href="aop:aspectj-autoproxy/">aop:aspectj-autoproxy/</a></p><ul><li>通知注解类型</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Spring-的-AOP-简介&quot;&gt;&lt;a href=&quot;#1-Spring-的-AOP-简介&quot; class=&quot;headerlink&quot; title=&quot;1.Spring 的 AOP 简介&quot;&gt;&lt;/a&gt;1.Spring 的 AOP 简介&lt;/h2&gt;&lt;h3 id=&quot;1-1-什</summary>
      
    
    
    
    
    <category term="Java-Spring" scheme="http://example.com/tags/Java-Spring/"/>
    
  </entry>
  
  <entry>
    <title>MQTT1-8ESP8266订阅MQTT主题</title>
    <link href="http://example.com/2022/05/04/MQTT1-8ESP8266%E8%AE%A2%E9%98%85MQTT%E4%B8%BB%E9%A2%98/"/>
    <id>http://example.com/2022/05/04/MQTT1-8ESP8266%E8%AE%A2%E9%98%85MQTT%E4%B8%BB%E9%A2%98/</id>
    <published>2022-05-04T07:56:49.000Z</published>
    <updated>2022-05-04T07:57:36.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="订阅单个主题"><a href="#订阅单个主题" class="headerlink" title="订阅单个主题"></a>订阅单个主题</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;订阅单个主题&quot;&gt;&lt;a href=&quot;#订阅单个主题&quot; class=&quot;headerlink&quot; title=&quot;订阅单个主题&quot;&gt;&lt;/a&gt;订阅单个主题&lt;/h2&gt;</summary>
      
    
    
    
    
    <category term="物联网" scheme="http://example.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解开发</title>
    <link href="http://example.com/2022/05/04/Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
    <id>http://example.com/2022/05/04/Spring%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</id>
    <published>2022-05-04T00:59:40.000Z</published>
    <updated>2022-05-04T05:03:55.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring配置数据源"><a href="#1-Spring配置数据源" class="headerlink" title="1.Spring配置数据源"></a>1.Spring配置数据源</h2><h3 id="1-1-数据源（连接池）的作用"><a href="#1-1-数据源（连接池）的作用" class="headerlink" title="1.1 数据源（连接池）的作用"></a>1.1 数据源（连接池）的作用</h3><p>数据源(连接池)是提高程序性能如出现的</p><p>事先实例化数据源，初始化部分连接资源</p><p>使用连接资源时从数据源中获取</p><p>使用完毕后将连接资源归还给数据源</p><p>常见的数据源(连接池)：DBCP、C3P0、BoneCP、Druid等</p><h5 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h5><p>①导入数据源的坐标和数据库驱动坐标</p><p>②创建数据源对象</p><p>③设置数据源的基本连接数据</p><p>④使用数据源获取连接资源和归还连接资源</p><h3 id="1-2-数据源的手动创建"><a href="#1-2-数据源的手动创建" class="headerlink" title="1.2 数据源的手动创建"></a>1.2 数据源的手动创建</h3><p>①导入c3p0和druid的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- C3P0连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Druid连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>①导入mysql数据库驱动坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②创建C3P0连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//创建数据源</span></span><br><span class="line"><span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line"><span class="comment">//设置数据库连接参数</span></span><br><span class="line">    dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);                                  dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">    dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="comment">//获得连接对象</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②创建Druid连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//创建数据源</span></span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    <span class="comment">//设置数据库连接参数</span></span><br><span class="line">    dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); </span><br><span class="line">    dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);   </span><br><span class="line">    dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="comment">//获得连接对象</span></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();    </span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③提取jdbc.properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>④读取jdbc.properties配置文件创建连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0ByProperties</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//加载类路径下的jdbc.properties</span></span><br><span class="line">    <span class="type">ResourceBundle</span> <span class="variable">rb</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(); </span><br><span class="line">    dataSource.setDriverClass(rb.getString(<span class="string">&quot;jdbc.driver&quot;</span>));   </span><br><span class="line">    dataSource.setJdbcUrl(rb.getString(<span class="string">&quot;jdbc.url&quot;</span>)); </span><br><span class="line">    dataSource.setUser(rb.getString(<span class="string">&quot;jdbc.username&quot;</span>)); </span><br><span class="line">    dataSource.setPassword(rb.getString(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();   </span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-Spring配置数据源"><a href="#1-3-Spring配置数据源" class="headerlink" title="1.3 Spring配置数据源"></a>1.3 Spring配置数据源</h3><p>可以将DataSource的创建权交由Spring容器去完成</p><p>DataSource有无参构造方法，而Spring默认就是通过无参构造方法实例化对象的</p><p>DataSource要想使用需要通过set方法设置数据库连接信息，而Spring可以通过set方法进行字符串注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试从容器当中获取数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">           <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">               <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) </span><br><span class="line">applicationContext.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br></pre></td></tr></table></figure><h3 id="1-4-抽取jdbc配置文件"><a href="#1-4-抽取jdbc配置文件" class="headerlink" title="1.4 抽取jdbc配置文件"></a>1.4 抽取jdbc配置文件</h3><p>applicationContext.xml加载jdbc.properties配置文件获得连接信息。</p><p>首先，需要引入context命名空间和约束路径：</p><p>命名空间：xmlns:context&#x3D;”<a href="http://www.springframework.org/schema/context&quot;">http://www.springframework.org/schema/context&quot;</a></p><p>约束路径：<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a><br>​                       </p><p>​                   <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-知识要点"><a href="#1-5-知识要点" class="headerlink" title="1.5 知识要点"></a>1.5 知识要点</h3><p>Spring容器加载properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;xx.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;key&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Spring注解开发"><a href="#2-Spring注解开发" class="headerlink" title="2. Spring注解开发"></a>2. Spring注解开发</h2><h3 id="2-1-Spring原始注解"><a href="#2-1-Spring原始注解" class="headerlink" title="2.1 Spring原始注解"></a>2.1 Spring原始注解</h3><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。 </p><p>Spring原始注解主要是替代&lt;Bean&gt;的配置</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Controller</td><td>使用在web层类上用于实例化Bean</td></tr><tr><td>@Service</td><td>使用在service层类上用于实例化Bean</td></tr><tr><td>@Repository</td><td>使用在dao层类上用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Resource</td><td>相当于@Autowired+@Qualifier，按照名称进行注入</td></tr><tr><td>@Value</td><td>注入普通属性</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestroy</td><td>使用在方法上标注该方法是Bean的销毁方法</td></tr></tbody></table><p>注意：</p><p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--注解的组件扫描--&gt;</span><br><span class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure><p>使用@Compont或@Repository标识UserDaoImpl需要Spring进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;save running... ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Compont或@Service标识UserServiceImpl需要Spring进行实例化</p><p>使用@Autowired或者@Autowired+@Qulifier或者@Resource进行userDao的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component(&quot;userService&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">/*@Autowired</span></span><br><span class="line"><span class="comment">    @Qualifier(&quot;userDao&quot;)*/</span></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;       </span><br><span class="line">     userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Value进行字符串的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;注入普通数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(driver);</span><br><span class="line">        System.out.println(<span class="string">&quot;save running... ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Scope标注Bean的范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">   <span class="comment">//此处省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;初始化方法....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;销毁方法.....&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Spring新注解"><a href="#2-2-Spring新注解" class="headerlink" title="2.2 Spring新注解"></a>2.2 Spring新注解</h3><p>使用上面的注解还不能全部替代xml配置文件，还需要使用注解替代的配置如下：</p><p>非自定义的Bean的配置：&lt;bean&gt;</p><p>加载properties文件的配置：&lt;context:property-placeholder&gt;</p><p>组件扫描的配置：&lt;context:component-scan&gt;</p><p>引入其他文件：&lt;import&gt;</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个 Spring   配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 Spring   在初始化容器时要扫描的包。   作用和在 Spring   的 xml 配置文件中的   &lt;context:component-scan   base-package&#x3D;”com.itheima”&#x2F;&gt;一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到   Spring   容器中</td></tr><tr><td>@PropertySource</td><td>用于加载.properties   文件中的配置</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table><p>@Configuration</p><p>@ComponentScan</p><p>@Import</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfiguration</span> &#123;</span><br><span class="line">  <span class="comment">//主配置文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@PropertySource</p><p>@value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><p>@Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(name=&quot;dataSource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException &#123; </span><br><span class="line">    <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(); </span><br><span class="line">    dataSource.setDriverClass(driver);</span><br><span class="line">    dataSource.setJdbcUrl(url);</span><br><span class="line">    dataSource.setUser(username);</span><br><span class="line">    dataSource.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>测试加载核心配置类创建Spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAnnoConfiguration</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">          <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfiguration.class);    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService)    </span><br><span class="line">    applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.save();</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) </span><br><span class="line">    applicationContext.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection(); </span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-Spring整合Junit"><a href="#3-Spring整合Junit" class="headerlink" title="3. Spring整合Junit"></a>3. Spring整合Junit</h2><h3 id="3-1-原始Junit测试Spring的问题"><a href="#3-1-原始Junit测试Spring的问题" class="headerlink" title="3.1 原始Junit测试Spring的问题"></a>3.1 原始Junit测试Spring的问题</h3><p>在测试类中，每个测试方法都有以下两行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"><span class="type">IAccountService</span> <span class="variable">as</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br></pre></td></tr></table></figure><p>这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常。所以又不能轻易删掉。</p><h3 id="3-2-上述问题解决思路"><a href="#3-2-上述问题解决思路" class="headerlink" title="3.2 上述问题解决思路"></a>3.2 上述问题解决思路</h3><p>让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它</p><p>将需要进行测试Bean直接在测试类中进行注入</p><h3 id="3-3-Spring集成Junit步骤"><a href="#3-3-Spring集成Junit步骤" class="headerlink" title="3.3 Spring集成Junit步骤"></a>3.3 Spring集成Junit步骤</h3><p>①导入spring集成Junit的坐标</p><p>②使用@Runwith注解替换原来的运行期</p><p>③使用@ContextConfiguration指定配置文件或配置类</p><p>④使用@Autowired注入需要测试的对象</p><p>⑤创建测试方法进行测试</p><h3 id="3-4-Spring集成Junit代码实现"><a href="#3-4-Spring集成Junit代码实现" class="headerlink" title="3.4 Spring集成Junit代码实现"></a>3.4 Spring集成Junit代码实现</h3><p>①导入spring集成Junit的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处需要注意的是，spring5 及以上版本要求 junit 的版本必须是 4.12 及以上--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②使用@Runwith注解替换原来的运行期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span><span class="comment">//提供Spring内核去跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③使用@ContextConfiguration指定配置文件或配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//加载spring核心配置文件</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(value = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br><span class="line"><span class="comment">//加载spring核心配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④使用@Autowired注入需要测试的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤创建测试方法进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJunitTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserService</span><span class="params">()</span>&#123;</span><br><span class="line">    userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring集成Junit步骤</p><p>①导入spring集成Junit的坐标</p><p>②使用@Runwith注解替换原来的运行期</p><p>③使用@ContextConfiguration指定配置文件或配置类</p><p>④使用@Autowired注入需要测试的对象</p><p>⑤创建测试方法进行测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Spring配置数据源&quot;&gt;&lt;a href=&quot;#1-Spring配置数据源&quot; class=&quot;headerlink&quot; title=&quot;1.Spring配置数据源&quot;&gt;&lt;/a&gt;1.Spring配置数据源&lt;/h2&gt;&lt;h3 id=&quot;1-1-数据源（连接池）的作用&quot;&gt;&lt;a h</summary>
      
    
    
    
    
    <category term="Java-Spring" scheme="http://example.com/tags/Java-Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring简介和配置</title>
    <link href="http://example.com/2022/05/03/Spring%E7%AE%80%E4%BB%8B%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/05/03/Spring%E7%AE%80%E4%BB%8B%E5%92%8C%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-03T01:14:29.000Z</published>
    <updated>2022-05-04T08:19:54.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-spring概述"><a href="#1-spring概述" class="headerlink" title="1. spring概述"></a>1. spring概述</h2><h3 id="1-1-Spring是什么（理解）"><a href="#1-1-Spring是什么（理解）" class="headerlink" title="1.1 Spring是什么（理解）"></a>1.1 Spring是什么（理解）</h3><p>Spring是分层的 Java SE&#x2F;EE应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核。</p><p>提供了展现层 SpringMVC和持久层 Spring JDBCTemplate以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架</p><h3 id="1-2-Spring发展历程-（了解）"><a href="#1-2-Spring发展历程-（了解）" class="headerlink" title="1.2 Spring发展历程 （了解）"></a>1.2 Spring发展历程 （了解）</h3><h3 id="1-3-Spring的优势（理解）"><a href="#1-3-Spring的优势（理解）" class="headerlink" title="1.3 Spring的优势（理解）"></a>1.3 Spring的优势（理解）</h3><p>方便解耦，简化开发</p><p>AOP 编程的支持</p><p>声明式事务的支持</p><p>方便程序的测试</p><h3 id="1-4-Spring的体系结构（了解）"><a href="#1-4-Spring的体系结构（了解）" class="headerlink" title="1.4 Spring的体系结构（了解）"></a>1.4 Spring的体系结构（了解）</h3><h2 id="2-spring快速入门"><a href="#2-spring快速入门" class="headerlink" title="2. spring快速入门"></a>2. spring快速入门</h2><h3 id="2-1-Spring程序开发步骤"><a href="#2-1-Spring程序开发步骤" class="headerlink" title="2.1 Spring程序开发步骤"></a>2.1 Spring程序开发步骤</h3><ol><li>导入 Spring 开发的基本包坐标</li><li>编写 Dao 接口和实现类</li><li>创建 Spring 核心配置文件</li><li>在 Spring 配置文件中配置 UserDaoImpl</li><li>使用 Spring 的 API 获得 Bean 实例</li></ol><h3 id="2-2-导入Spring开发的基本包坐标"><a href="#2-2-导入Spring开发的基本包坐标" class="headerlink" title="2.2 导入Spring开发的基本包坐标"></a>2.2 导入Spring开发的基本包坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖core、beans、expression--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-编写Dao接口和实现类"><a href="#2-3-编写Dao接口和实现类" class="headerlink" title="2.3 编写Dao接口和实现类"></a>2.3 编写Dao接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-创建Spring核心配置文件"><a href="#2-4-创建Spring核心配置文件" class="headerlink" title="2.4 创建Spring核心配置文件"></a>2.4 创建Spring核心配置文件</h3><p>在类路径下（resources）创建applicationContext.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>                <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans                   http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-在Spring配置文件中配置UserDaoImpl"><a href="#2-5-在Spring配置文件中配置UserDaoImpl" class="headerlink" title="2.5 在Spring配置文件中配置UserDaoImpl"></a>2.5 在Spring配置文件中配置UserDaoImpl</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>                <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans                   http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-使用Spring的API获得Bean实例"><a href="#2-6-使用Spring的API获得Bean实例" class="headerlink" title="2.6 使用Spring的API获得Bean实例"></a>2.6 使用Spring的API获得Bean实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span>  </span><br><span class="line">             <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">             <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);    userDao.save();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="3-Spring配置文件"><a href="#3-Spring配置文件" class="headerlink" title="3. Spring配置文件"></a>3. Spring配置文件</h2><h3 id="3-1-Bean标签基本配置"><a href="#3-1-Bean标签基本配置" class="headerlink" title="3.1 Bean标签基本配置"></a>3.1 Bean标签基本配置</h3><p>用于配置对象交由Spring 来创建。</p><p>默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功。</p><p>基本属性：</p><p>id：Bean实例在Spring容器中的唯一标识</p><p>class：Bean的全限定名称</p><h3 id="3-2-Bean标签范围配置"><a href="#3-2-Bean标签范围配置" class="headerlink" title="3.2 Bean标签范围配置"></a>3.2 Bean标签范围配置</h3><p>scope:指对象的作用范围，取值如下： </p><table><thead><tr><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td>Singleton</td><td>默认值，单例的</td></tr><tr><td>prototype</td><td>多例的</td></tr><tr><td>request</td><td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   request   域中</td></tr><tr><td>session</td><td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   session   域中</td></tr><tr><td>global   session</td><td>WEB   项目中，应用在   Portlet   环境，如果没有   Portlet   环境那么globalSession   相当于   session</td></tr></tbody></table><p>1）当scope的取值为singleton时</p><p>​      Bean的实例化个数：1个</p><p>​      Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p><p>​      Bean的生命周期：</p><p>对象创建：当应用加载，创建容器时，对象就被创建了</p><p>对象运行：只要容器在，对象一直活着</p><p>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p><p>2）当scope的取值为prototype时</p><p>​      Bean的实例化个数：多个</p><p>​      Bean的实例化时机：当调用getBean()方法时实例化Bean</p><p>对象创建：当使用对象时，创建新的对象实例</p><p>对象运行：只要对象在使用中，就一直活着</p><p>对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p><h3 id="3-3-Bean生命周期配置"><a href="#3-3-Bean生命周期配置" class="headerlink" title="3.3 Bean生命周期配置"></a>3.3 Bean生命周期配置</h3><p>init-method：指定类中的初始化方法名称</p><p>destroy-method：指定类中销毁方法名称</p><h3 id="3-4-Bean实例化三种方式"><a href="#3-4-Bean实例化三种方式" class="headerlink" title="3.4 Bean实例化三种方式"></a>3.4 Bean实例化三种方式</h3><p>1） 使用无参构造方法实例化</p><p>​      它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>2） 工厂静态方法实例化</p><p>​      工厂的静态方法返回Bean实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFactoryBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title function_">createUserDao</span><span class="params">()</span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactoryBean&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>3） 工厂实例方法实例化</p><p>​      工厂的非静态方法返回Bean实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicFactoryBean</span> &#123;  </span><br><span class="line"><span class="keyword">public</span> UserDao <span class="title function_">createUserDao</span><span class="params">()</span>&#123;        </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.DynamicFactoryBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-Bean的依赖注入入门"><a href="#3-5-Bean的依赖注入入门" class="headerlink" title="3.5 Bean的依赖注入入门"></a>3.5 Bean的依赖注入入门</h3><p>①创建 UserService，UserService 内部在调用 UserDao的save() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">                 <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);                  <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">          userDao.save();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>②将 UserServiceImpl 的创建权交给 Spring</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>③从 Spring 容器中获得 UserService 进行操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(&quot;userService&quot;);</span><br><span class="line">userService.save();</span><br></pre></td></tr></table></figure><h3 id="3-6-Bean的依赖注入概念"><a href="#3-6-Bean的依赖注入概念" class="headerlink" title="3.6 Bean的依赖注入概念"></a>3.6 Bean的依赖注入概念</h3><p>依赖注入（Dependency Injection）：它是 Spring 框架核心 IOC 的具体实现。</p><p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。</p><p>IOC 解耦只是降低他们的依赖关系，但不会消除。例如：业务层仍会调用持久层的方法。</p><p>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。</p><p>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取</p><h3 id="3-7-Bean的依赖注入方式"><a href="#3-7-Bean的依赖注入方式" class="headerlink" title="3.7 Bean的依赖注入方式"></a>3.7 Bean的依赖注入方式</h3><p>①构造方法</p><p>​    创建有参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">                 <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);       <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);    </span><br><span class="line">          userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>​    配置Spring容器调用有参构造时进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span>         <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②set方法</p><p>​    在UserServiceImpl中添加setUserDao方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;  </span><br><span class="line">        &#125; </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;      </span><br><span class="line">    userDao.save();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    配置Spring容器调用set方法进行注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>set方法:P命名空间注入</p><p>​      P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下：</p><p>​      首先，需要引入P命名空间：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure><p>其次，需要修改注入方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao-</span></span></span><br><span class="line"><span class="tag"> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-8-Bean的依赖注入的数据类型"><a href="#3-8-Bean的依赖注入的数据类型" class="headerlink" title="3.8 Bean的依赖注入的数据类型"></a>3.8 Bean的依赖注入的数据类型</h3><p>上面的操作，都是注入的引用Bean，除了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入。</p><p>注入数据的三种数据类型 </p><p>普通数据类型</p><p>引用数据类型</p><p>集合数据类型</p><p>其中引用数据类型，此处就不再赘述了，之前的操作都是对UserDao对象的引用进行注入的，下面将以set方法注入为例，演示普通数据类型和集合数据类型的注入。</p><p><strong>Bean的依赖注入的数据类型</strong></p><p>（1）普通数据类型的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String company;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(String company)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(company+<span class="string">&quot;===&quot;</span>+age);</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;company&quot;</span> <span class="attr">value</span>=<span class="string">&quot;传智播客&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）集合数据类型（List&lt;String&gt;）的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrList</span><span class="params">(List&lt;String&gt; strList)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.strList = strList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(strList);</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）集合数据类型（List&lt;User&gt;）的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.userList = userList;  </span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(userList);</span><br><span class="line">System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;u1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;u2&quot;</span>/&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）集合数据类型（ Map&lt;String,User&gt; ）的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; userMap;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userMap = userMap;</span><br><span class="line">    &#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;      </span><br><span class="line">System.out.println(userMap);</span><br><span class="line">System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（5）集合数据类型（Properties）的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(properties);</span><br><span class="line">System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-9-引入其他配置文件（分模块开发）"><a href="#3-9-引入其他配置文件（分模块开发）" class="headerlink" title="3.9 引入其他配置文件（分模块开发）"></a>3.9 引入其他配置文件（分模块开发）</h3><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-xxx.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean&gt;标签</span><br><span class="line">id属性:在容器中Bean实例的唯一标识，不允许重复</span><br><span class="line">    class属性:要实例化的Bean的全限定名</span><br><span class="line">    scope属性:Bean的作用范围，常用是Singleton(默认)和prototype</span><br><span class="line">    &lt;property&gt;标签：属性注入</span><br><span class="line">        name属性：属性名称</span><br><span class="line">        value属性：注入的普通属性值</span><br><span class="line">        ref属性：注入的对象引用值</span><br><span class="line">        &lt;list&gt;标签</span><br><span class="line">        &lt;map&gt;标签</span><br><span class="line">        &lt;properties&gt;标签</span><br><span class="line">    &lt;constructor-arg&gt;标签</span><br><span class="line">&lt;import&gt;标签:导入其他的Spring的分文件</span><br></pre></td></tr></table></figure><h2 id="4-spring相关API"><a href="#4-spring相关API" class="headerlink" title="4. spring相关API"></a>4. spring相关API</h2><h3 id="4-1-ApplicationContext的继承体系"><a href="#4-1-ApplicationContext的继承体系" class="headerlink" title="4.1 ApplicationContext的继承体系"></a>4.1 ApplicationContext的继承体系</h3><p>applicationContext：接口类型，代表应用上下文，可以通过其实例获得 Spring 容器中的 Bean 对象</p><h3 id="4-2-ApplicationContext的实现类"><a href="#4-2-ApplicationContext的实现类" class="headerlink" title="4.2 ApplicationContext的实现类"></a>4.2 ApplicationContext的实现类</h3><p>1）ClassPathXmlApplicationContext </p><p>​      它是从类的根路径下加载配置文件 推荐使用这种</p><p>2）FileSystemXmlApplicationContext </p><p>​      它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p><p>3）AnnotationConfigApplicationContext</p><p>​      当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。</p><h3 id="4-3-getBean-方法使用"><a href="#4-3-getBean-方法使用" class="headerlink" title="4.3 getBean()方法使用"></a>4.3 getBean()方法使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException &#123;  </span><br><span class="line">assertBeanFactoryActive();   </span><br><span class="line"><span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException &#123;       assertBeanFactoryActive();</span><br><span class="line"><span class="keyword">return</span> getBeanFactory().getBean(requiredType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。</p><p>当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错</p><p><strong>getBean()方法使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> </span><br><span class="line">            <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">  <span class="type">UserService</span> <span class="variable">userService1</span> <span class="operator">=</span> (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">  <span class="type">UserService</span> <span class="variable">userService2</span> <span class="operator">=</span> applicationContext.getBean(UserService.class);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-spring概述&quot;&gt;&lt;a href=&quot;#1-spring概述&quot; class=&quot;headerlink&quot; title=&quot;1. spring概述&quot;&gt;&lt;/a&gt;1. spring概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-Spring是什么（理解）&quot;&gt;&lt;a href=&quot;#1-</summary>
      
    
    
    
    
    <category term="Java-Spring" scheme="http://example.com/tags/Java-Spring/"/>
    
  </entry>
  
  <entry>
    <title>MQTT1-7主题进阶</title>
    <link href="http://example.com/2022/05/01/MQTT1-7%E4%B8%BB%E9%A2%98%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2022/05/01/MQTT1-7%E4%B8%BB%E9%A2%98%E8%BF%9B%E9%98%B6/</id>
    <published>2022-05-01T06:11:25.000Z</published>
    <updated>2022-05-01T06:41:15.890Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从以下几个方面来学习MQTT主题的高级知识："><a href="#从以下几个方面来学习MQTT主题的高级知识：" class="headerlink" title="从以下几个方面来学习MQTT主题的高级知识："></a>从以下几个方面来学习MQTT主题的高级知识：</h3><ol><li>主题基本形式</li><li>主题分级</li><li>主题通配符</li><li>主题应用注意事项</li></ol><h3 id="主题基本形式"><a href="#主题基本形式" class="headerlink" title="主题基本形式"></a>主题基本形式</h3><p>主题的最基本形式就是一个字符串。以下是几个主题示例：</p><ul><li>myTopic</li><li>motorSpeed</li><li>MotorSpeed</li><li>current time</li></ul><p>要注意以下几点</p><ol><li><strong>主题是区分大小写的</strong>。如上列表中的主题 motor_speed和Motor_speed是两个完全不同的主题。</li><li><strong>主题可以使用空格</strong> 如以上列表中的current time，虽然有空格分隔current和time这两个词，但这实际是一个MQTT主题。不过，虽然我们可以使用空格，但是笔者强烈建议您<strong>不要在主题中使用空格</strong>。</li><li>大部分MQTT服务端是不支持中文主题的，所以我们应使用英文字符或<a href="http://www.taichi-maker.com/homepage/reference-index/arduino-code-reference/ascii-code-table/">ASCII字符</a>来作为MQTT主题。</li></ol><h3 id="主题分级"><a href="#主题分级" class="headerlink" title="主题分级"></a>主题分级</h3><p>MQTT主题可以是一个简单的字符串，比如motor_speed，myTopic。这些都是单一级别的主题。</p><p>为了更好的对主题进行管理和分类，我们可以对主题进行分级处理。MQTT主题各个级别之间可以使用”&#x2F;”来分隔。如下例所示：</p><p><strong>Tyler-1&#x2F;motor&#x2F;1&#x2F;speed</strong></p><p>在以上示例中一共有四级主题，分别是第1级 Tyler-1、第2级motor、第三级1、第4级speed。主题的每一级至少需要一个字符，比如以上示例中，数字1既是一级主题。</p><h3 id="主题通配符"><a href="#主题通配符" class="headerlink" title="主题通配符"></a>主题通配符</h3><p>当客户端订阅主题时，可以使用通配符同时订阅多个主题。通配符只能在订阅主题时使用，下面我们将介绍两种通配符：单级通配符和多级通配符。</p><ul><li><p><strong>单级通配符：+</strong></p><ul><li><p>顾名思义，单级通配符可以代替一个主题级别。 以下为含有单极通配符的主题示例。</p><p><strong>home&#x2F;sensor&#x2F;+&#x2F;temperature</strong></p><p>当客户端订阅了以上主题后，它将会收到以下主题的信息内容：</p><p>home&#x2F;sensor&#x2F;<strong>kitchen</strong>&#x2F;temperature<br>home&#x2F;sensor&#x2F;<strong>bedroom</strong>&#x2F;temperature</p></li></ul></li><li><p><strong>多级通配符 #</strong></p><ul><li><p>单级通配符仅可代替一个主题级别，而多级通配符”#”可以涵盖任意数量的主题级别。如下示例所示， 多级通配符必须是主题中的最后一个字符。</p><p><strong>home&#x2F;sensor&#x2F;#</strong></p><p>当客户端订阅了以上含有”#”的主题后，可以收到以下主题的信息。</p><p>home&#x2F;sensor&#x2F;<strong>kitchen&#x2F;temperature</strong><br>home&#x2F;sensor&#x2F;<strong>bedroom&#x2F;brightness</strong><br>home&#x2F;sensor&#x2F;<strong>data</strong></p></li></ul></li></ul><h3 id="主题应用注意事项"><a href="#主题应用注意事项" class="headerlink" title="主题应用注意事项"></a>主题应用注意事项</h3><p><strong>– 以$开始的主题</strong></p><p>以$开始的主题是MQTT服务端系统保留的特殊主题，我们不能随意订阅或者向其发布信息。</p><p><strong>– 不要用 “&#x2F;” 作为主题开头</strong><br>MQTT允许使用“&#x2F;”作为主题的开头，例如&#x2F;home&#x2F;sensor&#x2F;data。但是这将这么做毫无意义，而且会额外产生一个没有用处的主题级别。所以我们应避免使用&#x2F;作为主题的开头。</p><p><strong>– 主题中不要使用空格</strong></p><p>MQTT协议允许我们在主题中使用空格，但是阅读和调试含有空格的主题会显得异常困难。<strong>所以我们尽量不要在主题中使用空格或者特殊字符</strong>。</p><p><strong>-在主题中嵌入客户端ID</strong></p><p>在主题中嵌入发布消息的客户端ID，这一操作可以为开发和管理MQTT信息提供便利。通过主题中的客户端ID内容，我们可以很容易的了解该主题信息是由哪一台设备所发布的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;从以下几个方面来学习MQTT主题的高级知识：&quot;&gt;&lt;a href=&quot;#从以下几个方面来学习MQTT主题的高级知识：&quot; class=&quot;headerlink&quot; title=&quot;从以下几个方面来学习MQTT主题的高级知识：&quot;&gt;&lt;/a&gt;从以下几个方面来学习MQTT主题的高级知</summary>
      
    
    
    
    
    <category term="物联网" scheme="http://example.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Liunx&amp;Nginx</title>
    <link href="http://example.com/2022/05/01/Liunx-Nginx/"/>
    <id>http://example.com/2022/05/01/Liunx-Nginx/</id>
    <published>2022-05-01T02:44:37.000Z</published>
    <updated>2022-05-01T05:55:30.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux软件安装"><a href="#Linux软件安装" class="headerlink" title="Linux软件安装"></a>Linux软件安装</h1><h3 id="Linux上的软件安装有以下几种常见方式介绍"><a href="#Linux上的软件安装有以下几种常见方式介绍" class="headerlink" title="Linux上的软件安装有以下几种常见方式介绍"></a>Linux上的软件安装有以下几种常见方式介绍</h3><ol><li>二进制发布包<ul><li>软件已经针对具体平台编译打包发布，只要解压，修改配置即可</li></ul></li><li>RPM包<ul><li>软件已经按照redhat的包管理工具规范RPM进行打包发布，需要获取到相应的软件RPM发布包，然后用RPM命令进行安装</li></ul></li><li>Yum在线安装<ul><li>软件已经以RPM规范打包，但发布在了网络上的一些服务器上，可用yum在线安装服务器上的rpm软件，并且会自动解决软件安装过程中的库依赖问题</li></ul></li><li>源码编译安装<ul><li>软件以源码工程的形式发布，需要获取到源码工程后用相应开发工具进行编译打包部署。</li></ul></li></ol><h3 id="上传与下载工具介绍"><a href="#上传与下载工具介绍" class="headerlink" title="上传与下载工具介绍"></a>上传与下载工具介绍</h3><ol><li>FileZilla</li><li>lrzsz</li></ol><h3 id="在Linux上安装JDK"><a href="#在Linux上安装JDK" class="headerlink" title="在Linux上安装JDK"></a>在Linux上安装JDK</h3><ol><li><p>上传JDK到Linux的服务器.</p><ul><li>上传JDK</li><li>卸载open-JDK</li></ul></li><li><p>在Linux服务器上安装JDK.</p><ul><li>通常将软件安装到&#x2F;usr&#x2F;local</li><li>直接解压就可以</li></ul></li><li><p>配置JDK的环境变量.</p><ol><li><p>配置环境变量：</p><ul><li><p>vi &#x2F;etc&#x2F;profile</p></li><li><p>在末尾行添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#set java environment</span><br><span class="line">JAVA_HOME=/usr/local/jdk/jdk1.7.0_71</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib.tools.jar</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure></li><li><p>保存退出</p><ul><li>source &#x2F;etc&#x2F;profile  使更改的配置立即生效</li></ul></li></ul></li></ol></li></ol><h3 id="在Linux上安装mysql"><a href="#在Linux上安装mysql" class="headerlink" title="在Linux上安装mysql"></a>在Linux上安装mysql</h3><ul><li><p>将mysql的安装文件上传到Linux的服务器.</p><ul><li>将mysql的tar解压</li><li>将系统自带的mysql卸载</li></ul></li><li><p>安装MYSQL服务端</p><ul><li>下面的提示是告诉我们root用户的密码第一次是随机生成的，它保存在&#x2F;root&#x2F;.mysql_secret中，第一次登录需要修改root密码</li></ul></li><li><p>安装MYSQL客户端</p><ul><li>查看生成的root密码</li><li>报错:原因是没有启动mysql服务</li><li>需要开启mysql服务</li><li>执行下面操作报错，原因是第一次操作mysql必须修改root用户的密码</li><li>设置root用户的密码</li></ul></li><li><p><strong>Mysq服务加入到系统服务并自动启动操作：</strong></p><ul><li>chkconfig –add mysql</li><li>自动启动：<ul><li>chkconfig mysql on</li></ul></li><li>查询列表：<ul><li>chkconfig</li></ul></li></ul></li><li><p>关于mysql远程访问设置</p><ul><li><p>在linux中很多软件的端口都被”防火墙”限止，我们需要将防火墙关闭</p></li><li><p>防火墙打开3306端口</p><p>&#x2F;sbin&#x2F;iptables -I INPUT -p tcp –dport 3306 -j ACCEPT</p><p>&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;iptables save</p><p>&#x2F;etc&#x2F;init.d&#x2F;iptables status</p></li><li><p>学习阶段我们也可以直接将防火墙关闭</p><ul><li>service iptables stop;</li></ul></li></ul></li></ul><h3 id="在Liunx上安装tomcat"><a href="#在Liunx上安装tomcat" class="headerlink" title="在Liunx上安装tomcat"></a>在Liunx上安装tomcat</h3><ol><li>Tomcat上传到linux上</li><li>将上传的tomcat解压</li><li>在tomcat&#x2F;bin目录下执行 startup.sh（注意防火墙）</li><li>查看目标 tomcat&#x2F;logs&#x2F;catalina.out</li></ol><h2 id="Linux部署案例"><a href="#Linux部署案例" class="headerlink" title="Linux部署案例"></a>Linux部署案例</h2><p>将Maven打包</p><ol><li>修改porm配置<ul><li>在porm.xml中添加&lt;finalName&gt;</li><li>修改jdk版本保持一致</li></ul></li><li>将本地数据库导出成为sql文件</li><li>切换Linux数据库将文件还原</li><li>修改项目<ol><li>druid.properties 加字符编码</li><li>将绝对路径都就改成相对路径</li></ol></li><li>用package命令打包</li><li>将war包传到tomcat的webapps文件中</li></ol><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><ul><li>掌握Nginx的安装</li><li>掌握Nginx的静态网站部署</li><li>理解Nginx的反向代理与负载均衡，能够配置反向代理和负载均衡</li></ul><h3 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h3><p>一款高性能的 http 服务器&#x2F;反向代理服务器</p><h3 id="Nginx的应用场景"><a href="#Nginx的应用场景" class="headerlink" title="Nginx的应用场景"></a>Nginx的应用场景</h3><ul><li>http 服务器。Nginx 是一个 http 服务可以独立提供 http 服务。可以做网页静态服务器。</li><li>虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</li><li>反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用 nginx 做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况。</li></ul><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li><p>安装gcc的环境</p></li><li><p>第三方的开发包</p><ul><li><p>pcre</p><ul><li>PCRE(Perl Compatible Regular Expressions)是一个 Perl 库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure><ul><li>注：pcre-devel 是使用 pcre 开发的一个二次开发库。nginx 也需要此库</li></ul></li><li><p>zlib</p><ul><li>zlib 库提供了很多种压缩和解压缩的方式，nginx 使用 zlib 对 http 包的内容进行 gzip，所以需要在 linux 上安装 zlib 库。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure></li><li><p>OpenSSL</p><ul><li>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。nginx 不仅支持 http 协议，还支持 https（即在 ssl 协议上传输 http），所以需要在 linux安装 openssl 库。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Nginx下载"><a href="#Nginx下载" class="headerlink" title="Nginx下载"></a>Nginx下载</h3><p>官方网站下载 nginx：<a href="http://nginx.org/">http://nginx.org/</a></p><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><ol><li><p>把 nginx 的源码包nginx-1.8.0.tar.gz上传到 linux 系统</p></li><li><p>解压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf nginx-1.8.0.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入nginx-1.8.0目录  使用 configure 命令创建一 makeFile 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br></pre></td></tr></table></figure><ul><li><p>执行后可以看到Makefile文件</p></li><li><p>Makefile是一种配置文件， Makefile 一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。</p></li><li><p><strong>configure参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr \                                                        指向安装目录</span><br><span class="line">--sbin-path=/usr/sbin/nginx \                                 指向（执行）程序文件（nginx）</span><br><span class="line">--conf-path=/etc/nginx/nginx.conf \                      指向配置文件</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \              指向log</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \            指向http-log</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \                      指向pid</span><br><span class="line">--lock-path=/var/lock/nginx.lock \                         （安装文件锁定，防止安装文件被别人利用，或自己误操作。）</span><br><span class="line">--user=nginx \</span><br><span class="line">--group=nginx \</span><br><span class="line">--with-http_ssl_module \                      启用ngx_http_ssl_module支持（使支持https请求，需已安装openssl）</span><br><span class="line">--with-http_flv_module \                       启用ngx_http_flv_module支持（提供寻求内存使用基于时间的偏移量文件）</span><br><span class="line">--with-http_stub_status_module \     启用ngx_http_stub_status_module支持（获取nginx自上次启动以来的工作状态）</span><br><span class="line">--with-http_gzip_static_module \   启用ngx_http_gzip_static_module支持（在线实时压缩输出数据流）</span><br><span class="line">--http-client-body-temp-path=/var/tmp/nginx/client/ \ 设定http客户端请求临时文件路径</span><br><span class="line">--http-proxy-temp-path=/var/tmp/nginx/proxy/ \ 设定http代理临时文件路径</span><br><span class="line">--http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \ 设定http fastcgi临时文件路径</span><br><span class="line">--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \ 设定http uwsgi临时文件路径</span><br><span class="line">--http-scgi-temp-path=/var/tmp/nginx/scgi \ 设定http scgi临时文件路径</span><br><span class="line">--with-pcre 启用pcre库</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编译</p><ul><li>​    make</li></ul></li><li><p>安装</p><ul><li>make install</li></ul></li></ol><h3 id="Nginx安装-1"><a href="#Nginx安装-1" class="headerlink" title="Nginx安装"></a>Nginx安装</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux软件安装&quot;&gt;&lt;a href=&quot;#Linux软件安装&quot; class=&quot;headerlink&quot; title=&quot;Linux软件安装&quot;&gt;&lt;/a&gt;Linux软件安装&lt;/h1&gt;&lt;h3 id=&quot;Linux上的软件安装有以下几种常见方式介绍&quot;&gt;&lt;a href=&quot;#Lin</summary>
      
    
    
    
    
    <category term="Java-web" scheme="http://example.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>MQTT1-6 ESP8266发布消息</title>
    <link href="http://example.com/2022/04/30/MQTT1-6-ESP8266%E5%8F%91%E5%B8%83%E6%B6%88%E6%81%AF/"/>
    <id>http://example.com/2022/04/30/MQTT1-6-ESP8266%E5%8F%91%E5%B8%83%E6%B6%88%E6%81%AF/</id>
    <published>2022-04-30T14:25:06.000Z</published>
    <updated>2022-04-30T15:24:13.085Z</updated>
    
    <content type="html"><![CDATA[<p>使用最为流行的PubSubClient库来作为本教程的主要介绍对象</p><h3 id="发布MQTT消息示例"><a href="#发布MQTT消息示例" class="headerlink" title="发布MQTT消息示例"></a>发布MQTT消息示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;ESP8266WiFi.h&gt;</span><br><span class="line">#include &lt;PubSubClient.h&gt;</span><br><span class="line">#include &lt;Ticker.h&gt;//可定时执行任务的库</span><br><span class="line"> </span><br><span class="line">// 设置wifi接入信息(请根据您的WiFi信息进行修改)</span><br><span class="line">const char* ssid = &quot;taichi-maker&quot;;</span><br><span class="line">const char* password = &quot;12345678&quot;;</span><br><span class="line">const char* mqttServer = &quot;test.ranye-iot.net&quot;;</span><br><span class="line">//mqtt服务端的地址</span><br><span class="line"> </span><br><span class="line">// 如以上MQTT服务器无法正常连接，请前往以下页面寻找解决方案</span><br><span class="line">// http://www.taichi-maker.com/public-mqtt-broker/</span><br><span class="line"> </span><br><span class="line">Ticker ticker;</span><br><span class="line">WiFiClient wifiClient;</span><br><span class="line">PubSubClient mqttClient(wifiClient);//建立PubSubCliebt对象</span><br><span class="line"> </span><br><span class="line">int count;    // Ticker计数用变量</span><br><span class="line"> </span><br><span class="line">void setup() &#123;</span><br><span class="line">  Serial.begin(9600);</span><br><span class="line">  </span><br><span class="line">  //设置ESP8266工作模式为无线终端模式</span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line">  </span><br><span class="line">  // 连接WiFi</span><br><span class="line">  connectWifi();</span><br><span class="line">  </span><br><span class="line">  // 设置MQTT服务器和端口号</span><br><span class="line">  mqttClient.setServer(mqttServer, 1883);</span><br><span class="line"> </span><br><span class="line">  // 连接MQTT服务器</span><br><span class="line">  connectMQTTServer();</span><br><span class="line"> </span><br><span class="line">  // Ticker定时对象</span><br><span class="line">  ticker.attach(1, tickerCount);  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void loop() &#123; </span><br><span class="line">  if (mqttClient.connected()) &#123; // 如果开发板成功连接服务器</span><br><span class="line">    // 每隔3秒钟发布一次信息</span><br><span class="line">    if (count &gt;= 3)&#123;</span><br><span class="line">      pubMQTTmsg();</span><br><span class="line">      count = 0;</span><br><span class="line">    &#125;    </span><br><span class="line">    // 保持心跳</span><br><span class="line">    mqttClient.loop();</span><br><span class="line">  &#125; else &#123;                  // 如果开发板未能成功连接服务器</span><br><span class="line">    connectMQTTServer();    // 则尝试连接服务器</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void tickerCount()&#123;</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void connectMQTTServer()&#123;</span><br><span class="line">  // 根据ESP8266的MAC地址生成客户端ID（避免与其它ESP8266的客户端ID重名）</span><br><span class="line">  String clientId = &quot;esp8266-&quot; + WiFi.macAddress();</span><br><span class="line"> </span><br><span class="line">  // 连接MQTT服务器</span><br><span class="line">  if (mqttClient.connect(clientId.c_str())) &#123; </span><br><span class="line">    Serial.println(&quot;MQTT Server Connected.&quot;);</span><br><span class="line">    Serial.println(&quot;Server Address: &quot;);</span><br><span class="line">    Serial.println(mqttServer);</span><br><span class="line">    Serial.println(&quot;ClientId:&quot;);</span><br><span class="line">    Serial.println(clientId);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    Serial.print(&quot;MQTT Server Connect Failed. Client State:&quot;);</span><br><span class="line">    Serial.println(mqttClient.state());</span><br><span class="line">    delay(3000);</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 发布信息</span><br><span class="line">void pubMQTTmsg()&#123;</span><br><span class="line">  static int value; // 客户端发布信息用数字</span><br><span class="line"> </span><br><span class="line">  // 建立发布主题。主题名称以Taichi-Maker-为前缀，后面添加设备的MAC地址。</span><br><span class="line">  // 这么做是为确保不同用户进行MQTT信息发布时，ESP8266客户端名称各不相同，</span><br><span class="line">  String topicString = &quot;Taichi-Maker-Pub-&quot; + WiFi.macAddress();</span><br><span class="line">  char publishTopic[topicString.length() + 1];  </span><br><span class="line">  strcpy(publishTopic, topicString.c_str());</span><br><span class="line"> </span><br><span class="line">  // 建立发布信息。信息内容以Hello World为起始，后面添加发布次数。</span><br><span class="line">  String messageString = &quot;Hello World &quot; + String(value++); </span><br><span class="line">  char publishMsg[messageString.length() + 1];   </span><br><span class="line">  strcpy(publishMsg, messageString.c_str());</span><br><span class="line">  </span><br><span class="line">  // 实现ESP8266向主题发布信息</span><br><span class="line">  if(mqttClient.publish(publishTopic, publishMsg))&#123;</span><br><span class="line">    Serial.println(&quot;Publish Topic:&quot;);Serial.println(publishTopic);</span><br><span class="line">    Serial.println(&quot;Publish message:&quot;);Serial.println(publishMsg);    </span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    Serial.println(&quot;Message Publish Failed.&quot;); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// ESP8266连接wifi</span><br><span class="line">void connectWifi()&#123;</span><br><span class="line"> </span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line"> </span><br><span class="line">  //等待WiFi连接,成功连接后输出成功信息</span><br><span class="line">  while (WiFi.status() != WL_CONNECTED) &#123;</span><br><span class="line">    delay(1000);</span><br><span class="line">    Serial.print(&quot;.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(&quot;&quot;);</span><br><span class="line">  Serial.println(&quot;WiFi Connected!&quot;);  </span><br><span class="line">  Serial.println(&quot;&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用最为流行的PubSubClient库来作为本教程的主要介绍对象&lt;/p&gt;
&lt;h3 id=&quot;发布MQTT消息示例&quot;&gt;&lt;a href=&quot;#发布MQTT消息示例&quot; class=&quot;headerlink&quot; title=&quot;发布MQTT消息示例&quot;&gt;&lt;/a&gt;发布MQTT消息示例&lt;/h3&gt;</summary>
      
    
    
    
    
    <category term="物联网" scheme="http://example.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Liunx</title>
    <link href="http://example.com/2022/04/30/Liunx/"/>
    <id>http://example.com/2022/04/30/Liunx/</id>
    <published>2022-04-30T01:23:45.000Z</published>
    <updated>2022-04-30T05:35:50.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的概述"><a href="#Linux的概述" class="headerlink" title="Linux的概述:"></a>Linux的概述:</h1><h2 id="学习Linux之前先了解Unix"><a href="#学习Linux之前先了解Unix" class="headerlink" title="学习Linux之前先了解Unix"></a>学习Linux之前先了解Unix</h2><h2 id="linux的历史"><a href="#linux的历史" class="headerlink" title="linux的历史"></a>linux的历史</h2><h2 id="Linux系统的应用"><a href="#Linux系统的应用" class="headerlink" title="Linux系统的应用"></a>Linux系统的应用</h2><p>服务器系统Web应用服务器、数据库服务器、接口服务器、DNS、FTP等等； </p><p>嵌入式系统路由器、防火墙、手机、PDA、IP 分享器、交换器、家电用品的微电脑控制器等等，</p><p>高性能运算、计算密集型应用Linux有强大的运算能力。</p><p>桌面应用系统</p><p>移动手持系统</p><h2 id="Linux的版本"><a href="#Linux的版本" class="headerlink" title="Linux的版本"></a>Linux的版本</h2><p>Linux的版本分为两种：内核版本和发行版本；内核版本是指在Linus领导下的内核小组开发维护的系统内核的版本号 ；</p><h2 id="Linux的主流版本"><a href="#Linux的主流版本" class="headerlink" title="Linux的主流版本"></a>Linux的主流版本</h2><h2 id="Liunx安装"><a href="#Liunx安装" class="headerlink" title="Liunx安装"></a>Liunx安装</h2><h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><p>VMware</p><h1 id="Liunx的目录结构"><a href="#Liunx的目录结构" class="headerlink" title="Liunx的目录结构"></a>Liunx的目录结构</h1><p>树状结构：</p><p>参考资料：<a href="https://www.runoob.com/linux/linux-system-contents.html">https://www.runoob.com/linux/linux-system-contents.html</a></p><p>![截屏2022-04-30 10.06.14](&#x2F;Users&#x2F;mhy&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;Liunx&#x2F;截屏2022-04-30 10.06.14.png)</p><p><strong>&#x2F;bin</strong>：bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p><p><strong>&#x2F;boot：</strong>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><p><strong>&#x2F;dev ：</strong>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p><p><strong>&#x2F;etc：</strong>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p><p><strong>&#x2F;home</strong>：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p><p><strong>&#x2F;lib</strong>：lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p><p><strong>&#x2F;lost+found</strong>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p><strong>&#x2F;media</strong>：</p><h1 id="Liunx常用命令"><a href="#Liunx常用命令" class="headerlink" title="Liunx常用命令"></a>Liunx常用命令</h1><h3 id="列出文件列表-ls-ll"><a href="#列出文件列表-ls-ll" class="headerlink" title="列出文件列表 ls ll"></a>列出文件列表 ls ll</h3><p>ls(list)是一个非常有用的命令，用来显示当前目录下的内容。配合参数的使用，能以不同的方式显示目录内容。 </p><p> 格式：ls[参数] [路径或文件名]</p><p>常用：</p><p>在linux中以 . 开头的文件都是隐藏的文件</p><ul><li>ls</li><li>ls -a  显示所有文件或目录（包含隐藏的文件）</li><li>ls -l  缩写成ll</li></ul><h3 id="切换目录指令cd："><a href="#切换目录指令cd：" class="headerlink" title="切换目录指令cd："></a>切换目录指令cd：</h3><ul><li><p>使用cd app    切换到app目录</p></li><li><p>cd ..    切换到上一层目录</p></li><li><p>cd &#x2F;        切换到系统根目录</p></li><li><p>cd ~        切换到用户主目录</p></li><li><p>cd -        切换到上一个所在目录</p></li></ul><p> 使用tab键来补全文件路径</p><h3 id="创建目录和移除目录：mkdir-rmdir"><a href="#创建目录和移除目录：mkdir-rmdir" class="headerlink" title="创建目录和移除目录：mkdir rmdir"></a>创建目录和移除目录：mkdir rmdir</h3><ul><li>mkdir(make directory)命令可用来创建子目录。</li><li>mkdir app  è 在当前目录下创建app目录</li><li>mkdir –p app2&#x2F;test  è 级联创建aap2以及test目</li><li>rmdir(remove directory)命令可用来删除“空”的子目录：</li><li>rmdir app  è 删除app目录</li></ul><p>当有些命令不知道怎么办，命令 –help 查询此命令文档</p><h3 id="浏览文件"><a href="#浏览文件" class="headerlink" title="浏览文件"></a>浏览文件</h3><ul><li><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><ul><li>用于显示文件的内容。格式：cat[参数]&lt;文件名&gt;<ul><li>cat yum.conf</li></ul></li></ul></li><li><p><strong>more</strong></p><ul><li>一般用于要显示的内容会超过一个画面长度的情况。按空格键显示下一个画面。回车显示下一行内容。</li><li>按 q 键退出查看。<ul><li>more yum.conf<ul><li>空格显示下一页数据 回车显示下一行的数据</li></ul></li></ul></li></ul></li><li><p><strong>less</strong></p><ul><li>less用法和more类似，不同的是less可以通过PgUp、PgDn键来控制。<ul><li>less yum.conf<ul><li>PgUp 和 PgDn 进行上下翻页.</li></ul></li></ul></li></ul></li><li><p><strong>tail</strong></p><ul><li>tail命令是在实际使用过程中使用非常多的一个命令，它的功能是：用于显示文件后几行的内容。<ul><li>用法<ul><li>tail -10 &#x2F;etc&#x2F;passwd  è 查看后10行数据</li><li>tail -f catalina.log  è 动态查看日志(*****)</li></ul></li><li>ctrl+c 结束查看</li></ul></li></ul></li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul><li><strong>rm</strong><ul><li>删除文件</li><li>用法：rm [选项]… 文件…<ul><li>rm a.txt      删除a.txt文件</li><li>删除需要用户确认，y&#x2F;nrm 删除不询问</li><li>rm -f a.txt    不询问，直接删除rm 删除目录</li><li>rm -r a     递归删除不询问递归删除（慎用）</li><li>rm -rf  a   不询问递归删除</li><li>rm -rf *    删除所有文件</li><li>rm -rf &#x2F;*    自杀</li></ul></li></ul></li><li><strong>cp</strong> &amp; <strong>mv</strong><ul><li>cp(copy)命令可以将文件从一处复制到另一处。一般在使用cp命令时将一个文件复制成另一个文件或复制到某目录时，需要指定源文件名与目标文件名或目录。<ul><li>cp a.txt b.txt     将a.txt复制为b.txt文件</li><li>cp a.txt ..&#x2F;    将a.txt文件复制到上一层目录中</li></ul></li><li>mv 移动或者重命名<ul><li>mv a.txt ..&#x2F;    将a.txt文件移动到上一层目录中</li><li>mv a.txt b.txt    将a.txt文件重命名为b.txt</li></ul></li></ul></li><li><strong>tar</strong>打包或解压<ul><li>tar命令位于&#x2F;bin目录下，它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成xxx.tar.gz(或称为xxx.tgz)的文件。常用参数：<ul><li>-c：创建一个新tar文件</li><li>-v：显示运行过程的信息</li><li>-f：指定文件名</li><li>-z：调用gzip压缩命令进行压缩</li><li>查看压缩文件的内容</li><li>-x：解开tar文件</li></ul></li><li>打包<ul><li>tar –cvf xxx.tar .&#x2F;*</li></ul></li><li>打包并且压缩：<ul><li>tar –zcvf xxx.tar.gz .&#x2F;*</li></ul></li><li>解压<ul><li>tar –xvf xxx.tar</li><li>tar -zxvf xxx.tar.gz -C &#x2F;usr&#x2F;aaa</li></ul></li></ul></li><li><strong>find</strong><ul><li>find指令用于查找符合条件的文件</li><li>示例<ul><li>find &#x2F; -name “ins*” 查找文件名称是以ins开头的文件</li><li>find &#x2F; -name “ins*” –ls </li><li>find &#x2F; –user itcast –ls 查找用户itcast的文件</li><li>find &#x2F; –user itcast –type d –ls 查找用户itcast的目录</li><li>find &#x2F;-perm -777 –type d-ls 查找权限是777的文件</li></ul></li></ul></li><li><strong>grep</strong><ul><li>查找文件里符合条件的字符串。</li><li>用法: grep [选项]… PATTERN [FILE]…<ul><li>示例<ul><li>grep lang anaconda-ks.cfg  在文件中查找lang</li><li>grep lang anaconda-ks.cfg –color 高亮显示</li></ul></li></ul></li></ul></li></ul><h3 id="其他常见命令"><a href="#其他常见命令" class="headerlink" title="其他常见命令"></a>其他常见命令</h3><ul><li><strong>pwd</strong><ul><li>显示当前所在目录</li></ul></li><li><strong>touch</strong><ul><li>创建一个空文件<ul><li>touch a.txt</li></ul></li></ul></li><li><strong>clear&#x2F;crtl + L</strong><ul><li>清屏</li></ul></li></ul><h2 id="vi和vim编辑器"><a href="#vi和vim编辑器" class="headerlink" title="vi和vim编辑器"></a>vi和vim编辑器</h2><h3 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h3><ul><li>在Linux下一般使用vi编辑器来编辑文件。vi既可以查看文件也可以编辑文件。三种模式：命令行、插入、底行模式。<ul><li>切换到命令行模式：按Esc键；</li><li>切换到插入模式：按 i 、o、a键；<ul><li>i 在当前位置前插入</li><li>I 在当前行首插入</li><li>a 在当前位置后插入</li><li>A 在当前行尾插入</li><li>o 在当前行之后插入一行</li><li>O 在当前行之前插入一行</li></ul></li><li>切换到底行模式：按 :（冒号）；更多详细用法，查询文档《Vim命令合集.docx》和《vi使用方法详细介绍.docx》</li></ul></li><li>常见命令<ul><li>打开文件：vim file</li><li>退出：esc -&gt; :q</li><li>修改文件：输入i进入插入模式</li><li>保存并退出：esc-&gt;:wq</li><li>不保存退出：esc-&gt;:q!</li></ul></li><li>三种进入插入模式：<ul><li>i:在当前的光标所在处插入</li><li>o:在当前光标所在的行的下一行插入</li><li>a:在光标所在的下一个字符插入</li></ul></li><li>快捷键：<ul><li>dd – 快速删除一行</li><li>yy - 复制当前行</li><li>nyy - 从当前行向后复制几行</li><li>p - 粘贴</li><li>R – 替换</li></ul></li></ul><h3 id="重定向输出-gt-和-gt-gt"><a href="#重定向输出-gt-和-gt-gt" class="headerlink" title="重定向输出&gt;和&gt;&gt;"></a>重定向输出&gt;和&gt;&gt;</h3><ul><li>&gt;重定向输出，覆盖原有内容</li><li>&gt;&gt;重定向输出，又追见功能</li><li>示例<ul><li>cat &#x2F;etc&#x2F;passwd &gt; a.txt  将输出定向到a.txt中</li><li>cat &#x2F;etc&#x2F;passwd &gt;&gt; a.txt  输出并且追加</li></ul></li></ul><p>ifconfig &gt; ifconfig.txt</p><h3 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h3><ul><li>ps 正在运行的某个进程的状态<ul><li>ps –ef  查看所有进程</li><li>ps –ef | grep ssh 查找某一进程</li><li>kill 2868  杀掉2868编号的进程</li><li>kill -9 2868  强制杀死进程</li></ul></li></ul><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul><li>管道是Linux命令中重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入。<ul><li>ls –help | more  分页查询帮助信息</li><li>ps –ef | grep java  查询名称中包含java的进程</li><li></li><li>ifconfig | more</li><li>cat index.html | more</li><li>ps –ef | grep aio</li></ul></li></ul><h2 id="Liunx的权限命令"><a href="#Liunx的权限命令" class="headerlink" title="Liunx的权限命令"></a>Liunx的权限命令</h2><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>![截屏2022-04-30 12.49.31](&#x2F;Users&#x2F;mhy&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;Liunx&#x2F;截屏2022-04-30 12.49.31.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-   ---   ---   ---</span><br></pre></td></tr></table></figure><ol><li><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><ul><li>-表示文件</li><li>d表示文件夹</li><li>l表示链接</li></ul></li><li><h3 id="当前用户具有该文件的权限"><a href="#当前用户具有该文件的权限" class="headerlink" title="当前用户具有该文件的权限"></a>当前用户具有该文件的权限</h3><ul><li>r：read 读             4</li><li>w：write 写           2</li><li>x：excute 执行      1</li></ul></li><li><h3 id="当前组内其他用户具有该文件的权限"><a href="#当前组内其他用户具有该文件的权限" class="headerlink" title="当前组内其他用户具有该文件的权限"></a>当前组内其他用户具有该文件的权限</h3><ul><li>r：read 读</li><li>w：write 写</li><li>x：excute 执行</li></ul></li><li><h3 id="其他组的用户具有该文件的权限"><a href="#其他组的用户具有该文件的权限" class="headerlink" title="其他组的用户具有该文件的权限"></a>其他组的用户具有该文件的权限</h3><ul><li>r：read 读</li><li>w：write 写</li><li>x：excute 执行</li></ul></li><li><h3 id="Linux三种文件类型"><a href="#Linux三种文件类型" class="headerlink" title="Linux三种文件类型"></a>Linux三种文件类型</h3><ul><li>普通文件：包括文本文件、数据文件、可执行的二进制程序文件等。</li><li>目录文件：Linux系统把目录看成是一种特殊的文件，利用它构成文件系统的树型结构。</li><li>设备文件：Linux系统把每一个设备都看成是一个文件</li></ul></li><li><h3 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h3><ul><li>chmod 变更文件或目录的权限。</li><li>chmod 755 a.txt</li><li>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;rx a.txt</li></ul></li></ol><h2 id="Liunx上常用网络操作"><a href="#Liunx上常用网络操作" class="headerlink" title="Liunx上常用网络操作"></a>Liunx上常用网络操作</h2><ol><li><h3 id="主机名配置"><a href="#主机名配置" class="headerlink" title="主机名配置"></a>主机名配置</h3><ul><li>hostname 查看主机名</li><li>hostname xxx 修改主机名 重启后无效</li><li>如果想要永久生效，可以修改&#x2F;etc&#x2F;sysconfig&#x2F;network文件</li></ul></li><li><h3 id="IP地址配置"><a href="#IP地址配置" class="headerlink" title="IP地址配置"></a>IP地址配置</h3><ul><li>ifconfig 查看(修改)ip地址(重启后无效)</li><li>ifconfig eth0 192.168.12.22 修改ip地址<ul><li>如果想要永久生效 修改 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0文件</li></ul></li><li>DEVICE&#x3D;eth0 #网卡名称</li><li>BOOTPROTO&#x3D;static #获取ip的方式(static&#x2F;dhcp&#x2F;bootp&#x2F;none)</li><li>HWADDR&#x3D;00:0C:29:B5:B2:69 #MAC地址</li><li>IPADDR&#x3D;12.168.177.129 #IP地址</li><li>NETMASK&#x3D;255.255.255.0 #子网掩码</li><li>NETWORK&#x3D;192.168.177.0 #网络地址</li><li>BROADCAST&#x3D;192.168.0.255 #广播地址</li><li>NBOOT&#x3D;yes # 系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备。</li></ul></li><li><h3 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h3><ul><li>&#x2F;etc&#x2F;hosts文件用于在通过主机名进行访问时做ip地址解析之用,相当于windows系统的C:\Windows\System32\drivers\etc\hosts文件的功能</li></ul></li><li><h3 id="网络服务管理"><a href="#网络服务管理" class="headerlink" title="网络服务管理"></a>网络服务管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">service network status 查看指定服务的状态</span><br><span class="line">service network stop 停止指定服务</span><br><span class="line">service network start 启动指定服务</span><br><span class="line">service network restart 重启指定服务</span><br><span class="line"></span><br><span class="line">service --status–all 查看系统中所有后台服务</span><br><span class="line">netstat –nltp 查看系统中网络进程的端口监听情况</span><br><span class="line"></span><br><span class="line">防火墙设置</span><br><span class="line">防火墙根据配置文件/etc/sysconfig/iptables来控制本机的”出”、”入”网络访问行为。</span><br><span class="line">service iptables status 查看防火墙状态</span><br><span class="line">service iptables stop 关闭防火墙</span><br><span class="line">service iptables start 启动防火墙</span><br><span class="line">chkconfig  iptables off 禁止防火墙自启</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux的概述&quot;&gt;&lt;a href=&quot;#Linux的概述&quot; class=&quot;headerlink&quot; title=&quot;Linux的概述:&quot;&gt;&lt;/a&gt;Linux的概述:&lt;/h1&gt;&lt;h2 id=&quot;学习Linux之前先了解Unix&quot;&gt;&lt;a href=&quot;#学习Linux之前先了</summary>
      
    
    
    
    
    <category term="Java-web" scheme="http://example.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>MQTT1-5发布,订阅和取消订阅</title>
    <link href="http://example.com/2022/04/30/MQTT1-5%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E5%92%8C%E5%8F%96%E6%B6%88%E8%AE%A2%E9%98%85/"/>
    <id>http://example.com/2022/04/30/MQTT1-5%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E5%92%8C%E5%8F%96%E6%B6%88%E8%AE%A2%E9%98%85/</id>
    <published>2022-04-30T01:08:13.000Z</published>
    <updated>2022-04-30T01:18:04.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MQTT报文"><a href="#MQTT报文" class="headerlink" title="MQTT报文"></a>MQTT报文</h2><ul><li>PUBLISH – 发布信息</li><li>SUBSCRIBE – 订阅主题</li><li>SUBACK – 订阅确认</li><li>UNSUBSCRIBE – 取消订阅</li></ul><h2 id="PUBLISH-–-发布消息"><a href="#PUBLISH-–-发布消息" class="headerlink" title="PUBLISH – 发布消息"></a>PUBLISH – 发布消息</h2><p>MQTT客户端一旦连接到服务端，便可以发布消息。 每条发布的MQTT消息必须包含一个主题。MQTT服务器可以通过主题确定将消息转发给哪些客户端。</p><p>MQTT客户端发布消息时，会向服务端发送PUBLISH报文。</p><ul><li><strong>topicName – 主题名</strong><ul><li>主题名用于识别此信息应发布到哪一个主题</li></ul></li><li><strong>QoS – 服务质量等级</strong><ul><li>QoS（Quality of Service）表示MQTT消息的服务质量等级。QoS有三个级别：0、1和2。QoS决定MQTT通讯有什么样的服务保证。</li></ul></li><li><strong>packetId – 报文标识符</strong><ul><li>报文标识符可用于对MQTT报文进行标识。不同的MQTT报文所拥有的标识符不同。MQTT设备可以通过该标识符对MQTT报文进行甄别和管理。<strong>请注意：报文标识符的内容与QoS级别有密不可分的关系。只有QoS级别大于0时，报文标识符才是非零数值。如果QoS等于0，报文标识符为0。</strong></li></ul></li><li><strong>retainFlag – 保留标志</strong><ul><li>有些情况下，我们需要客户端在订阅了某一主题后马上接收到一条该主题的信息。这时候就需要用到<strong>保留标志</strong>这一信息。</li></ul></li><li><strong>Payload – 有效载荷</strong><ul><li>有效載荷是我们希望通过MQTT所发送的实际内容。我们可以使用MQTT协议发送文本，图像等格式的内容。这些内容都是通过有效載荷所发送的。</li></ul></li><li><strong>dupFlag – 重发标志</strong><ul><li>当MQTT报文的接收方没有及时确认收到报文时，发送方会重复发送MQTT报文。在重复发送MQTT报文时，发送方会将此“重发标志”设置为true。请注意，重发标志只在QoS级别大于0时使用。</li></ul></li></ul><h2 id="SUBSCRIBE-–-订阅主题"><a href="#SUBSCRIBE-–-订阅主题" class="headerlink" title="SUBSCRIBE – 订阅主题"></a>SUBSCRIBE – 订阅主题</h2><p><strong>一个SUBSCRIBE报文可以包含有单个或者多个订阅主题名。</strong>也就是说，一个SUBSCRIBE报文可以用于订阅一个或者多个主题。</p><h2 id="SUBACK-–-订阅确认"><a href="#SUBACK-–-订阅确认" class="headerlink" title="SUBACK – 订阅确认"></a>SUBACK – 订阅确认</h2><p>服务端接收到客户端的订阅报文后，会向客户端发送SUBACK报文确认订阅。</p><p>SUBACK报文包含有“<strong>订阅返回码”</strong>和“<strong>报文标识符”</strong>这两个信息。</p><ul><li><p><strong>returnCode – 订阅返回码</strong></p><table><thead><tr><th>返回码</th><th><strong>Return Code Response</strong></th></tr></thead><tbody><tr><td>0</td><td>订阅成功 – QoS 0</td></tr><tr><td>1</td><td>订阅成功- QoS 1</td></tr><tr><td>2</td><td>订阅成功- QoS 2</td></tr><tr><td>128</td><td>订阅失败</td></tr></tbody></table><p><strong>请留意，如上表所示，针对不同的主题订阅QoS，服务端的返回码会有所不同。</strong></p></li></ul><h2 id="UNSUBSCRIBE-–-取消订阅"><a href="#UNSUBSCRIBE-–-取消订阅" class="headerlink" title="UNSUBSCRIBE – 取消订阅"></a>UNSUBSCRIBE – 取消订阅</h2><p>顾名思义，当客户端要取消订阅某主题时，可通过向服务端发送UNSUBSCRIBE – 取消订阅报文来实现。</p><p>UNSUBSCRIBE报文包含两个重要信息，第一个是取消订阅的主题名称。同一个UNSUBSCRIBE报文可以同时包含多个取消订阅的主题名称。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MQTT报文&quot;&gt;&lt;a href=&quot;#MQTT报文&quot; class=&quot;headerlink&quot; title=&quot;MQTT报文&quot;&gt;&lt;/a&gt;MQTT报文&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PUBLISH – 发布信息&lt;/li&gt;
&lt;li&gt;SUBSCRIBE – 订阅主题&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="物联网" scheme="http://example.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>小程序模板与配置</title>
    <link href="http://example.com/2022/04/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/04/29/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2022-04-29T06:31:15.000Z</published>
    <updated>2022-05-04T07:51:55.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><p>能够使用 WXML 模板语法渲染页面结构<br>能够使用 WXSS 样式美化页面结构<br>能够使用 app.json 对小程序进行全局性配置<br>能够使用 page.json 对小程序页面进行个性化配置<br>能够知道如何发起网络数据请求</p><h1 id="WXML-模板语法"><a href="#WXML-模板语法" class="headerlink" title="WXML 模板语法"></a><strong>WXML 模板语法</strong></h1><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><ol><li><h3 id="数据绑定的基本原则"><a href="#数据绑定的基本原则" class="headerlink" title="数据绑定的基本原则"></a><strong>数据绑定的基本原则</strong></h3><ol><li>在 data 中定义数据</li><li>在 WXML 中使用数据</li></ol></li><li><h3 id="在-data-中定义页面的数据"><a href="#在-data-中定义页面的数据" class="headerlink" title="在 data 中定义页面的数据"></a><strong>在 data 中定义页面的数据</strong></h3><ol><li><p>在页面对应的 .js 文件中，把数据定义到 data 对象中即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    info: &#x27;hello world&#x27;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="Mustache-语法的格式"><a href="#Mustache-语法的格式" class="headerlink" title="Mustache 语法的格式"></a><strong>Mustache 语法的格式</strong></h3><ol><li><p>把data中的数据绑定到页面中渲染，使用 <strong>Mustache 语法</strong>（双大括号）将变量包起来即可。语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;数据名称&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="Mustache-语法的应用场景"><a href="#Mustache-语法的应用场景" class="headerlink" title="Mustache 语法的应用场景"></a><strong>Mustache 语法的应用场景</strong></h3><ol><li>Mustache 语法的主要应用场景如下：<ul><li>绑定内容</li><li>绑定属性</li><li>运算（三元运算、算术运算等）</li></ul></li></ol></li><li><h3 id="动态绑定内容"><a href="#动态绑定内容" class="headerlink" title="动态绑定内容"></a><strong>动态绑定内容</strong></h3><ol><li><p>页面的数据如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">data: &#123;</span><br><span class="line">info: &#x27;init data&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>页面的结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123; info &#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="动态绑定属性"><a href="#动态绑定属性" class="headerlink" title="动态绑定属性"></a><strong>动态绑定属性</strong></h3><ol><li><p>页面的数据如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">data: &#123;</span><br><span class="line">imgSrc: &#x27;http://www.itheima.com/images/1.png&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>页面的结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;image src=&quot;&#123;&#123;imgSrc&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a><strong>三元运算</strong></h3><ol><li><p>页面的数据如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">data: &#123;</span><br><span class="line">randomNum1: Math.random() * 10 //生成10以内的随机数</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>页面的结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;randomNum1 &gt;=5 ? &#x27;数字大于5&#x27; : &#x27;数字小于5&#x27;&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a><strong>算数运算</strong></h3><ol><li><p>页面的数据如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">data: &#123;</span><br><span class="line">randomNum1: Math.random().toFixed(2)//生成带两位小数的随机数 如：0.45</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>页面的结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;&#123;&#123;randomNum2 * 100&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a><strong>事件绑定</strong></h2><ol><li><h3 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a><strong>什么是事件</strong></h3><p>事件是渲染层到逻辑层的通讯方式。通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理。</p></li><li><h3 id="小程序中常用的事件"><a href="#小程序中常用的事件" class="headerlink" title="小程序中常用的事件"></a><strong>小程序中常用的事件</strong></h3><table><thead><tr><th>类型</th><th>绑定方式</th><th>事件描述</th></tr></thead><tbody><tr><td>tap</td><td>bindtap 或 bind:tap</td><td>手指触摸后马上离开，类似于 HTML 中的 click 事件</td></tr><tr><td>input</td><td>bindinput 或 bind:input</td><td>文本框的输入事件</td></tr><tr><td>change</td><td>bindchange 或 bind:change</td><td>状态改变时触发</td></tr></tbody></table></li><li><h3 id="事件对象的属性列表"><a href="#事件对象的属性列表" class="headerlink" title="事件对象的属性列表"></a><strong>事件对象的属性列表</strong></h3><ol><li>当事件回调触发的时候，会收到一个事件对象 event，它的详细属性如下表所示：</li></ol><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>String</td><td>事件类型</td></tr><tr><td>timeStamp</td><td>Integer</td><td>页面打开到触发事件所经过的毫秒数</td></tr><tr><td>target</td><td>Object</td><td>触发事件的组件的一些属性值集合</td></tr><tr><td>currentTarget</td><td>Object</td><td>当前组件的一些属性值集合</td></tr><tr><td>detail</td><td>Object</td><td>额外的信息</td></tr><tr><td>touches</td><td>Array</td><td>触摸事件，当前停留在屏幕中的触摸点信息的数组</td></tr><tr><td>changedTouches</td><td>Array</td><td>触摸事件，当前变化的触摸点信息的数组</td></tr></tbody></table></li><li><h3 id="target-和-currentTarget-的区别"><a href="#target-和-currentTarget-的区别" class="headerlink" title="target 和 currentTarget 的区别"></a><strong>target 和 currentTarget 的区别</strong></h3><ol><li><p>target 是触发该事件的源头组件，而 currentTarget 则是当前事件所绑定的组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;outer-view&quot; bindtap=&quot;outerHandler&quot;&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot;&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="bindtap-的语法格式"><a href="#bindtap-的语法格式" class="headerlink" title="bindtap 的语法格式"></a><strong>bindtap 的语法格式</strong></h3><ul><li><p>在小程序中，不存在 HTML 中的 onclick 鼠标点击事件，而是通过 tap 事件来响应用户的触摸行为。</p><ol><li><p>通过 bindtap，可以为组件绑定 tap 触摸事件，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;btnTapHandler&quot;&gt;按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><p>在页面的 .js 文件中定义对应的事件处理函数，事件参数通过形参 event（一般简写成 e） 来接收：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btnTapHandler(e)&#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><h3 id="在事件处理函数中为-data-中的数据赋值"><a href="#在事件处理函数中为-data-中的数据赋值" class="headerlink" title="在事件处理函数中为 data 中的数据赋值"></a><strong>在事件处理函数中为 data 中的数据赋值</strong></h3><ul><li><p>通过调用 this.setData(dataObject) 方法，可以给页面 data 中的数据重新赋值</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">page(&#123;</span><br><span class="line">data: &#123;</span><br><span class="line">count: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">CountChange()&#123;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        count: this.data.count +1</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a><strong>事件传参</strong></h3><ul><li><p>小程序中的事件传参比较特殊，不能在绑定事件的同时为事件处理函数传递参数。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;btnTapHandler(123)&quot;&gt;事件传参&lt;/button&gt;</span><br></pre></td></tr></table></figure><ul><li>因为小程序会把 bindtap 的属性值，统一当作事件名称来处理，相当于要调用一个名称为 btnHandler(123) 的事件处理函数。</li></ul></li><li><p>可以为组件提供 data-* 自定义属性传参，其中 * 代表的是参数的名字</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;btnTapHand&quot; data-info=&quot;&#123;&#123;2&#125;&#125;&quot;&gt;事件传参&lt;/button&gt;</span><br><span class="line">&lt;!-没有&#123;&#123;&#125;&#125;将传递的是字符串不是值-&gt;</span><br></pre></td></tr></table></figure><ul><li>最终<ul><li>info 会被解析为参数的名字</li><li>数值 2 会被解析为参数的值</li></ul></li></ul></li><li><p>在事件处理函数中，通过 event.target.dataset.参数名 即可获取到具体参数的值</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">btnTapHand(event)&#123;</span><br><span class="line">console.log(event.target.dataset)</span><br><span class="line">    console.log(event.target.dataset.info)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ul></li><li><h3 id="bindinput-的语法格式"><a href="#bindinput-的语法格式" class="headerlink" title="bindinput 的语法格式"></a><strong>bindinput 的语法格式</strong></h3><ul><li><p>在小程序中，通过 input 事件来响应文本框的输入事件</p><ol><li><p>通过 bindinput，可以为文本框绑定输入事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input bindinput=&quot;inputHandler&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>在页面的 .js 文件中定义事件处理函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputHandler(e)&#123;</span><br><span class="line">    console.log(e.detail.value)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><h3 id="实现文本框和-data-之间的数据同步"><a href="#实现文本框和-data-之间的数据同步" class="headerlink" title="实现文本框和 data 之间的数据同步"></a><strong>实现文本框和 data 之间的数据同步</strong></h3><ol><li><p>实现步骤</p><ol><li><p>定义数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pages(&#123;</span><br><span class="line">data: &#123;</span><br><span class="line">msg: &quot;你好&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>渲染结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&quot;&#123;&#123;msg&#125;&#125;&quot; bindinput=&quot;iptHandler&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>美化样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">  border: 1px solid #eee;</span><br><span class="line">  padding: 5px;</span><br><span class="line">  margin: 5px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>绑定 input 事件处理函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptHandler(e)&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      msg: e.detail.value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><ol><li><p><strong>wx:if</strong></p><ol><li><p>在小程序中，使用 wx:if&#x3D;”“ 来判断是否需要渲染该代码块：</p></li><li><p>也可以用 wx:elif 和 wx:else 来添加 else 判断：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;type == 1&#125;&#125;&quot;&gt;男&lt;/view&gt;</span><br><span class="line">&lt;view wx:elif=&quot;&#123;&#123;type == 2&#125;&#125;&quot;&gt;女&lt;/view&gt;</span><br><span class="line">&lt;view wx:else=&quot;&#123;&#123;type == 3&#125;&#125;&quot;&gt;不清楚&lt;/view&gt;</span><br></pre></td></tr></table></figure><ul><li>&#x3D;&#x3D;&#x3D; 为数据类型和数值都相等</li></ul></li><li><p><strong>结合 &lt;block&gt; 使用 wx:if</strong></p><ol><li>如果要一次性控制多个组件的展示与隐藏，可以使用一个 &lt;block&gt;&lt;&#x2F;block&gt; 标签将多个组件包装起来，并在&lt;block&gt; 标签上使用 wx:if 控制属性</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;block wx:if=&quot;&#123;&#123;true&#125;&#125;&quot;&gt;</span><br><span class="line">&lt;view&gt;view1&lt;/view&gt;</span><br><span class="line">&lt;view&gt;view2&lt;/view&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure><ul><li>注意：&lt;block&gt; 并不是一个组件，它只是一个包裹性质的容器，不会在页面中做任何渲染。</li></ul></li><li><p><strong>hidden</strong></p><ol><li>在小程序中，直接使用 hidden&#x3D;”“ 也能控制元素的显示与隐藏：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view hidden=&quot;&#123;&#123;flag&#125;&#125;&quot;&gt;条件为true隐藏，条件为flase显示&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>wx:if 与 hidden 的对比</strong></p><ol><li>运行方式不同</li><li>wx:if 以动态创建和移除元素的方式，控制元素的展示与隐藏</li><li>hidden 以切换样式的方式（display: none&#x2F;block;），控制元素的显示与隐藏</li></ol></li><li><p>使用建议</p><ul><li>频繁切换时，建议使用 hidden</li><li>控制条件复杂时，建议使用 wx:if 搭配 wx:elif、wx:else 进行展示与隐藏的切换</li></ul></li></ol></li><li><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><ol><li><p><strong>wx：for</strong></p><ul><li><p>通过wx:for可以根据指定数组，循环渲染重复的组件结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar1:[&#x27;苹果&#x27;,&#x27;华为&#x27;,&#x27;小米&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;ar1&#125;&#125;&quot;&gt;</span><br><span class="line">  索引是：&#123;&#123;index&#125;&#125; ,item项:&#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><ul><li>默认情况下，当前循环项的索引用 index 表示；当前循环项用 item 表示。</li></ul></li></ul></li><li><p><strong>手动指定索引和当前项的变量名*</strong></p><ul><li>使用 wx:for-index 可以指定当前循环项的索引的变量名</li><li>使用 wx:for-item 可以指定当前项的变量名</li></ul></li><li><p><strong>wx:key 的使用</strong></p></li><li><p>类似于 Vue 列表渲染中的 <strong>:key</strong>，小程序在实现列表渲染时，也建议为渲染出来的列表项指定唯一的 key 值，从而提高渲染的效率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">userList: [</span><br><span class="line">      &#123;id: 1,name: &#x27;小马&#x27;&#125;,</span><br><span class="line">      &#123;id: 2,name: &#x27;小隋&#x27;&#125;,</span><br><span class="line">      &#123;id: 3,name: &#x27;小田&#x27;&#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;userList&#125;&#125;&quot; wx:key=&quot;id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="WXSS模板样式"><a href="#WXSS模板样式" class="headerlink" title="WXSS模板样式"></a>WXSS模板样式</h1><ol><li><h3 id="什么是WXSS"><a href="#什么是WXSS" class="headerlink" title="什么是WXSS"></a>什么是WXSS</h3><ul><li>WXSS (WeiXin Style Sheets)是一套样式语言，用于美化 WXML 的组件样式，类似于网页开发中的 CSS。</li></ul></li><li><h3 id="WXSS-和-CSS-的关系"><a href="#WXSS-和-CSS-的关系" class="headerlink" title="WXSS 和 CSS 的关系"></a><strong>WXSS 和 CSS 的关系</strong></h3><ul><li>WXSS 具有 CSS 大部分特性，同时，WXSS 还对 CSS 进行了扩充以及修改，以适应微信小程序的开发。与 CSS 相比，WXSS 扩展的特性有：<ul><li>rpx 尺寸单位</li><li>@import 样式导入</li></ul></li></ul></li></ol><h2 id="rpx"><a href="#rpx" class="headerlink" title="rpx"></a>rpx</h2><ol><li><h3 id="什么是-rpx-尺寸单位"><a href="#什么是-rpx-尺寸单位" class="headerlink" title="什么是 rpx 尺寸单位"></a><strong>什么是 rpx 尺寸单位</strong></h3><ul><li>rpx（responsive pixel）是微信小程序独有的，用来解决屏适配的尺寸单位。</li></ul></li><li><h3 id="rpx-的实现原理"><a href="#rpx-的实现原理" class="headerlink" title="rpx 的实现原理"></a><strong>rpx 的实现原理</strong></h3><p>rpx 的实现原理非常简单：鉴于不同设备屏幕的大小不同，为了实现屏幕的自动适配，rpx 把所有设备的屏幕，在宽度上等分为 750 份（即：当前屏幕的总宽度为 750rpx）。</p><ul><li>在较小的设备上，1rpx 所代表的宽度较小</li><li>在较大的设备上，1rpx 所代表的宽度较大</li></ul><p>小程序在不同设备上运行的时候，会自动把 rpx 的样式单位换算成对应的像素单位来渲染，从而实现屏幕适配。</p></li><li><h3 id="rpx-与-px-之间的单位换算"><a href="#rpx-与-px-之间的单位换算" class="headerlink" title="rpx 与 px 之间的单位换算*"></a><strong>rpx 与 px 之间的单位换算*</strong></h3><ol><li><p>在 iPhone6 上，屏幕宽度为375px，共有 750 个物理像素，等分为 750rpx。则：</p><p>750rpx &#x3D; 375px &#x3D; 750 物理像素</p><p>1rpx &#x3D; 0.5px &#x3D; 1物理像素</p></li><li><p>官方建议：开发微信小程序时，设计师可以用 iPhone6 作为视觉稿的标准。</p><p>开发举例：在 iPhone6 上如果要绘制宽100px，高20px的盒子，换算成rpx单位，宽高分别为 200rpx 和 40rpx。</p></li></ol></li></ol><h2 id="样式导入"><a href="#样式导入" class="headerlink" title="样式导入"></a>样式导入</h2><ol><li><h3 id="什么是样式导入"><a href="#什么是样式导入" class="headerlink" title="什么是样式导入"></a>什么是样式导入</h3><ol><li>使用 WXSS 提供的 @import 语法，可以导入外联的样式表。</li></ol></li><li><h3 id="import的语法样式"><a href="#import的语法样式" class="headerlink" title="@import的语法样式"></a>@import的语法样式</h3><p>@import 后跟需要导入的外联样式表的相对路径，用 ; 表示语句结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.username &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@import &quot;/common/common.wxss&quot;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="全局样式和局部样式"><a href="#全局样式和局部样式" class="headerlink" title="全局样式和局部样式"></a>全局样式和局部样式</h2><ol><li><h3 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a><strong>全局样式</strong></h3><ol><li>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。</li></ol></li><li><h3 id="局部样式"><a href="#局部样式" class="headerlink" title="局部样式"></a><strong>局部样式</strong></h3><ol><li>在页面的 .wxss 文件中定义的样式为局部样式，只作用于当前页面。</li><li>注意<ul><li>当局部样式和全局样式冲突时，根据就近原则，局部样式会覆盖全局样式</li><li>当局部样式和全局样式冲突时，根据就近原则，局部样式会覆盖全局样式</li><li>简单理解选择越详细，权重越高</li></ul></li></ol></li></ol><h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><ol><li><h3 id="全局配置文件及常用的配置项"><a href="#全局配置文件及常用的配置项" class="headerlink" title="全局配置文件及常用的配置项"></a>全局配置文件及常用的配置项</h3><ul><li>小程序根目录下的 app.json 文件是小程序的全局配置文件。常用的配置项如下：<ol><li>pages<ul><li>记录当前小程序所有页面的存放路径</li></ul></li><li>window<ul><li>全局设置小程序窗口的外观</li></ul></li><li>tabBar<ul><li>设置小程序底部的 tabBar 效果</li></ul></li><li>style<ul><li>是否启用新版的组件样式</li></ul></li></ol></li></ul></li></ol><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><ol><li><h3 id="小程序窗口的组成部分"><a href="#小程序窗口的组成部分" class="headerlink" title="小程序窗口的组成部分"></a>小程序窗口的组成部分</h3><ol><li>从上到下为导航栏区，背景区域，页面的主体区域</li><li>window只能配置导航栏区和背景区</li></ol></li><li><h3 id="了解-window-节点常用的配置项"><a href="#了解-window-节点常用的配置项" class="headerlink" title="了解 window 节点常用的配置项"></a><strong>了解 window 节点常用的配置项</strong></h3><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>navigationBarTitleText</td><td>String</td><td>字符串</td><td>导航栏标题文字内容</td></tr><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>导航栏背景颜色，如 #000000</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色，仅支持 black &#x2F; white</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 dark &#x2F; light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否全局开启下拉刷新</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位为px</td></tr></tbody></table></li></ol><p>主页面中app.json中改以上属性</p><h3 id="设置上拉触底的距离"><a href="#设置上拉触底的距离" class="headerlink" title="设置上拉触底的距离"></a><strong>设置上拉触底的距离</strong></h3><ul><li>概念：上拉触底是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而加载更多数据的行为。</li><li>设置步骤： app.json -&gt; window -&gt; 为 onReachBottomDistance 设置新的数值<ul><li>注意：默认距离为50px，如果没有特殊需求，建议使用默认值即可。</li></ul></li></ul><h2 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h2><ol><li><h3 id="什么是-tabBar"><a href="#什么是-tabBar" class="headerlink" title="什么是 tabBar"></a><strong>什么是 tabBar</strong></h3><ol><li><p>tabBar 是移动端应用常见的页面效果，用于实现多页面</p><p>的快速切换。小程序中通常将其分为：</p><ul><li>底部 tabBar</li><li>顶部 tabBar</li></ul></li><li><p>注意</p><ul><li>tabBar中只能配置最少 2 个、最多 5 个 tab 页签</li><li>当渲染顶部 tabBar 时，不显示 icon，只显示文本<ul><li>icon是图标</li></ul></li></ul></li></ol></li><li><h3 id="tabBar-的-6-个组成部分"><a href="#tabBar-的-6-个组成部分" class="headerlink" title="tabBar 的 6 个组成部分"></a><strong>tabBar 的 6 个组成部分</strong></h3><ol><li>backgroundColor：tabBar 的背景色</li><li>selectedIconPath：选中时的图片路径</li><li>borderStyle：tabBar 上边框的颜色</li><li>iconPath：未选中时的图片路径</li><li>selectedColor：tab 上的文字选中时的颜色</li><li>color：tab 上文字的默认（未选中）颜色</li></ol></li><li><h3 id="tabBar-节点的配置项"><a href="#tabBar-节点的配置项" class="headerlink" title="tabBar 节点的配置项"></a><strong>tabBar 节点的配置项</strong></h3><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>tabBar 的位置，仅支持 bottom&#x2F;top</td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabBar 上边框的颜色，仅支持 black&#x2F;white</td></tr><tr><td>color</td><td>HexColor</td><td>否</td><td></td><td>tab 上文字的默认（未选中）颜色</td></tr><tr><td>selectedColor</td><td>HexColor</td><td>否</td><td></td><td>tab 上的文字选中时的颜色</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>否</td><td></td><td>tabBar 的背景色</td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 页签的列表，最少 2 个、最多 5 个 tab</td></tr></tbody></table></li><li><h3 id="每个-tab-项的配置选项"><a href="#每个-tab-项的配置选项" class="headerlink" title="每个 tab 项的配置选项"></a><strong>每个 tab 项的配置选项</strong></h3><table><thead><tr><th><strong>属性</strong></th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，页面必须在 pages 中预先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上显示的文字</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>未选中时的图标路径；当 postion 为 top 时，不显示 icon</td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图标路径；当 postion 为 top 时，不显示 icon</td></tr></tbody></table></li></ol><h2 id="案例：配置-tabBar"><a href="#案例：配置-tabBar" class="headerlink" title="案例：配置 tabBar"></a><strong>案例：配置 tabBar</strong></h2><ol><li><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a><strong>需求描述</strong></h3><ol><li>根据资料中提供的小图标、在小程序中配置如图所示的tabBar 效果：</li></ol></li><li><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a><strong>实现步骤</strong></h3></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/home/home&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/home.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/home-active.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/message/message&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;消息&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/message.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/message-active.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/contact/contact&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;联系我们&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/contact.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/contact-active.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h1><h3 id="页面配置文件的作用"><a href="#页面配置文件的作用" class="headerlink" title="页面配置文件的作用"></a><strong>页面配置文件的作用</strong></h3><p>小程序中，每个页面都有自己的 .json 配置文件，用来对当前页面的窗口外观、页面效果等进行配置。</p><h3 id="页面配置和全局配置的关系"><a href="#页面配置和全局配置的关系" class="headerlink" title="页面配置和全局配置的关系"></a><strong>页面配置和全局配置的关系</strong></h3><p>小程序中，app.json 中的 window 节点，可以全局配置小程序中每个页面的窗口表现。</p><p>如果某些小程序页面想要拥有特殊的窗口表现，此时，“页面级别的 .json 配置文件”就可以实现这种需求。</p><p>注意：当页面配置与全局配置冲突时，根据就近原则，最终的效果以页面配置为准。</p><h3 id="页面配置中常用的配置项"><a href="#页面配置中常用的配置项" class="headerlink" title="页面配置中常用的配置项"></a><strong>页面配置中常用的配置项</strong></h3><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>当前页面导航栏背景颜色，如 #000000</td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>当前页面导航栏标题颜色，仅支持 black &#x2F; white</td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>当前页面导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>当前页面窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>当前页面下拉 loading 的样式，仅支持 dark &#x2F; light</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否为当前页面开启下拉刷新的效果</td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位为 px</td></tr></tbody></table><h1 id="网络数据请求"><a href="#网络数据请求" class="headerlink" title="网络数据请求"></a><strong>网络数据请求</strong></h1><h3 id="小程序中网络数据请求的限制"><a href="#小程序中网络数据请求的限制" class="headerlink" title="小程序中网络数据请求的限制"></a><strong>小程序中网络数据请求的限制</strong></h3><p>出于安全性方面的考虑，小程序官方对数据接口的请求做出了如下</p><p>两个限制：</p><ul><li>只能请求 HTTPS 类型的接口</li><li>必须将接口的域名添加到信任列表中</li></ul><h3 id="配置-request-合法域名"><a href="#配置-request-合法域名" class="headerlink" title="配置 request 合法域名"></a><strong>配置 request 合法域名</strong></h3><p>需求描述：假设在自己的微信小程序中，希望请求 <a href="https://www.escook.cn/">https://www.escook.cn/</a> 域名下的接口</p><p>配置步骤：登录微信小程序管理后台 -&gt; 开发 -&gt; 开发设置 -&gt; 服务器域名 -&gt; 修改 request 合法域名<br>后台：<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com</a></p><p>注意事项：</p><ul><li>域名只支持 https 协议</li><li>域名不能使用 IP 地址或 localhost</li><li>域名必须经过 ICP 备案</li><li>服务器域名一个月内最多可申请 5 次修改</li></ul><h3 id="发起-GET-请求"><a href="#发起-GET-请求" class="headerlink" title="发起 GET 请求"></a><strong>发起 GET 请求</strong></h3><p>调用微信小程序提供的 wx.request() 方法，可以发起 GET 数据请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getInfo() &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">        url: &#x27;https://www.escook.cn/api/get&#x27;,</span><br><span class="line">      method: &#x27;GET&#x27;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        name: &#x27;mhy&#x27;,</span><br><span class="line">        age: &#x27;20&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      success: (res) =&gt; &#123;</span><br><span class="line">        console.log(res.data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="发起-POST-请求"><a href="#发起-POST-请求" class="headerlink" title="发起 POST 请求"></a><strong>发起 POST 请求</strong></h3><p>调用微信小程序提供的 wx.request() 方法，可以发起 POST 数据请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">getInfo() &#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">        url: &#x27;https://www.escook.cn/api/post&#x27;,</span><br><span class="line">      method: &#x27;POST&#x27;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        name: &#x27;mhy&#x27;,</span><br><span class="line">        age: &#x27;20&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      success: (res) =&gt; &#123;</span><br><span class="line">        console.log(res.data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="在页面刚加载时请求数据"><a href="#在页面刚加载时请求数据" class="headerlink" title="在页面刚加载时请求数据"></a><strong>在页面刚加载时请求数据</strong></h3><p>在很多情况下，我们需要在页面刚加载的时候，自动请求一些初始化的数据。此时需要在页面的 onLoad 事件中调用获取数据的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLoad(options) &#123;</span><br><span class="line">    this.getInfo()</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="跳过-request-合法域名校验"><a href="#跳过-request-合法域名校验" class="headerlink" title="跳过 request 合法域名校验"></a><strong>跳过 request 合法域名校验</strong></h3><p>如果后端程序员仅仅提供了 http 协议的接口、暂时没有提供 https </p><p>协议的接口。</p><p>此时为了不耽误开发的进度，我们可以在微信开发者工具中，临时</p><p>开启「开发环境不校验请求域名、TLS 版本及 HTTPS 证书」选项，</p><p>跳过 request 合法域名的校验。</p><p>注意：</p><p>跳过 request 合法域名校验的选项，仅限在开发与调试阶段使用！</p><h3 id="关于跨域和-Ajax说明"><a href="#关于跨域和-Ajax说明" class="headerlink" title="关于跨域和 Ajax说明"></a><strong>关于跨域和 Ajax说明</strong></h3><p>跨域问题只存在于基于浏览器的 Web 开发中。由于小程序的宿主环境不是浏览器，而是微信客户端，所以小</p><p>程序中不存在跨域的问题。</p><p>Ajax 技术的核心是依赖于浏览器中的 XMLHttpRequest 这个对象，由于小程序的宿主环境是微信客户端，所</p><p>以小程序中不能叫做“发起 Ajax 请求”，而是叫做“发起网络数据请求”。</p><h2 id="案例-本地生活"><a href="#案例-本地生活" class="headerlink" title="案例 本地生活"></a>案例 本地生活</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">home.<span class="property">js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">swiperList</span>: [],</span><br><span class="line">        <span class="attr">gridList</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getSwiperList</span>(),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getGridList</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//获取轮播图数据</span></span><br><span class="line">    <span class="title function_">getSwiperList</span>(<span class="params"></span>) &#123;</span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;https://www.escook.cn/slides&#x27;</span>,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">          <span class="attr">success</span>:<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                <span class="attr">swiperList</span>: res.<span class="property">data</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">//获取九宫格数据</span></span><br><span class="line">    <span class="title function_">getGridList</span>(<span class="params"></span>) &#123;</span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;https://www.escook.cn/categories&#x27;</span>,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">          <span class="attr">success</span>:<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(res),</span><br><span class="line">              <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                  <span class="attr">gridList</span>: res.<span class="property">data</span></span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">home.wxml</span><br><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span> <span class="attr">circular</span> <span class="attr">autoplay</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;swiperList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.image&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;grid-list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;gridList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.icon&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;img-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/link-01.png&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/link-02.png&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">home<span class="selector-class">.wxss</span></span><br><span class="line">swiper &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swiper image &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-list</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#efefef</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.33%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200</span>rpx;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span> ;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-item</span> image &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-item</span> text &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24</span>rpx;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img-box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20</span>rpx <span class="number">10</span>rpx;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img-box</span> image &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h1&gt;&lt;p&gt;能够使用 WXML 模板语法渲染页面结构&lt;br&gt;能够使用 WXSS 样式美化页面结构&lt;br&gt;能够使用 app.json 对小</summary>
      
    
    
    
    
    <category term="小程序" scheme="http://example.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>四级词汇26-33串词</title>
    <link href="http://example.com/2022/04/28/%E5%9B%9B%E7%BA%A7%E8%AF%8D%E6%B1%8726-33%E4%B8%B2%E8%AF%8D/"/>
    <id>http://example.com/2022/04/28/%E5%9B%9B%E7%BA%A7%E8%AF%8D%E6%B1%8726-33%E4%B8%B2%E8%AF%8D/</id>
    <published>2022-04-28T07:48:54.000Z</published>
    <updated>2022-05-08T15:18:58.001Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第26串词：sign（书写，记号）"><a href="#第26串词：sign（书写，记号）" class="headerlink" title="第26串词：sign（书写，记号）"></a>第26串词：sign（书写，记号）</h3><h4 id="design-v-设计；构思-n-设计；图案"><a href="#design-v-设计；构思-n-设计；图案" class="headerlink" title="design    v.设计；构思 n.设计；图案"></a>design    v.设计；构思 n.设计；图案</h4><ul><li><h5 id="de-：向下"><a href="#de-：向下" class="headerlink" title="de-：向下"></a>de-：向下</h5></li></ul><h4 id="designer-n-设计师；谋划者"><a href="#designer-n-设计师；谋划者" class="headerlink" title="designer    n.设计师；谋划者"></a>designer    n.设计师；谋划者</h4><h4 id="sign-n-符号；迹象-v-签署；签名"><a href="#sign-n-符号；迹象-v-签署；签名" class="headerlink" title="sign    n.符号；迹象 v.签署；签名"></a>sign    n.符号；迹象 v.签署；签名</h4><ul><li>a sign of stress  紧张的迹象</li></ul><h4 id="signature-n-签名；署名"><a href="#signature-n-签名；署名" class="headerlink" title="signature    n.签名；署名"></a>signature    n.签名；署名</h4><h4 id="signal-n-信号-v-发信号；示意"><a href="#signal-n-信号-v-发信号；示意" class="headerlink" title="signal    n.信号 v.发信号；示意"></a>signal    n.信号 v.发信号；示意</h4><h4 id="significant-adj-有重大意义的"><a href="#significant-adj-有重大意义的" class="headerlink" title="significant    adj.有重大意义的"></a>significant    adj.有重大意义的</h4><h4 id="assign-v-分配；指派"><a href="#assign-v-分配；指派" class="headerlink" title="assign    v.分配；指派"></a>assign    v.分配；指派</h4><ul><li><h5 id="as-：去"><a href="#as-：去" class="headerlink" title="as-：去"></a>as-：去</h5></li></ul><h4 id="assignment-n-任务；分派"><a href="#assignment-n-任务；分派" class="headerlink" title="assignment    n.任务；分派"></a>assignment    n.任务；分派</h4><h4 id="resign-v-辞职"><a href="#resign-v-辞职" class="headerlink" title="resign    v.辞职"></a>resign    v.辞职</h4><h3 id="第27串词：lat（to-carry-带来，携带）"><a href="#第27串词：lat（to-carry-带来，携带）" class="headerlink" title="第27串词：lat（to carry 带来，携带）"></a>第27串词：lat（to carry 带来，携带）</h3><h4 id="relate-v-联系"><a href="#relate-v-联系" class="headerlink" title="relate    v.联系"></a>relate    v.联系</h4><ul><li>relate A to B &#x3D; A is related to B  把A和B联系起来</li></ul><h4 id="relatively-adj-相比较而言-n-亲戚"><a href="#relatively-adj-相比较而言-n-亲戚" class="headerlink" title="relatively    adj.相比较而言 n.亲戚"></a>relatively    adj.相比较而言 n.亲戚</h4><h4 id="relatively-adv-相当程度上；相较而言地"><a href="#relatively-adv-相当程度上；相较而言地" class="headerlink" title="relatively    adv.相当程度上；相较而言地"></a>relatively    adv.相当程度上；相较而言地</h4><h4 id="relation-n-关系；联系；关联（形式的连接）"><a href="#relation-n-关系；联系；关联（形式的连接）" class="headerlink" title="relation    n.关系；联系；关联（形式的连接）"></a>relation    n.关系；联系；关联（形式的连接）</h4><h4 id="relationship-n-联系；关系；爱情关系（密切的联系）"><a href="#relationship-n-联系；关系；爱情关系（密切的联系）" class="headerlink" title="relationship    n.联系；关系；爱情关系（密切的联系）"></a>relationship    n.联系；关系；爱情关系（密切的联系）</h4><h4 id="relevant-adj-密切相关的；切题的"><a href="#relevant-adj-密切相关的；切题的" class="headerlink" title="relevant    adj.密切相关的；切题的"></a>relevant    adj.密切相关的；切题的</h4><h3 id="第28串词：ject（throw投掷）"><a href="#第28串词：ject（throw投掷）" class="headerlink" title="第28串词：ject（throw投掷）"></a>第28串词：ject（throw投掷）</h3><h4 id="subject-n-主题；试验对象-adj-服从的；易患的-v-使屈服于"><a href="#subject-n-主题；试验对象-adj-服从的；易患的-v-使屈服于" class="headerlink" title="subject    n.主题；试验对象    adj.服从的；易患的    v.使屈服于"></a>subject    n.主题；试验对象    adj.服从的；易患的    v.使屈服于</h4><h4 id="subjective-adj-主观的"><a href="#subjective-adj-主观的" class="headerlink" title="subjective    adj.主观的"></a>subjective    adj.主观的</h4><h4 id="project-n-项目；方案-v-发射；预测；展示；放大"><a href="#project-n-项目；方案-v-发射；预测；展示；放大" class="headerlink" title="project    n.项目；方案   v.发射；预测；展示；放大"></a>project    n.项目；方案   v.发射；预测；展示；放大</h4><h4 id="projector-n-放映机；投影仪"><a href="#projector-n-放映机；投影仪" class="headerlink" title="projector    n.放映机；投影仪"></a>projector    n.放映机；投影仪</h4><h4 id="object-n-物体；目标-v-反对"><a href="#object-n-物体；目标-v-反对" class="headerlink" title="object    n.物体；目标   v.反对"></a>object    n.物体；目标   v.反对</h4><ul><li><h5 id="ob-x3D-op：相反"><a href="#ob-x3D-op：相反" class="headerlink" title="ob&#x3D;op：相反"></a>ob&#x3D;op：相反</h5></li><li><p>goal 目标</p></li></ul><h4 id="objective-n-目标；目的-adj-客观的"><a href="#objective-n-目标；目的-adj-客观的" class="headerlink" title="objective    n.目标；目的  adj.客观的"></a>objective    n.目标；目的  adj.客观的</h4><h4 id="reject-v-拒绝；抵制；丢弃"><a href="#reject-v-拒绝；抵制；丢弃" class="headerlink" title="reject    v.拒绝；抵制；丢弃"></a>reject    v.拒绝；抵制；丢弃</h4><h3 id="第29串词：spect-to-see-to-look-看"><a href="#第29串词：spect-to-see-to-look-看" class="headerlink" title="第29串词：spect(to see, to look 看)"></a>第29串词：spect(to see, to look 看)</h3><h4 id="expect-v-预料；预期"><a href="#expect-v-预料；预期" class="headerlink" title="expect    v.预料；预期"></a>expect    v.预料；预期</h4><ul><li><h5 id="ex-x3D-out"><a href="#ex-x3D-out" class="headerlink" title="ex- &#x3D; out"></a>ex- &#x3D; out</h5></li></ul><h4 id="expectation-n-预期；期待"><a href="#expectation-n-预期；期待" class="headerlink" title="expectation    n.预期；期待"></a>expectation    n.预期；期待</h4><h4 id="unexpect-adj-出乎意料的"><a href="#unexpect-adj-出乎意料的" class="headerlink" title="unexpect    adj.出乎意料的"></a>unexpect    adj.出乎意料的</h4><h4 id="respect-v-尊敬；尊重"><a href="#respect-v-尊敬；尊重" class="headerlink" title="respect    v.尊敬；尊重"></a>respect    v.尊敬；尊重</h4><h4 id="respectful-adj-尊重的，有礼貌的"><a href="#respectful-adj-尊重的，有礼貌的" class="headerlink" title="respectful    adj.尊重的，有礼貌的"></a>respectful    adj.尊重的，有礼貌的</h4><ul><li><h5 id="ful-：主动的-主动尊敬"><a href="#ful-：主动的-主动尊敬" class="headerlink" title="-ful ：主动的 主动尊敬"></a>-ful ：主动的 主动尊敬</h5></li></ul><h4 id="respectable-adj-得体的；值得尊重的"><a href="#respectable-adj-得体的；值得尊重的" class="headerlink" title="respectable    adj.得体的；值得尊重的"></a>respectable    adj.得体的；值得尊重的</h4><ul><li><h5 id="able：被动的-被尊敬的"><a href="#able：被动的-被尊敬的" class="headerlink" title="-able：被动的 被尊敬的"></a>-able：被动的 被尊敬的</h5></li></ul><h4 id="respectively-adv-分别；各自"><a href="#respectively-adv-分别；各自" class="headerlink" title="respectively    adv.分别；各自"></a>respectively    adv.分别；各自</h4><h4 id="prospect-n-前途；预期；景色"><a href="#prospect-n-前途；预期；景色" class="headerlink" title="prospect    n.前途；预期；景色"></a>prospect    n.前途；预期；景色</h4><ul><li><h5 id="pro-x3D-向前"><a href="#pro-x3D-向前" class="headerlink" title="pro- &#x3D; 向前"></a>pro- &#x3D; 向前</h5></li></ul><h4 id="suspect-n-嫌疑犯-v-怀疑；猜想"><a href="#suspect-n-嫌疑犯-v-怀疑；猜想" class="headerlink" title="suspect    n.嫌疑犯    v.怀疑；猜想"></a>suspect    n.嫌疑犯    v.怀疑；猜想</h4><ul><li><h5 id="su-x3D-under"><a href="#su-x3D-under" class="headerlink" title="su- &#x3D; under"></a>su- &#x3D; under</h5></li></ul><h4 id="aspect-n-方面；外貌"><a href="#aspect-n-方面；外貌" class="headerlink" title="aspect    n.方面；外貌"></a>aspect    n.方面；外貌</h4><ul><li><h5 id="as-x3D-朝着"><a href="#as-x3D-朝着" class="headerlink" title="as- &#x3D; 朝着"></a>as- &#x3D; 朝着</h5></li></ul><h4 id="perspective-n-观点，远景"><a href="#perspective-n-观点，远景" class="headerlink" title="perspective    n.观点，远景"></a>perspective    n.观点，远景</h4><ul><li><h5 id="per-x3D-彻底"><a href="#per-x3D-彻底" class="headerlink" title="per- &#x3D; 彻底"></a>per- &#x3D; 彻底</h5></li></ul><h3 id="第30串词：mun（munl）-x3D-公共的"><a href="#第30串词：mun（munl）-x3D-公共的" class="headerlink" title="第30串词：mun（munl）&#x3D; 公共的"></a>第30串词：mun（munl）&#x3D; 公共的</h3><h4 id="community-n-社区；团体"><a href="#community-n-社区；团体" class="headerlink" title="community    n.社区；团体"></a>community    n.社区；团体</h4><h4 id="immune-adj-免疫的；免除的"><a href="#immune-adj-免疫的；免除的" class="headerlink" title="immune    adj.免疫的；免除的"></a>immune    adj.免疫的；免除的</h4><ul><li><h5 id="im-x3D-in-x3D-否定"><a href="#im-x3D-in-x3D-否定" class="headerlink" title="im &#x3D; in &#x3D; 否定"></a>im &#x3D; in &#x3D; 否定</h5></li></ul><h4 id="immunity-n-免疫力；免除"><a href="#immunity-n-免疫力；免除" class="headerlink" title="immunity    n.免疫力；免除"></a>immunity    n.免疫力；免除</h4><h4 id="communicate-v-沟通"><a href="#communicate-v-沟通" class="headerlink" title="communicate    v.沟通"></a>communicate    v.沟通</h4><h4 id="communication-n-交流"><a href="#communication-n-交流" class="headerlink" title="communication    n.交流"></a>communication    n.交流</h4><h3 id="第31串词：ploy（折叠，引申为“繁忙”）"><a href="#第31串词：ploy（折叠，引申为“繁忙”）" class="headerlink" title="第31串词：ploy（折叠，引申为“繁忙”）"></a>第31串词：ploy（折叠，引申为“繁忙”）</h3><h4 id="employ-v-雇主；运用"><a href="#employ-v-雇主；运用" class="headerlink" title="employ    v.雇主；运用"></a>employ    v.雇主；运用</h4><ul><li><h5 id="em-：使得"><a href="#em-：使得" class="headerlink" title="em-：使得"></a>em-：使得</h5></li></ul><h4 id="employee-n-雇员"><a href="#employee-n-雇员" class="headerlink" title="employee    n.雇员"></a>employee    n.雇员</h4><h4 id="employer-n-雇主"><a href="#employer-n-雇主" class="headerlink" title="employer    n.雇主"></a>employer    n.雇主</h4><h4 id="employment-n-受雇；就业"><a href="#employment-n-受雇；就业" class="headerlink" title="employment    n.受雇；就业"></a>employment    n.受雇；就业</h4><h4 id="unemployed-adj-就业的"><a href="#unemployed-adj-就业的" class="headerlink" title="unemployed    adj.就业的"></a>unemployed    adj.就业的</h4><h4 id="unemployment-n-失业"><a href="#unemployment-n-失业" class="headerlink" title="unemployment    n.失业"></a>unemployment    n.失业</h4><h3 id="第32串词：max"><a href="#第32串词：max" class="headerlink" title="第32串词：max"></a>第32串词：max</h3><h4 id="major-adj-主要的；主修的-n-主修科目-v-主修"><a href="#major-adj-主要的；主修的-n-主修科目-v-主修" class="headerlink" title="major    adj.主要的；主修的 n.主修科目 v.主修"></a>major    adj.主要的；主修的 n.主修科目 v.主修</h4><h4 id="majority-n-多数"><a href="#majority-n-多数" class="headerlink" title="majority    n.多数"></a>majority    n.多数</h4><h4 id="mass-n-块；群众；大量；质量-adj-大规模的"><a href="#mass-n-块；群众；大量；质量-adj-大规模的" class="headerlink" title="mass    n.块；群众；大量；质量 adj.大规模的"></a>mass    n.块；群众；大量；质量 adj.大规模的</h4><h4 id="massive-adj-巨大的"><a href="#massive-adj-巨大的" class="headerlink" title="massive    adj.巨大的"></a>massive    adj.巨大的</h4><h4 id="maximum-n-最大限度；最大量"><a href="#maximum-n-最大限度；最大量" class="headerlink" title="maximum    n.最大限度；最大量"></a>maximum    n.最大限度；最大量</h4><h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><h4 id="mini-n-迷你型-adj-微型的；袖珍"><a href="#mini-n-迷你型-adj-微型的；袖珍" class="headerlink" title="mini    n.迷你型 adj.微型的；袖珍"></a>mini    n.迷你型 adj.微型的；袖珍</h4><h4 id="minute-n-分钟；片刻-adj-微小的；细微的（extremely-small-非常非常非常小）"><a href="#minute-n-分钟；片刻-adj-微小的；细微的（extremely-small-非常非常非常小）" class="headerlink" title="minute    n.分钟；片刻    adj.微小的；细微的（extremely small 非常非常非常小）"></a>minute    n.分钟；片刻    adj.微小的；细微的（extremely small 非常非常非常小）</h4><h4 id="minor-adj-次要的；轻微的-n-未成年人；辅修科目"><a href="#minor-adj-次要的；轻微的-n-未成年人；辅修科目" class="headerlink" title="minor    adj.次要的；轻微的 n.未成年人；辅修科目"></a>minor    adj.次要的；轻微的 n.未成年人；辅修科目</h4><h4 id="minority-n-少数；少数民族；未成年"><a href="#minority-n-少数；少数民族；未成年" class="headerlink" title="minority    n.少数；少数民族；未成年"></a>minority    n.少数；少数民族；未成年</h4><h4 id="minimum-n-最低限度"><a href="#minimum-n-最低限度" class="headerlink" title="minimum    n.最低限度"></a>minimum    n.最低限度</h4><h3 id="第33串词：volv（to-roll-转到，to-turn-翻转）"><a href="#第33串词：volv（to-roll-转到，to-turn-翻转）" class="headerlink" title="第33串词：volv（to roll 转到，to turn 翻转）"></a>第33串词：volv（to roll 转到，to turn 翻转）</h3><h4 id="involve-v-包含；卷入；参与"><a href="#involve-v-包含；卷入；参与" class="headerlink" title="involve    v.包含；卷入；参与"></a>involve    v.包含；卷入；参与</h4><ul><li>involution    内卷</li></ul><h4 id="involvement-n-参与；恋爱"><a href="#involvement-n-参与；恋爱" class="headerlink" title="involvement    n.参与；恋爱"></a>involvement    n.参与；恋爱</h4><h4 id="evolve-v-发展；进化（-x3D-develop）"><a href="#evolve-v-发展；进化（-x3D-develop）" class="headerlink" title="evolve    v.发展；进化（&#x3D;develop）"></a>evolve    v.发展；进化（&#x3D;develop）</h4><ul><li><h5 id="e-；out"><a href="#e-；out" class="headerlink" title="e-  ；out"></a>e-  ；out</h5></li></ul><h4 id="evolutionary-adj-进化的；演变的"><a href="#evolutionary-adj-进化的；演变的" class="headerlink" title="evolutionary    adj.进化的；演变的"></a>evolutionary    adj.进化的；演变的</h4><h4 id="revolution-n-革命"><a href="#revolution-n-革命" class="headerlink" title="revolution    n.革命"></a>revolution    n.革命</h4><h4 id="revolutionary-adj-革命的"><a href="#revolutionary-adj-革命的" class="headerlink" title="revolutionary    adj.革命的"></a>revolutionary    adj.革命的</h4><h4 id="volume-n-容量；体积；音量；卷，册"><a href="#volume-n-容量；体积；音量；卷，册" class="headerlink" title="volume    n.容量；体积；音量；卷，册"></a>volume    n.容量；体积；音量；卷，册</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第26串词：sign（书写，记号）&quot;&gt;&lt;a href=&quot;#第26串词：sign（书写，记号）&quot; class=&quot;headerlink&quot; title=&quot;第26串词：sign（书写，记号）&quot;&gt;&lt;/a&gt;第26串词：sign（书写，记号）&lt;/h3&gt;&lt;h4 id=&quot;desig</summary>
      
    
    
    
    
    <category term="英语四级" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序入门</title>
    <link href="http://example.com/2022/04/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/04/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8/</id>
    <published>2022-04-28T02:51:04.000Z</published>
    <updated>2022-04-29T06:03:09.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序简介"><a href="#小程序简介" class="headerlink" title="小程序简介"></a>小程序简介</h2><h2 id="1-小程序与普通网页开发的区别"><a href="#1-小程序与普通网页开发的区别" class="headerlink" title="1.小程序与普通网页开发的区别"></a>1.小程序与普通网页开发的区别</h2><ol><li><h3 id="运行环境不同"><a href="#运行环境不同" class="headerlink" title="运行环境不同"></a>运行环境不同</h3><ol><li>网页运行在浏览器环境中</li><li>小程序运行在微信环境中</li></ol></li><li><h3 id="API不同"><a href="#API不同" class="headerlink" title="API不同"></a>API不同</h3><ol><li><p>由于运行环境的不同，所以小程序中，无法调用 DOM 和 BOM 的 API。</p></li><li><p>但是，小程序中可以调用微信环境提供</p><p>的各种 API，例如：</p><ul><li>地理定位</li><li>扫码</li><li>支付</li></ul></li></ol></li><li><h3 id="开发模式不同"><a href="#开发模式不同" class="headerlink" title="开发模式不同"></a>开发模式不同</h3><ol><li><p>网页的开发模式：浏览器 + 代码编辑器</p><p>小程序有自己的一套标准开发模式：</p><ul><li>申请小程序开发账号</li><li>安装小程序开发者工具</li><li>创建和配置小程序项目</li></ul></li></ol></li></ol><h2 id="第一个小程序-注册小程序开发帐号"><a href="#第一个小程序-注册小程序开发帐号" class="headerlink" title="第一个小程序 - 注册小程序开发帐号"></a><strong>第一个小程序 -</strong> <strong>注册小程序开发帐号</strong></h2><ol><li><h3 id="点击注册按钮"><a href="#点击注册按钮" class="headerlink" title="点击注册按钮"></a><strong>点击注册按钮</strong></h3><ul><li>使用浏览器打开 <a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a> 网址，点击右上角的“<strong>立即注册</strong>”即可进入到小程序开发账号的注册流程</li></ul></li><li><h3 id="选择注册账号的类型"><a href="#选择注册账号的类型" class="headerlink" title="选择注册账号的类型"></a><strong>选择注册账号的类型</strong></h3></li><li><h3 id="填写账号信息"><a href="#填写账号信息" class="headerlink" title="填写账号信息"></a><strong>填写账号信息</strong></h3></li><li><h3 id="提示邮箱激活"><a href="#提示邮箱激活" class="headerlink" title="提示邮箱激活"></a><strong>提示邮箱激活</strong></h3></li><li><h3 id="点击链接激活账号"><a href="#点击链接激活账号" class="headerlink" title="点击链接激活账号"></a><strong>点击链接激活账号</strong></h3></li><li><h3 id="选择主体类型"><a href="#选择主体类型" class="headerlink" title="选择主体类型"></a><strong>选择主体类型</strong></h3></li><li><h3 id="主体信息登记"><a href="#主体信息登记" class="headerlink" title="主体信息登记"></a><strong>主体信息登记</strong></h3></li><li><h3 id="获取小程序的-AppID"><a href="#获取小程序的-AppID" class="headerlink" title="获取小程序的 AppID"></a><strong>获取小程序的 AppID</strong></h3><ul><li>点击开发设置</li></ul></li></ol><h2 id="安装开发者工具"><a href="#安装开发者工具" class="headerlink" title="安装开发者工具"></a><strong>安装开发者工具</strong></h2><ol><li><h3 id="了解微信开发者工具"><a href="#了解微信开发者工具" class="headerlink" title="了解微信开发者工具"></a><strong>了解微信开发者工具</strong></h3><ol><li>主要功能<ul><li>快速创建小程序项目</li><li>代码的查看和编辑</li><li>对小程序功能进行调试</li><li>小程序的预览和发布</li></ul></li></ol></li><li><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a><strong>下载</strong></h3><p>推荐下载和安装最新的稳定版（Stable Build）的微信开发者工具，下载页面的链接如下：</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</a></p></li><li><h3 id="设置外观和代理"><a href="#设置外观和代理" class="headerlink" title="设置外观和代理"></a><strong>设置外观和代理</strong></h3></li></ol><h2 id="创建小程序项目"><a href="#创建小程序项目" class="headerlink" title="创建小程序项目"></a><strong>创建小程序项目</strong></h2><ol><li><h3 id="点击“加号”按钮"><a href="#点击“加号”按钮" class="headerlink" title="点击“加号”按钮"></a><strong>点击“加号”按钮</strong></h3></li><li><h3 id="填写项目信息"><a href="#填写项目信息" class="headerlink" title="填写项目信息"></a><strong>填写项目信息</strong></h3></li><li><h3 id="项目创建完成"><a href="#项目创建完成" class="headerlink" title="项目创建完成"></a><strong>项目创建完成</strong></h3></li><li><h3 id="在模拟器上查看项目效果"><a href="#在模拟器上查看项目效果" class="headerlink" title="在模拟器上查看项目效果"></a><strong>在模拟器上查看项目效果</strong></h3></li><li><h3 id="在真机上预览项目效果"><a href="#在真机上预览项目效果" class="headerlink" title="在真机上预览项目效果"></a><strong>在真机上预览项目效果</strong></h3></li><li><h3 id="主界面的-5-个组成部分"><a href="#主界面的-5-个组成部分" class="headerlink" title="主界面的 5 个组成部分"></a><strong>主界面的 5 个组成部分</strong></h3></li></ol><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a><strong>项目结构</strong></h2><ol><li><h3 id="了解项目的基本组成结构"><a href="#了解项目的基本组成结构" class="headerlink" title="了解项目的基本组成结构"></a><strong>了解项目的基本组成结构</strong></h3><ul><li>pages 用来存放所有小程序的页面</li><li>utils 用来存放工具性质的模块（例如：格式化时间的自定义模块）</li><li>app.js 小程序项目的入口文件</li><li>app.wxss 小程序项目的全局样式文件</li><li>project.config.json 项目的配置文件</li><li>sitemap.json 用来配置小程序及其页面是否允许被微信索引</li></ul></li><li><h3 id="小程序页面的组成部分"><a href="#小程序页面的组成部分" class="headerlink" title="小程序页面的组成部分"></a><strong>小程序页面的组成部分</strong></h3><ol><li>小程序官方建议把所有小程序的页面，都存放在 pages 目录中，以单独的文件夹存在</li><li>其中，每个页面由 4 个基本文件组成，它们分别是：<ul><li>.js 文件（页面的脚本文件，存放页面的数据、事件处理函数等）</li><li>.json 文件（当前页面的配置文件，配置窗口的外观、表现等）</li><li>.wxml 文件（页面的模板结构文件）</li><li>.wxss 文件（当前页面的样式表文件）</li></ul></li></ol></li></ol><h2 id="JSON-配置文件"><a href="#JSON-配置文件" class="headerlink" title="JSON 配置文件"></a><strong>JSON 配置文件</strong></h2><ol><li><h3 id="JSON-配置文件的作用"><a href="#JSON-配置文件的作用" class="headerlink" title="JSON 配置文件的作用"></a><strong>JSON 配置文件的作用</strong></h3><ol><li>JSON 是一种数据格式，在实际开发中，JSON 总是以<strong>配置文件</strong>的形式出现。小程序项目中也不例外：通过不同的 .json 配置文件，可以对小程序项目进行不同级别的配置。</li><li>小程序项目中有 4 种 json 配置文件，分别是：<ol><li>项目根目录中的 app.json 配置文件</li><li>项目根目录中的 project.config.json 配置文件</li><li>项目根目录中的 sitemap.json 配置文件</li><li>每个页面文件夹中的 .json 配置文件</li></ol></li></ol></li><li><h3 id="app-json-文件"><a href="#app-json-文件" class="headerlink" title="app.json 文件"></a><strong>app.json 文件</strong></h3><ol><li>app.json 是当前小程序的<strong>全局配置</strong>，包括了小程序的所有页面路径、窗口外观、界面表现、底部 tab 等。Demo 项目里边的 app.json 配置内容如下：</li><li>简单了解下这 4 个配置项的作用：<ol><li>pages：用来记录当前小程序所有页面的路径</li><li>window：全局定义小程序所有页面的背景色、文字颜色等</li><li>style：全局定义小程序组件所使用的样式版本</li><li>sitemapLocation：用来指明 sitemap.json 的位置</li></ol></li></ol></li><li><h3 id="project-config-json-文件"><a href="#project-config-json-文件" class="headerlink" title="project.config.json 文件"></a><strong>project.config.json 文件</strong></h3><ol><li>project.config.json 是项目配置文件，用来记录我们对小程序开发工具所做的个性化配置，例如：<ul><li>setting 中保存了编译相关的配置</li><li>projectname 中保存的是项目名称</li><li>appid 中保存的是小程序的账号 ID</li></ul></li></ol></li><li><h3 id="sitemap-json-文件"><a href="#sitemap-json-文件" class="headerlink" title="sitemap.json 文件"></a><strong>sitemap.json 文件</strong></h3><ol><li>微信现已开放小程序内搜索，效果类似于 PC 网页的 SEO。sitemap.json 文件用来配置小程序页面是否允许微信索引。<ul><li>当开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中。<ul><li>注意：sitemap 的索引提示是默认开启的，如需要关闭 sitemap 的索引提示，可在小程序项目配置文件project.config.json 的 setting 中配置字段 checkSiteMap 为 false</li></ul></li></ul></li></ol></li><li><h3 id="页面的-json-配置文件"><a href="#页面的-json-配置文件" class="headerlink" title="页面的 .json 配置文件"></a><strong>页面的 .json 配置文件</strong></h3><ol><li>小程序中的每一个页面，可以使用 .json 文件来对本页面的窗口外观进行配置，<strong>页面中的配置项会覆盖app.json 的 window 中相同的配置项</strong>。</li></ol></li><li><h3 id="新建小程序页面"><a href="#新建小程序页面" class="headerlink" title="新建小程序页面"></a><strong>新建小程序页面</strong></h3><ol><li>只需要在 app.json -&gt; pages 中新增页面的存放路径，小程序开发者工具即可帮我们自动创建对应的页面文件。</li></ol></li><li><h3 id="修改项目首页"><a href="#修改项目首页" class="headerlink" title="修改项目首页"></a><strong>修改项目首页</strong></h3><ol><li>只需要调整 app.json -&gt; pages 数组中页面路径的前后顺序，即可修改项目的首页。小程序会把排在第一位的页面，当作项目首页进行渲染。</li></ol></li></ol><h2 id="WXML-模板"><a href="#WXML-模板" class="headerlink" title="WXML 模板"></a><strong>WXML 模板</strong></h2><ol><li><h3 id="什么是-WXML"><a href="#什么是-WXML" class="headerlink" title="什么是 WXML"></a><strong>什么是 WXML</strong></h3><ol><li>WXML（WeiXin Markup Language）是小程序框架设计的一套标签语言，用来构建小程序页面的结构，其作用类似于网页开发中的 HTML。</li></ol></li><li><h3 id="WXML-和-HTML-的区别"><a href="#WXML-和-HTML-的区别" class="headerlink" title="WXML 和 HTML 的区别"></a><strong>WXML 和 HTML 的区别</strong></h3><ol><li><p>标签名称不同</p><ul><li>HTML （div, span, img, a） </li><li>WXML（view, text, image, navigator）</li></ul></li><li><p>属性节点不同</p><ul><li>&#96;&#96;&#96;<br><a href="#">超链接</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;navigator url=&quot;/pages/home/home&quot;&gt;&lt;/navigator&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>提供了类似于 Vue 中的模板语法</p><ul><li>数据绑定</li><li>列表渲染</li><li>条件渲染</li></ul></li></ol></li></ol><h2 id="WXSS-样式"><a href="#WXSS-样式" class="headerlink" title="WXSS 样式"></a><strong>WXSS 样式</strong></h2><ol><li><h3 id="什么是-WXSS"><a href="#什么是-WXSS" class="headerlink" title="什么是 WXSS"></a><strong>什么是 WXSS</strong></h3><ol><li>WXSS (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式，类似于网页开发中的 CSS。</li></ol></li><li><h3 id="WXSS-和-CSS-的区别"><a href="#WXSS-和-CSS-的区别" class="headerlink" title="WXSS 和 CSS 的区别"></a><strong>WXSS 和 CSS 的区别</strong></h3><ol><li>新增了 rpx 尺寸单位<ul><li>CSS 中需要手动进行像素单位换算，例如 rem</li><li>WXSS 在底层支持新的尺寸单位 rpx，在不同大小的屏幕上小程序会自动进行换算</li></ul></li><li>提供了全局的样式和局部样式<ul><li>项目根目录中的 app.wxss 会作用于所有小程序页面</li><li>局部页面的 .wxss 样式仅对当前页面生效</li></ul></li><li>WXSS 仅支持部分 CSS 选择器<ul><li>.class 和 #id</li><li>element</li><li>并集选择器、后代选择器</li><li>::after 和 ::before 等伪类选择器</li></ul></li></ol></li></ol><h2 id="JS-逻辑交互"><a href="#JS-逻辑交互" class="headerlink" title="JS 逻辑交互"></a><strong>JS 逻辑交互</strong></h2><ol><li><h3 id="小程序中的-js-文件"><a href="#小程序中的-js-文件" class="headerlink" title="小程序中的 .js 文件"></a><strong>小程序中的 .js 文件</strong></h3><ol><li>一个项目仅仅提供界面展示是不够的，在小程序中，我们通过 .js 文件来处理用户的操作。例如：响应用户的点击、获取用户的位置等等。</li></ol></li><li><h3 id="小程序中-js-文件的分类"><a href="#小程序中-js-文件的分类" class="headerlink" title="小程序中 .js 文件的分类"></a><strong>小程序中 .js 文件的分类</strong></h3><ol><li>小程序中的 JS 文件分为三大类，分别是：<ol><li>app.js<ul><li>是整个小程序项目的入口文件，通过调用 App() 函数来启动整个小程序</li></ul></li><li>页面的 .js 文件<ul><li>是页面的入口文件，通过调用 Page() 函数来创建并运行页面</li></ul></li><li>普通的 .js 文件<ul><li>是普通的功能模块文件，用来封装公共的函数或属性供页面使用</li></ul></li></ol></li></ol></li></ol><h2 id="宿主环境简介"><a href="#宿主环境简介" class="headerlink" title="宿主环境简介"></a><strong>宿主环境简介</strong></h2><ol><li><h3 id="什么是宿主环境"><a href="#什么是宿主环境" class="headerlink" title="什么是宿主环境"></a><strong>什么是宿主环境</strong></h3><ol><li><p>宿主环境（host environment）指的是程序运行所<strong>必须的依赖环境</strong>。</p><ul><li><p>例如：</p><p>Android 系统和 iOS 系统是两个不同的宿主环境。安卓版的微信 App 是不能在 iOS 环境下运行的，所以，Android 是安卓软件的宿主环境，脱离了宿主环境的软件是没有任何意义的！</p></li></ul></li></ol></li><li><h3 id="小程序的宿主环境"><a href="#小程序的宿主环境" class="headerlink" title="小程序的宿主环境"></a><strong>小程序的宿主环境</strong></h3><ol><li><strong>手机微信</strong>是小程序的宿主环境</li></ol></li><li><h3 id="小程序宿主环境包含的内容"><a href="#小程序宿主环境包含的内容" class="headerlink" title="小程序宿主环境包含的内容"></a><strong>小程序宿主环境包含的内容</strong></h3><ol><li>通信模型</li><li>运行机制</li><li>组件</li><li>API</li></ol></li></ol><h2 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a><strong>通信模型</strong></h2><ol><li><h3 id="通信的主体"><a href="#通信的主体" class="headerlink" title="通信的主体"></a><strong>通信的主体</strong></h3><ol><li>小程序中通信的主体是渲染层和逻辑层<ol><li>WXML 模板和 WXSS 样式工作在渲染层</li><li>JS 脚本工作在逻辑层</li></ol></li></ol></li><li><h3 id="小程序的通信模型"><a href="#小程序的通信模型" class="headerlink" title="小程序的通信模型"></a><strong>小程序的通信模型</strong></h3><ol><li>小程序中的通信模型分为两部分：<ol><li>渲染层和逻辑层之间的通信<ul><li>由微信客户端进行转发</li></ul></li><li>逻辑层和第三方服务器之间的通信<ul><li>由微信客户端进行转发</li></ul></li></ol></li></ol></li></ol><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a><strong>运行机制</strong></h2><ol><li><h3 id="小程序启动的过程"><a href="#小程序启动的过程" class="headerlink" title="小程序启动的过程"></a><strong>小程序启动的过程</strong></h3><ol><li>把小程序的代码包下载到本地</li><li>解析 app.json 全局配置文件</li><li>执行 app.js 小程序入口文件，调用 App() 创建小程序实例</li><li>渲染小程序首页</li><li>小程序启动完成</li></ol></li><li><h3 id="页面渲染的过程"><a href="#页面渲染的过程" class="headerlink" title="页面渲染的过程"></a><strong>页面渲染的过程</strong></h3><ol><li>加载解析页面的 .json 配置文件</li><li>加载页面的 .wxml 模板和 .wxss 样式</li><li>执行页面的 .js 文件，调用 Page() 创建页面实例</li><li>页面渲染完成</li></ol></li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ol><li><h3 id="小程序中组件的分类"><a href="#小程序中组件的分类" class="headerlink" title="小程序中组件的分类"></a><strong>小程序中组件的分类</strong></h3><ol><li>小程序中的组件也是由宿主环境提供的，开发者可以基于组件快速搭建出漂亮的页面结构。官方把小程序的组件分为了 9 大类，分别是：<ol><li>视图容器</li><li>基础内容</li><li>表单组件</li><li>导航组件</li><li>媒体组件</li><li>map 地图组件</li><li>canvas 画布组件</li><li>开放能力</li><li>无障碍访问</li></ol></li></ol></li><li><h3 id="常用的视图容器类组件"><a href="#常用的视图容器类组件" class="headerlink" title="常用的视图容器类组件"></a><strong>常用的视图容器类组件</strong></h3><ol><li>view<ul><li>普通视图区域</li><li>类似于 HTML 中的 div，是一个块级元素</li><li>常用来实现页面的布局效果</li></ul></li><li>scroll-view<ul><li>可滚动的视图区域</li><li>常用来实现滚动列表效果</li></ul></li><li>swiper 和 swiper-item<ul><li>轮播图容器组件 和 轮播图 item 组件</li></ul></li></ol></li><li><h3 id="view-组件的基本使用"><a href="#view-组件的基本使用" class="headerlink" title="view 组件的基本使用"></a><strong>view 组件的基本使用</strong></h3><ol><li><p>实现如图的 flex 横向布局效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list.wxml</span><br><span class="line">&lt;view class=&quot;container1&quot;&gt;</span><br><span class="line">  &lt;view&gt;A&lt;/view&gt;</span><br><span class="line">  &lt;view&gt;B&lt;/view&gt;</span><br><span class="line">  &lt;view&gt;C&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">list.wxss</span><br><span class="line">.container1 view &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.container1 view:nth-child(1)&#123;</span><br><span class="line">  background-color: lightblue;</span><br><span class="line">&#125;</span><br><span class="line">.container1 view:nth-child(2)&#123;</span><br><span class="line">  background-color: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line">.container1 view:nth-child(3)&#123;</span><br><span class="line">  background-color: lightgoldenrodyellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.container1 &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="scroll-view-组件的基本使用"><a href="#scroll-view-组件的基本使用" class="headerlink" title="scroll-view 组件的基本使用"></a><strong>scroll-view 组件的基本使用</strong></h3><ol><li><p>实现如图的纵向滚动效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list.wxml </span><br><span class="line">scroll-x 表示横行滑动</span><br><span class="line">&lt;scroll-view class=&quot;container1&quot; scroll-y&gt;</span><br><span class="line">  &lt;view&gt;A&lt;/view&gt;</span><br><span class="line">  &lt;view&gt;B&lt;/view&gt;</span><br><span class="line">  &lt;view&gt;C&lt;/view&gt;</span><br><span class="line">&lt;/scroll-view&gt;</span><br></pre></td></tr></table></figure><p>html是骨架</p><p>css是化妆</p><p>js是动作</p></li></ol></li><li><h3 id="swiper-和-swiper-item-组件的基本使用"><a href="#swiper-和-swiper-item-组件的基本使用" class="headerlink" title="swiper 和 swiper-item 组件的基本使用"></a><strong>swiper 和 swiper-item 组件的基本使用</strong></h3><ol><li><p>实现如图的轮播图效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wxml</span><br><span class="line">&lt;swiper class=&quot;swiper-container&quot;&gt;</span><br><span class="line">  &lt;!--第一个轮播图--&gt;</span><br><span class="line">  &lt;swiper-item&gt;</span><br><span class="line">    &lt;view class=&quot;item&quot;&gt;A&lt;/view&gt;</span><br><span class="line">  &lt;/swiper-item&gt;</span><br><span class="line">  &lt;swiper-item&gt;</span><br><span class="line">    &lt;view class=&quot;item&quot;&gt;B&lt;/view&gt;</span><br><span class="line">  &lt;/swiper-item&gt;</span><br><span class="line">  &lt;swiper-item&gt;</span><br><span class="line">    &lt;view class=&quot;item&quot;&gt;C&lt;/view&gt;</span><br><span class="line">  &lt;/swiper-item&gt;</span><br><span class="line">&lt;/swiper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wxss</span><br><span class="line">.swiper-container &#123;</span><br><span class="line">  height: 150px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  line-height: 150px;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swiper-item:nth-child(1) .item&#123;</span><br><span class="line">  background-color: lightgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swiper-item:nth-child(2) .item&#123;</span><br><span class="line">  background-color: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swiper-item:nth-child(3) .item&#123;</span><br><span class="line">  background-color: lightgoldenrodyellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="swiper-组件的常用属性（轮播图属性）"><a href="#swiper-组件的常用属性（轮播图属性）" class="headerlink" title="swiper 组件的常用属性（轮播图属性）"></a><strong>swiper 组件的常用属性</strong>（轮播图属性）</h3></li></ol><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>indicator-dots</td><td>boolean</td><td>false</td><td>是否显示面板指示点,轮播图</td></tr><tr><td>indicator-color</td><td>color</td><td>rgba(0, 0, 0, .3)</td><td>指示点颜色</td></tr><tr><td>indicator-active-color</td><td>color</td><td>#000000</td><td>当前选中的指示点颜色</td></tr><tr><td>autoplay</td><td>boolean</td><td>false</td><td>是否自动切换</td></tr><tr><td>interval</td><td>number</td><td>5000</td><td>自动切换时间间隔</td></tr><tr><td>circular</td><td>boolean</td><td>false</td><td>是否采用衔接滑动</td></tr></tbody></table><ol><li><h3 id="常用的基础内容组件"><a href="#常用的基础内容组件" class="headerlink" title="常用的基础内容组件"></a><strong>常用的基础内容组件</strong></h3><ol><li>text<ul><li>文本组件</li><li>类似于 HTML 中的 span 标签，是一个行内元素</li></ul></li><li>rich-text<ul><li>富文本组件</li><li>支持把 HTML 字符串渲染为 WXML 结构</li></ul></li></ol></li><li><h3 id="text-组件的基本使用"><a href="#text-组件的基本使用" class="headerlink" title="text 组件的基本使用"></a><strong>text 组件的基本使用</strong></h3><ol><li><p>通过 text 组件的 selectable 属性，实现长按选中文本内容的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  手机号支持长按操作</span><br><span class="line">  &lt;text selectable&gt;15247334313&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="rich-text-组件的基本使用"><a href="#rich-text-组件的基本使用" class="headerlink" title="rich-text 组件的基本使用"></a><strong>rich-text 组件的基本使用</strong></h3><ol><li><p>通过 rich-text 组件的 nodes 属性节点，把 HTML 字符串渲染为对应的 UI 结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;rich-text nodes=&quot;&lt;h1 style=&#x27;color: red;&#x27;&gt;标题&lt;/h1&gt;&quot;&gt;&lt;/rich-text&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="其它常用组件"><a href="#其它常用组件" class="headerlink" title="其它常用组件"></a><strong>其它常用组件</strong></h3><ol><li>button<ul><li>按钮组件</li><li>功能比 HTML 中的 button 按钮丰富</li><li>通过 open-type 属性可以调用微信提供的各种功能（客服、转发、获取用户授权、获取用户信息等）</li></ul></li><li>image<ul><li>图片组件</li><li>image 组件默认宽度约 300px、高度约 240px</li></ul></li><li>navigator（后面课程会专门讲解）<ul><li>页面导航组件</li><li>类似于 HTML 中的 a 链接</li></ul></li></ol></li><li><h3 id="button-按钮的基本使用"><a href="#button-按钮的基本使用" class="headerlink" title="button 按钮的基本使用"></a><strong>button 按钮的基本使用</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;默认按钮&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot;&gt;主色调按钮&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;warn&quot;&gt;警告按钮&lt;/button&gt;</span><br><span class="line">&lt;view&gt;--------------mini小按钮----------------&lt;/view&gt;</span><br><span class="line">&lt;button size=&quot;mini&quot;&gt;默认按钮&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot; size=&quot;mini&quot;&gt;主色调按钮&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;warn&quot; size=&quot;mini&quot;&gt;警告按钮&lt;/button&gt;</span><br><span class="line">&lt;view&gt;-----------------plain镂空--------------&lt;/view&gt;</span><br><span class="line">&lt;button size=&quot;mini&quot; plain&gt;默认按钮&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;primary&quot; size=&quot;mini&quot; plain&gt;主色调按钮&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;warn&quot; size=&quot;mini&quot; plain&gt;警告按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="image-组件的基本使用"><a href="#image-组件的基本使用" class="headerlink" title="image 组件的基本使用"></a><strong>image 组件的基本使用</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;image src=&quot;/imags/1.png&quot;&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;image src=&quot;/imags/1.png&quot; mode=&quot;aspectFit&quot;&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure></li><li><h3 id="image-组件的-mode-属性"><a href="#image-组件的-mode-属性" class="headerlink" title="image 组件的 mode 属性"></a><strong>image 组件的 mode 属性</strong></h3><ol><li>image 组件的 mode 属性用来指定图片的裁剪和缩放模式，常用的 mode 属性值如下：</li></ol><table><thead><tr><th>mode值</th><th>说明</th></tr></thead><tbody><tr><td>scaleToFill</td><td>（默认值）缩放模式，不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素</td></tr><tr><td>aspectFit</td><td>缩放模式，保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。</td></tr><tr><td>aspectFill</td><td>缩放模式，保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向是完整的，另一个方向将会发生截取。</td></tr><tr><td>widthFix</td><td>缩放模式，宽度不变，高度自动变化，保持原图宽高比不变</td></tr><tr><td>heightFix</td><td>缩放模式，高度不变，宽度自动变化，保持原图宽高比不变</td></tr></tbody></table></li></ol><h2 id="API"><a href="#API" class="headerlink" title="API"></a><strong>API</strong></h2><ol><li><h3 id="小程序-API-概述"><a href="#小程序-API-概述" class="headerlink" title="小程序 API 概述"></a><strong>小程序 API 概述</strong></h3><ol><li>小程序中的 API 是由宿主环境提供的，通过这些丰富的小程序 API，开发者可以方便的调用微信提供的能力,例如：获取用户信息、本地存储、支付功能等。</li></ol></li><li><h3 id="小程序-API-的-3-大分类"><a href="#小程序-API-的-3-大分类" class="headerlink" title="小程序 API 的 3 大分类"></a><strong>小程序 API 的 3 大分类</strong></h3><ol><li>小程序官方把 API 分为了如下 3 大类：<ol><li>事件监听 API<ul><li>特点：以 on 开头，用来监听某些事件的触发</li><li>举例：wx.onWindowResize(function callback) 监听窗口尺寸变化的事件</li></ul></li><li>同步 API</li></ol><ul><li>特点1：以 Sync 结尾的 API 都是同步 API</li><li>特点2：同步 API 的执行结果，可以通过函数返回值直接获取，如果执行出错会抛出异常</li><li>举例：wx.setStorageSync(‘key’, ‘value’) 向本地存储中写入内容</li></ul><ol start="3"><li>异步 API<ul><li>特点：类似于 jQuery 中的 $.ajax(options) 函数，需要通过 success、fail、complete 接收调用的结果</li><li>举例：wx.request() 发起网络数据请求，通过 success 回调函数接收数据</li></ul></li></ol></li></ol></li></ol><h2 id="协同工作"><a href="#协同工作" class="headerlink" title="协同工作"></a><strong>协同工作</strong></h2><ol><li><h3 id="了解权限管理需求"><a href="#了解权限管理需求" class="headerlink" title="了解权限管理需求"></a><strong>了解权限管理需求</strong></h3><ul><li>在中大型的公司里，人员的分工非常仔细：同一个小程序项目，一般会有不同岗位、不同角色的员工同时参与设计与开发。</li><li>此时出于管理需要，我们<strong>迫切需要对</strong>不同岗位、不同角色的<strong>员工的权限进行边界的划分</strong>，使他们能够高效的进行协同工作。</li></ul></li><li><h3 id="了解项目成员的组织结构"><a href="#了解项目成员的组织结构" class="headerlink" title="了解项目成员的组织结构"></a><strong>了解项目成员的组织结构</strong></h3><ol><li>项目管理者：统筹整个项目的进展和风险，把控小程序对外发布的节奏</li><li>产品组：提需求</li><li>设计组：出设计方案</li><li>开发组：代码开发</li><li>测试组：项目测试</li></ol></li><li><h3 id="小程序的开发流程"><a href="#小程序的开发流程" class="headerlink" title="小程序的开发流程"></a><strong>小程序的开发流程</strong></h3><p>产品组提出需求-&gt;设计者设计-&gt;开发组开发-&gt;产品组和设计组体验-&gt;测试组测试-&gt;管理者进行发布</p></li></ol><h2 id="小程序成员管理"><a href="#小程序成员管理" class="headerlink" title="小程序成员管理"></a><strong>小程序成员管理</strong></h2><ol><li><h3 id="成员管理的两个方面"><a href="#成员管理的两个方面" class="headerlink" title="成员管理的两个方面"></a><strong>成员管理的两个方面</strong></h3><ol><li>小程序成员管理体现在管理员对小程序项目成员及体验成员的管理：<ol><li>项目成员：<ul><li>表示参与小程序开发、运营的成员</li><li>可登录小程序管理后台</li><li>管理员可以添加、删除项目成员，并设置项目成员的角色</li></ul></li><li>体验成员： <ul><li>表示参与小程序内测体验的成员</li><li>可使用体验版小程序，但不属于项目成员</li><li>管理员及项目成员均可添加、删除体验成员</li></ul></li></ol></li></ol></li><li><h3 id="不同项目成员对应的权限"><a href="#不同项目成员对应的权限" class="headerlink" title="不同项目成员对应的权限"></a><strong>不同项目成员对应的权限</strong></h3><table><thead><tr><th>权限</th><th>运营者</th><th>开发者</th><th>数据分析者</th></tr></thead><tbody><tr><td>开发者权限</td><td></td><td>*</td><td></td></tr><tr><td>体验者权限</td><td>*</td><td>*</td><td>*</td></tr><tr><td>登录</td><td>*</td><td>*</td><td>*</td></tr><tr><td>数据分析</td><td></td><td></td><td>*</td></tr><tr><td>微信支付</td><td>*</td><td></td><td></td></tr><tr><td>推广</td><td>*</td><td></td><td></td></tr><tr><td>开发管理</td><td>*</td><td></td><td></td></tr><tr><td>开发设置</td><td></td><td>*</td><td></td></tr><tr><td>暂停服务</td><td>*</td><td></td><td></td></tr><tr><td>解除关联公众号</td><td>*</td><td></td><td></td></tr><tr><td>腾讯云管理</td><td></td><td>*</td><td></td></tr><tr><td>小程序插件</td><td>*</td><td></td><td></td></tr><tr><td>游戏运营管理</td><td>*</td><td></td><td></td></tr></tbody></table></li><li><h3 id="开发者的权限说明"><a href="#开发者的权限说明" class="headerlink" title="开发者的权限说明"></a><strong>开发者的权限说明</strong></h3><ol><li>开发者权限：可使用小程序开发者工具及对小程序的功能进行代码开发</li><li>体验者权限：可使用体验版小程序</li><li>登录权限：可登录小程序管理后台，无需管理员确认</li><li>开发设置：设置小程序服务器域名、消息推送及扫描普通链接二维码打开小程序</li><li>腾讯云管理：云开发相关设置</li></ol></li><li><h3 id="添加项目成员和体验成员"><a href="#添加项目成员和体验成员" class="headerlink" title="添加项目成员和体验成员"></a><strong>添加项目成员</strong>和体验成员</h3><ol><li><a href="https://mp.weixin.qq.com/%E4%B8%AD%E7%AE%A1%E7%90%86%E9%87%8C%E6%88%90%E5%91%98%E7%AE%A1%E7%90%86%E5%8F%AF%E6%93%8D%E4%BD%9C%E9%A1%B9%E7%9B%AE%E6%88%90%E5%91%98%E4%B8%8E%E4%BD%93%E9%AA%8C%E4%BA%BA%E5%91%98">https://mp.weixin.qq.com/中管理里成员管理可操作项目成员与体验人员</a></li></ol></li></ol><h2 id="小程序的版本"><a href="#小程序的版本" class="headerlink" title="小程序的版本"></a><strong>小程序的版本</strong></h2><ol><li><h3 id="软件开发过程中的不同版本"><a href="#软件开发过程中的不同版本" class="headerlink" title="软件开发过程中的不同版本"></a><strong>软件开发过程中的不同版本</strong></h3><ol><li>在软件开发过程中，根据时间节点的不同，会产出不同的软件版本，例如：<ol><li>开发者编写代码的同时，对项目代码进行自测（开发版本） </li><li>直到程序达到一个稳定可体验的状态时，开发者把体验版本给到产品经理和测试人员进行体验测试</li><li>最后修复完程序的 Bug 后，发布正式版供外部用户使用</li></ol></li></ol></li><li><h3 id="小程序的版本-1"><a href="#小程序的版本-1" class="headerlink" title="小程序的版本"></a><strong>小程序的版本</strong></h3><table><thead><tr><th>版本阶段</th><th>说明</th></tr></thead><tbody><tr><td>开发版本</td><td>使用开发者工具，可将代码上传到开发版本中。 开发版本只保留每人最新的一份上传的代码。点击提交审核，可将代码提交审核。开发版本可删除，不影响线上版本和审核中版本的代码。</td></tr><tr><td>体验版本</td><td>可以选择某个开发版本作为体验版，并且选取一份体验版。</td></tr><tr><td>审核中的版本</td><td>只能有一份代码处于审核中。有审核结果后可以发布到线上，也可直接重新提交审核，覆盖原审核版本。</td></tr><tr><td>线上版本</td><td>线上所有用户使用的代码版本，该版本代码在新版本代码发布后被覆盖更新。</td></tr></tbody></table></li></ol><h2 id="发布上线"><a href="#发布上线" class="headerlink" title="发布上线"></a><strong>发布上线</strong></h2><ol><li><h3 id="小程序发布上线的整体步骤"><a href="#小程序发布上线的整体步骤" class="headerlink" title="小程序发布上线的整体步骤"></a><strong>小程序发布上线的整体步骤</strong></h3><ol><li>一个小程序的发布上线，一般要经过上传代码 -&gt; 提交审核 -&gt; 发布这三个步骤。</li></ol></li><li><h3 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a><strong>上传代码</strong></h3><ol><li>点击开发者工具顶部工具栏中的“上传” 按钮</li><li>填写版本号以及项目备注</li></ol></li><li><h3 id="在后台查看上传之后的版本"><a href="#在后台查看上传之后的版本" class="headerlink" title="在后台查看上传之后的版本"></a><strong>在后台查看上传之后的版本</strong></h3><ol><li>登录小程序管理后台 -&gt; 管理 -&gt; 版本管理 -&gt; 开发版本，即可查看刚才提交上传的版本了：</li></ol></li><li><h3 id="提交审核"><a href="#提交审核" class="headerlink" title="提交审核"></a><strong>提交审核</strong></h3><ul><li>为什么需要提交审核：为了保证小程序的质量，以及符合相关的规范，小程序的发布是需要经过腾讯官方审核的。</li><li>提交审核的方式：在开发版本的列表中，点击“提交审核”按钮之后，按照页面提示填写相关的信息，就能把小程序提交到腾讯官方进行审核。</li></ul></li><li><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a><strong>发布</strong></h3><ol><li>审核通过之后，管理员的微信中会收到小程序通过审核的通知，此时在审核版本的列表中，点击“发布”按钮之后，即可把“审核通过”的版本发布为“线上版本”，供所有小程序用户访问和使用。</li></ol></li><li><h3 id="基于小程序码进行推广"><a href="#基于小程序码进行推广" class="headerlink" title="基于小程序码进行推广"></a><strong>基于小程序码进行推广</strong></h3><ul><li>相对于普通二维码来说，小程序码的优势如下：<ol><li>在样式上更具辨识度和视觉冲击力</li><li>能够更加清晰地树立小程序的品牌形象</li><li>可以帮助开发者更好地推广小程序</li></ol></li><li>获取小程序码的 5 个步骤：<ul><li>登录小程序管理后台 -&gt; 设置 -&gt; 基本设置 -&gt; 基本信息 -&gt; 小程序码及线下物料下载</li></ul></li></ul></li></ol><h2 id="运营数据"><a href="#运营数据" class="headerlink" title="运营数据"></a><strong>运营数据</strong></h2><ol><li><h3 id="查看小程序运营数据的两种方式"><a href="#查看小程序运营数据的两种方式" class="headerlink" title="查看小程序运营数据的两种方式"></a><strong>查看小程序运营数据的两种方式</strong></h3><ol><li>在“小程序后台”查看<ol><li>登录小程序管理后台</li><li>点击侧边栏的“统计”</li><li>点击相应的 tab 可以看到相关的数据</li></ol></li><li>使用“小程序数据助手”查看<ol><li>打开微信</li><li>搜索“小程序数据助手”</li><li>查看已发布的小程序相关的数据</li></ol></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;小程序简介&quot;&gt;&lt;a href=&quot;#小程序简介&quot; class=&quot;headerlink&quot; title=&quot;小程序简介&quot;&gt;&lt;/a&gt;小程序简介&lt;/h2&gt;&lt;h2 id=&quot;1-小程序与普通网页开发的区别&quot;&gt;&lt;a href=&quot;#1-小程序与普通网页开发的区别&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="小程序" scheme="http://example.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>MQTT1-4服务端连接操作</title>
    <link href="http://example.com/2022/04/27/MQTT1-4%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2022/04/27/MQTT1-4%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%93%8D%E4%BD%9C/</id>
    <published>2022-04-27T15:03:16.000Z</published>
    <updated>2022-04-27T15:38:02.217Z</updated>
    
    <content type="html"><![CDATA[<p>首先，您可以通过MQTT官网下载到MQTTfx软件。MQTTfx的官网地址是：<a href="http://mqttfx.org/">http://mqttfx.org</a></p><p><a href="https://blog.csdn.net/nicholaszao/article/details/79211965">https://blog.csdn.net/nicholaszao/article/details/79211965</a></p><h2 id="ESP8266连接MQTT服务端"><a href="#ESP8266连接MQTT服务端" class="headerlink" title="ESP8266连接MQTT服务端"></a>ESP8266连接MQTT服务端</h2><p>SP8266的Arduino开发环境里有多个MQTT库，我们将使用最为流行的PubSubClient库来作为本教程的主要介绍对象，我们将通过一系列课程教您如何使用ESP8266通过PubSubClient库来实现MQTT物联网应用。</p><h3 id="B站视频："><a href="#B站视频：" class="headerlink" title="B站视频："></a>B站视频：</h3><p><a href="https://www.bilibili.com/video/BV1T54y1k7MQ?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1T54y1k7MQ?spm_id_from=333.999.0.0</a></p><h3 id="ESP8266链接代码"><a href="#ESP8266链接代码" class="headerlink" title="ESP8266链接代码"></a>ESP8266链接代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;ESP8266WiFi.h&gt;</span><br><span class="line">#include &lt;PubSubClient.h&gt;</span><br><span class="line"> </span><br><span class="line">// 设置wifi接入信息(请根据您的WiFi信息进行修改)</span><br><span class="line">const char* ssid = &quot;taichi-maker&quot;;</span><br><span class="line">const char* password = &quot;12345678&quot;;</span><br><span class="line">const char* mqttServer = &quot;test.ranye-iot.net&quot;;</span><br><span class="line"> </span><br><span class="line">// 如以上MQTT服务器无法正常连接，请前往以下页面寻找解决方案</span><br><span class="line">// http://www.taichi-maker.com/public-mqtt-broker/</span><br><span class="line"> </span><br><span class="line">WiFiClient wifiClient;</span><br><span class="line">PubSubClient mqttClient(wifiClient);</span><br><span class="line"> </span><br><span class="line">void setup() &#123;</span><br><span class="line">  Serial.begin(9600);</span><br><span class="line"> </span><br><span class="line">  //设置ESP8266工作模式为无线终端模式</span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line">  </span><br><span class="line">  // 连接WiFi</span><br><span class="line">  connectWifi();</span><br><span class="line">  </span><br><span class="line">  // 设置MQTT服务器和端口号</span><br><span class="line">  mqttClient.setServer(mqttServer, 1883);</span><br><span class="line"> </span><br><span class="line">  // 连接MQTT服务器</span><br><span class="line">  connectMQTTServer();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void loop() &#123; </span><br><span class="line">  if (mqttClient.connected()) &#123; // 如果开发板成功连接服务器    </span><br><span class="line">    mqttClient.loop();          // 保持客户端心跳</span><br><span class="line">  &#125; else &#123;                  // 如果开发板未能成功连接服务器</span><br><span class="line">    connectMQTTServer();    // 则尝试连接服务器</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void connectMQTTServer()&#123;</span><br><span class="line">  // 根据ESP8266的MAC地址生成客户端ID（避免与其它ESP8266的客户端ID重名）</span><br><span class="line">  String clientId = &quot;esp8266-&quot; + WiFi.macAddress();</span><br><span class="line"> </span><br><span class="line">  // 连接MQTT服务器</span><br><span class="line">  if (mqttClient.connect(clientId.c_str())) &#123; </span><br><span class="line">    Serial.println(&quot;MQTT Server Connected.&quot;);</span><br><span class="line">    Serial.println(&quot;Server Address: &quot;);</span><br><span class="line">    Serial.println(mqttServer);</span><br><span class="line">    Serial.println(&quot;ClientId:&quot;);</span><br><span class="line">    Serial.println(clientId);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    Serial.print(&quot;MQTT Server Connect Failed. Client State:&quot;);</span><br><span class="line">    Serial.println(mqttClient.state());</span><br><span class="line">    //返回连接返回码</span><br><span class="line">    delay(3000);</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// ESP8266连接wifi</span><br><span class="line">void connectWifi()&#123;</span><br><span class="line"> </span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line"> </span><br><span class="line">  //等待WiFi连接,成功连接后输出成功信息</span><br><span class="line">  while (WiFi.status() != WL_CONNECTED) &#123;</span><br><span class="line">    delay(1000);</span><br><span class="line">    Serial.print(&quot;.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(&quot;&quot;);</span><br><span class="line">  Serial.println(&quot;WiFi Connected!&quot;);  </span><br><span class="line">  Serial.println(&quot;&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><h4 id="B站视频：https-www-bilibili-com-video-BV1T54y1k7MQ-spm-id-from-333-999-0-0"><a href="#B站视频：https-www-bilibili-com-video-BV1T54y1k7MQ-spm-id-from-333-999-0-0" class="headerlink" title="B站视频：https://www.bilibili.com/video/BV1T54y1k7MQ?spm_id_from=333.999.0.0"></a>B站视频：<a href="https://www.bilibili.com/video/BV1T54y1k7MQ?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1T54y1k7MQ?spm_id_from=333.999.0.0</a></h4><h4 id="文档：http-www-taichi-maker-com-homepage-esp8266-nodemcu-iot-iot-tuttorial-mqtt-tutorial-client-connect-mqtt-server"><a href="#文档：http-www-taichi-maker-com-homepage-esp8266-nodemcu-iot-iot-tuttorial-mqtt-tutorial-client-connect-mqtt-server" class="headerlink" title="文档：http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-tuttorial/mqtt-tutorial/client-connect-mqtt-server/"></a>文档：<a href="http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-tuttorial/mqtt-tutorial/client-connect-mqtt-server/">http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-tuttorial/mqtt-tutorial/client-connect-mqtt-server/</a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先，您可以通过MQTT官网下载到MQTTfx软件。MQTTfx的官网地址是：&lt;a href=&quot;http://mqttfx.org/&quot;&gt;http://mqttfx.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/nicholasz</summary>
      
    
    
    
    
    <category term="物联网" scheme="http://example.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>英语好句积累</title>
    <link href="http://example.com/2022/04/26/%E8%8B%B1%E8%AF%AD%E5%A5%BD%E5%8F%A5%E7%A7%AF%E7%B4%AF/"/>
    <id>http://example.com/2022/04/26/%E8%8B%B1%E8%AF%AD%E5%A5%BD%E5%8F%A5%E7%A7%AF%E7%B4%AF/</id>
    <published>2022-04-26T08:59:28.000Z</published>
    <updated>2022-04-26T09:16:29.284Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A-true-master-is-an-eternal-student"><a href="#A-true-master-is-an-eternal-student" class="headerlink" title="A true master is an eternal student"></a>A true master is an eternal student</h3><p>真正的大师，永远都怀着一颗学徒的心。</p><p>master：n.大师，主人</p><ul><li>grand master 宗师</li></ul><p>eternal：adj.永恒的，永远的</p><h3 id="I-long-for-a-worthy-opponent"><a href="#I-long-for-a-worthy-opponent" class="headerlink" title="I long for a worthy opponent"></a>I long for a worthy opponent</h3><p>我渴望有价值的对手</p><p>Long for somebody&#x2F;something：渴望</p><p>worthy：adj.有价值的</p><p>opponent：n.对手</p><h3 id="Its-not-how-much-time-that-you-have-Its-how-you-use-it"><a href="#Its-not-how-much-time-that-you-have-Its-how-you-use-it" class="headerlink" title="Its not how much time that you have;Its how you use it."></a>Its not how much time that you have;Its how you use it.</h3><p>时间不在于你拥有多少，而在于你怎样使用</p><p>强调句：</p><p>it is + 强调部分 +that + 其他</p><h3 id="I-have-been-to-the-top-of-the-mountain-，and-the-bottom-of-the-gutter-There-is-much-to-learn-from-both"><a href="#I-have-been-to-the-top-of-the-mountain-，and-the-bottom-of-the-gutter-There-is-much-to-learn-from-both" class="headerlink" title="I have been to the top of the mountain ，and the bottom of the gutter.There is much to learn from both."></a>I have been to the top of the mountain ，and the bottom of the gutter.There is much to learn from both.</h3><p>我曾踏足山巅，也曾跌入低谷，二者都使我受益良多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;A-true-master-is-an-eternal-student&quot;&gt;&lt;a href=&quot;#A-true-master-is-an-eternal-student&quot; class=&quot;headerlink&quot; title=&quot;A true master is an et</summary>
      
    
    
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>四级词汇21-25串词</title>
    <link href="http://example.com/2022/04/24/%E5%9B%9B%E7%BA%A7%E8%AF%8D%E6%B1%8721-25%E4%B8%B2%E8%AF%8D/"/>
    <id>http://example.com/2022/04/24/%E5%9B%9B%E7%BA%A7%E8%AF%8D%E6%B1%8721-25%E4%B8%B2%E8%AF%8D/</id>
    <published>2022-04-24T15:23:04.000Z</published>
    <updated>2022-04-28T07:44:32.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第21串词：form（形状，形成）"><a href="#第21串词：form（形状，形成）" class="headerlink" title="第21串词：form（形状，形成）"></a>第21串词：form（形状，形成）</h3><h4 id="information-n-信息；消息"><a href="#information-n-信息；消息" class="headerlink" title="information    n.信息；消息"></a>information    n.信息；消息</h4><ul><li><h5 id="tion：名词结尾"><a href="#tion：名词结尾" class="headerlink" title="-tion：名词结尾"></a>-tion：名词结尾</h5></li></ul><h4 id="inform-v-通知；告发（officially-tell：告诉）"><a href="#inform-v-通知；告发（officially-tell：告诉）" class="headerlink" title="inform    v.通知；告发（officially tell：告诉）"></a>inform    v.通知；告发（officially tell：告诉）</h4><ul><li>inform sb of&#x2F;about sth<ul><li>通知某人某事</li></ul></li></ul><h4 id="form-n-类型；形式，样式；表格-v-形成"><a href="#form-n-类型；形式，样式；表格-v-形成" class="headerlink" title="form    n.类型；形式，样式；表格 v.形成"></a>form    n.类型；形式，样式；表格 v.形成</h4><h4 id="formal-adj-正式的"><a href="#formal-adj-正式的" class="headerlink" title="formal    adj.正式的"></a>formal    adj.正式的</h4><ul><li><h5 id="al-：形容词词尾"><a href="#al-：形容词词尾" class="headerlink" title="-al ：形容词词尾"></a>-al ：形容词词尾</h5></li></ul><h4 id="informal-adj-非正式的"><a href="#informal-adj-非正式的" class="headerlink" title="informal    adj.非正式的"></a>informal    adj.非正式的</h4><h4 id="perform-v-执行；表演（可替换do-：完成）"><a href="#perform-v-执行；表演（可替换do-：完成）" class="headerlink" title="perform    v.执行；表演（可替换do ：完成）"></a>perform    v.执行；表演（可替换do ：完成）</h4><ul><li><h5 id="per-：彻底的，从头到尾的"><a href="#per-：彻底的，从头到尾的" class="headerlink" title="per- ：彻底的，从头到尾的"></a>per- ：彻底的，从头到尾的</h5></li></ul><h4 id="performance-n-性能；绩效；表演"><a href="#performance-n-性能；绩效；表演" class="headerlink" title="performance    n.性能；绩效；表演"></a>performance    n.性能；绩效；表演</h4><h4 id="platform-n-平台"><a href="#platform-n-平台" class="headerlink" title="platform    n.平台"></a>platform    n.平台</h4><ul><li>plat：平台</li></ul><h4 id="reform-n-改革-v-改革"><a href="#reform-n-改革-v-改革" class="headerlink" title="reform    n.改革 v.改革"></a>reform    n.改革 v.改革</h4><h4 id="transform-v-改变（彻底改变）"><a href="#transform-v-改变（彻底改变）" class="headerlink" title="transform    v.改变（彻底改变）"></a>transform    v.改变（彻底改变）</h4><h4 id="format-n-格式"><a href="#format-n-格式" class="headerlink" title="format    n.格式"></a>format    n.格式</h4><ul><li><h5 id="at-x3D-“无意义”"><a href="#at-x3D-“无意义”" class="headerlink" title="-at&#x3D;“无意义”"></a>-at&#x3D;“无意义”</h5></li></ul><h4 id="former-adj-从前的；前者的（反义词-latter-后者的-）"><a href="#former-adj-从前的；前者的（反义词-latter-后者的-）" class="headerlink" title="former    adj.从前的；前者的（反义词:latter 后者的 ）"></a>former    adj.从前的；前者的（反义词:latter 后者的 ）</h4><h4 id="formost-最重要的"><a href="#formost-最重要的" class="headerlink" title="formost    最重要的"></a>formost    最重要的</h4><h3 id="第22串词：cess-x2F-ceed-x2F-cede（行走）"><a href="#第22串词：cess-x2F-ceed-x2F-cede（行走）" class="headerlink" title="第22串词：cess&#x2F;ceed&#x2F;cede（行走）"></a>第22串词：cess&#x2F;ceed&#x2F;cede（行走）</h3><h4 id="process-n-过程；进程-v-加工；处理"><a href="#process-n-过程；进程-v-加工；处理" class="headerlink" title="process    n.过程；进程 v.加工；处理"></a>process    n.过程；进程 v.加工；处理</h4><ul><li><h5 id="proceed-v-前进-移动；继续进行"><a href="#proceed-v-前进-移动；继续进行" class="headerlink" title="proceed    v.前进.移动；继续进行"></a>proceed    v.前进.移动；继续进行</h5></li><li><h5 id="pro-：向前"><a href="#pro-：向前" class="headerlink" title="pro-：向前"></a>pro-：向前</h5></li><li><p>in the process of  处于…过程当中</p></li></ul><h4 id="procedure-n-程序，步骤"><a href="#procedure-n-程序，步骤" class="headerlink" title="procedure    n.程序，步骤"></a>procedure    n.程序，步骤</h4><h4 id="success-n-成功"><a href="#success-n-成功" class="headerlink" title="success    n.成功"></a>success    n.成功</h4><h4 id="succeed-v-成功；继承"><a href="#succeed-v-成功；继承" class="headerlink" title="succeed    v.成功；继承"></a>succeed    v.成功；继承</h4><ul><li><h5 id="suc-：下面"><a href="#suc-：下面" class="headerlink" title="suc-：下面"></a>suc-：下面</h5></li></ul><h4 id="successful-adj-成功的"><a href="#successful-adj-成功的" class="headerlink" title="successful    adj.成功的"></a>successful    adj.成功的</h4><ul><li><h5 id="successive-adj-连续的，相继的"><a href="#successive-adj-连续的，相继的" class="headerlink" title="successive    adj.连续的，相继的"></a>successive    adj.连续的，相继的</h5></li></ul><h4 id="access-n-方法；途径；渠道-x3D-way"><a href="#access-n-方法；途径；渠道-x3D-way" class="headerlink" title="access    n.方法；途径；渠道(&#x3D; way)"></a>access    n.方法；途径；渠道(&#x3D; way)</h4><ul><li><h5 id="ac-：朝向"><a href="#ac-：朝向" class="headerlink" title="ac-：朝向"></a>ac-：朝向</h5></li></ul><h4 id="recession-n-衰退；不景气"><a href="#recession-n-衰退；不景气" class="headerlink" title="recession    n.衰退；不景气"></a>recession    n.衰退；不景气</h4><h4 id="excess-n-超过；过度-adj-额外的"><a href="#excess-n-超过；过度-adj-额外的" class="headerlink" title="excess    n.超过；过度 adj.额外的"></a>excess    n.超过；过度 adj.额外的</h4><ul><li><h5 id="ex-：out"><a href="#ex-：out" class="headerlink" title="ex-：out"></a>ex-：out</h5></li></ul><h4 id="exceed-v-超过"><a href="#exceed-v-超过" class="headerlink" title="exceed    v.超过"></a>exceed    v.超过</h4><h4 id="excessive-adj-过多的"><a href="#excessive-adj-过多的" class="headerlink" title="excessive    adj.过多的"></a>excessive    adj.过多的</h4><h4 id="ancestor-n-祖先；始祖"><a href="#ancestor-n-祖先；始祖" class="headerlink" title="ancestor    n.祖先；始祖"></a>ancestor    n.祖先；始祖</h4><ul><li><h5 id="an-：before"><a href="#an-：before" class="headerlink" title="an-：before"></a>an-：before</h5></li></ul><h3 id="第23串词：tend-x2F-tent-x2F-tens（to-stretch-伸）"><a href="#第23串词：tend-x2F-tent-x2F-tens（to-stretch-伸）" class="headerlink" title="第23串词：tend&#x2F;tent&#x2F;tens（to stretch 伸）"></a>第23串词：tend&#x2F;tent&#x2F;tens（to stretch 伸）</h3><h4 id="tend-v-照料；趋向"><a href="#tend-v-照料；趋向" class="headerlink" title="tend    v.照料；趋向"></a>tend    v.照料；趋向</h4><ul><li>tend to  倾向</li></ul><h4 id="tendency-n-倾向；趋势"><a href="#tendency-n-倾向；趋势" class="headerlink" title="tendency    n.倾向；趋势"></a>tendency    n.倾向；趋势</h4><h4 id="attend-v-出席；照料"><a href="#attend-v-出席；照料" class="headerlink" title="attend    v.出席；照料"></a>attend    v.出席；照料</h4><ul><li>attend to sth&#x2F;sb  处理事&#x2F;照料人</li></ul><h4 id="attendance-n-出席"><a href="#attendance-n-出席" class="headerlink" title="attendance    n.出席"></a>attendance    n.出席</h4><h4 id="attention-n-注意力"><a href="#attention-n-注意力" class="headerlink" title="attention    n.注意力"></a>attention    n.注意力</h4><h4 id="extend-v-延伸；扩展"><a href="#extend-v-延伸；扩展" class="headerlink" title="extend    v.延伸；扩展"></a>extend    v.延伸；扩展</h4><h4 id="extent-n-程度；范围"><a href="#extent-n-程度；范围" class="headerlink" title="extent    n.程度；范围"></a>extent    n.程度；范围</h4><ul><li>to some extent  在某种程度上</li></ul><h4 id="extension-n-延长；扩展；延长部分"><a href="#extension-n-延长；扩展；延长部分" class="headerlink" title="extension    n.延长；扩展；延长部分"></a>extension    n.延长；扩展；延长部分</h4><h4 id="extensive-adj-广泛的；大量的"><a href="#extensive-adj-广泛的；大量的" class="headerlink" title="extensive    adj.广泛的；大量的"></a>extensive    adj.广泛的；大量的</h4><h4 id="intend-v-打算；想要"><a href="#intend-v-打算；想要" class="headerlink" title="intend    v.打算；想要"></a>intend    v.打算；想要</h4><h4 id="intention-n-意图"><a href="#intention-n-意图" class="headerlink" title="intention    n.意图"></a>intention    n.意图</h4><ul><li>real&#x2F;evil&#x2F;good intention  真实意图&#x2F;恶意&#x2F;好心</li></ul><h4 id="tent-n-帐篷"><a href="#tent-n-帐篷" class="headerlink" title="tent    n.帐篷"></a>tent    n.帐篷</h4><h4 id="content-n-内容；目录-adj-满意的-v-使满足"><a href="#content-n-内容；目录-adj-满意的-v-使满足" class="headerlink" title="content    n.内容；目录 adj.满意的 v.使满足"></a>content    n.内容；目录 adj.满意的 v.使满足</h4><h4 id="tense-adj-紧张的；紧绷的-n-时态"><a href="#tense-adj-紧张的；紧绷的-n-时态" class="headerlink" title="tense    adj.紧张的；紧绷的 n.时态"></a>tense    adj.紧张的；紧绷的 n.时态</h4><h4 id="tension-n-张力-紧张-v-使紧张；拉紧"><a href="#tension-n-张力-紧张-v-使紧张；拉紧" class="headerlink" title="tension    n.张力;紧张 v.使紧张；拉紧"></a>tension    n.张力;紧张 v.使紧张；拉紧</h4><h4 id="intense-adj-强烈的"><a href="#intense-adj-强烈的" class="headerlink" title="intense    adj.强烈的"></a>intense    adj.强烈的</h4><h3 id="第24串词：ceive-x2F-cept-x2F-cap-x2F-cup（to-take，to-seize-拿，抓）"><a href="#第24串词：ceive-x2F-cept-x2F-cap-x2F-cup（to-take，to-seize-拿，抓）" class="headerlink" title="第24串词：ceive&#x2F;cept&#x2F;cap&#x2F;cup（to take，to seize 拿，抓）"></a>第24串词：ceive&#x2F;cept&#x2F;cap&#x2F;cup（to take，to seize 拿，抓）</h3><h4 id="receive-v-收到；招待；接待（被动收到）"><a href="#receive-v-收到；招待；接待（被动收到）" class="headerlink" title="receive    v.收到；招待；接待（被动收到）"></a>receive    v.收到；招待；接待（被动收到）</h4><h4 id="accept-v-承认；接受（主动接受）"><a href="#accept-v-承认；接受（主动接受）" class="headerlink" title="accept    v.承认；接受（主动接受）"></a>accept    v.承认；接受（主动接受）</h4><h4 id="acceptable-adj-可接受的"><a href="#acceptable-adj-可接受的" class="headerlink" title="acceptable    adj.可接受的"></a>acceptable    adj.可接受的</h4><h4 id="concept-n-观念"><a href="#concept-n-观念" class="headerlink" title="concept    n.观念"></a>concept    n.观念</h4><h4 id="except-conj-除了-prep-除…之外"><a href="#except-conj-除了-prep-除…之外" class="headerlink" title="except    conj.除了 prep.除…之外"></a>except    conj.除了 prep.除…之外</h4><ul><li>besides   prep.除…还….</li></ul><h4 id="exception-n-例外"><a href="#exception-n-例外" class="headerlink" title="exception    n.例外"></a>exception    n.例外</h4><ul><li>without exception    一律；无一例外</li></ul><h4 id="exceptional-adj-异常的；例外的；卓越的"><a href="#exceptional-adj-异常的；例外的；卓越的" class="headerlink" title="exceptional    adj.异常的；例外的；卓越的"></a>exceptional    adj.异常的；例外的；卓越的</h4><h4 id="perceive-v-察觉；理解"><a href="#perceive-v-察觉；理解" class="headerlink" title="perceive    v.察觉；理解"></a>perceive    v.察觉；理解</h4><ul><li><h5 id="per-：彻底，从头到尾"><a href="#per-：彻底，从头到尾" class="headerlink" title="per-：彻底，从头到尾"></a>per-：彻底，从头到尾</h5></li></ul><h4 id="capacity-n-能力；容量；资格"><a href="#capacity-n-能力；容量；资格" class="headerlink" title="capacity    n.能力；容量；资格"></a>capacity    n.能力；容量；资格</h4><h4 id="capture-v-俘获；捕捉-n-捕获"><a href="#capture-v-俘获；捕捉-n-捕获" class="headerlink" title="capture    v.俘获；捕捉 n.捕获"></a>capture    v.俘获；捕捉 n.捕获</h4><h4 id="anticipate-v-预期；预料"><a href="#anticipate-v-预期；预料" class="headerlink" title="anticipate    v.预期；预料"></a>anticipate    v.预期；预料</h4><h4 id="participate-v-参与"><a href="#participate-v-参与" class="headerlink" title="participate    v.参与"></a>participate    v.参与</h4><ul><li>take part in</li></ul><h4 id="participant-n-参与者"><a href="#participant-n-参与者" class="headerlink" title="participant    n.参与者"></a>participant    n.参与者</h4><h4 id="occupation-n-职业"><a href="#occupation-n-职业" class="headerlink" title="occupation    n.职业"></a>occupation    n.职业</h4><h3 id="第25串词：nov（new-新）"><a href="#第25串词：nov（new-新）" class="headerlink" title="第25串词：nov（new 新）"></a>第25串词：nov（new 新）</h3><h4 id="novel-n-小说-adj-新奇的（-x3D-new）"><a href="#novel-n-小说-adj-新奇的（-x3D-new）" class="headerlink" title="novel    n.小说 adj.新奇的（&#x3D;new）"></a>novel    n.小说 adj.新奇的（&#x3D;new）</h4><h4 id="innovative-adj-创新的"><a href="#innovative-adj-创新的" class="headerlink" title="innovative    adj.创新的"></a>innovative    adj.创新的</h4><h4 id="innovator-n-创新者"><a href="#innovator-n-创新者" class="headerlink" title="innovator    n.创新者"></a>innovator    n.创新者</h4><h4 id="innovate-v-创新"><a href="#innovate-v-创新" class="headerlink" title="innovate    v.创新"></a>innovate    v.创新</h4><h4 id="innovation-n-创新"><a href="#innovation-n-创新" class="headerlink" title="innovation    n.创新"></a>innovation    n.创新</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第21串词：form（形状，形成）&quot;&gt;&lt;a href=&quot;#第21串词：form（形状，形成）&quot; class=&quot;headerlink&quot; title=&quot;第21串词：form（形状，形成）&quot;&gt;&lt;/a&gt;第21串词：form（形状，形成）&lt;/h3&gt;&lt;h4 id=&quot;infor</summary>
      
    
    
    
    
    <category term="英语四级" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7/"/>
    
  </entry>
  
</feed>
