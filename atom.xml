<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mhy-blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-31T10:42:51.064Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML</title>
    <link href="http://example.com/2022/03/31/HTML/"/>
    <id>http://example.com/2022/03/31/HTML/</id>
    <published>2022-03-31T00:42:45.000Z</published>
    <updated>2022-03-31T10:42:51.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web概念概述"><a href="#web概念概述" class="headerlink" title="web概念概述"></a>web概念概述</h2><ul><li>JavaWeb：<ul><li>使用Java语言开发基于互联网的项目</li></ul></li><li>软件架构：<ol><li>C&#x2F;S: Client&#x2F;Server 客户端&#x2F;服务器端<ul><li>​    在用户本地有一个客户端程序，在远程有一个服务器端程序</li><li>如：QQ，迅雷…</li><li>优点<ol><li>用户体验好</li></ol></li><li>缺点：<ol><li>开发、安装，部署，维护 麻烦</li></ol></li></ul></li><li>只需要一个浏览器，用户通过不同的网址(URL)，客户访问不同的服务器端程序<ul><li>优点<ol><li>开发、安装，部署，维护 简单</li></ol></li><li>缺点<ol><li>如果应用过大，用户的体验可能会受到影响</li><li>对硬件要求过高</li></ol></li></ul></li></ol></li><li>B&#x2F;S架构详解<ul><li>资源分类：<ol><li>静态资源：<ul><li>使用静态网页开发技术发布的资源。</li><li>特点：<ul><li>所有用户访问，得到的结果是一样的。</li><li>如：文本，图片，音频、视频, HTML,CSS,JavaScript</li><li>如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</li></ul></li></ul></li><li>动态资源：<ul><li>使用动态网页技术发布的资源。</li><li>特点：<ul><li>所有用户访问，得到的结果可能不一样。</li><li>如：jsp&#x2F;servlet,php,asp…</li><li>如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</li></ul></li><li>我们要学习动态资源，必须先学习静态资源！</li><li>静态资源：<ul><li>HTML：用于搭建基础网页，展示页面的内容</li><li>CSS：用于美化页面，布局页面</li><li>JavaScript：控制页面的元素，让页面有一些动态的效果</li></ul></li></ul></li></ol></li></ul></li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ol><li><p>概念：是最基础的网页开发语言</p><ul><li>Hyper Text Markup Language 超文本标记语言<ul><li>超文本:<ul><li>超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本.</li></ul></li><li>标记语言:<ul><li>由标签构成的语言。&lt;标签名称&gt; 如 html，xml</li><li>标记语言不是编程语言</li></ul></li></ul></li></ul></li><li><p>快速入门：</p><ul><li><p>语法：</p><ol><li><p>html文档后缀名 .html 或者 .htm</p></li><li><p>标签分为</p><ol><li>围堵标签：有开始标签和结束标签。如 <html> </html></li><li>自闭和标签：开始标签和结束标签在一起。如 <br></li></ol></li><li><p>标签可以嵌套：</p><ul><li>需要正确嵌套，不能你中有我，我中有你</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">错误：&lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;</span><br><span class="line">正确：&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>在开始标签中可以定义属性。属性是由键值对构成，值需要用引号(单双都可)引起来</p></li><li><p>html的标签不区分大小写，但是建议使用小写。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">* 代码：</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;FONT color=&#x27;red&#x27;&gt;Hello World&lt;/font&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;font color=&#x27;green&#x27;&gt;Hello World&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>标签学习</p><ol><li><p>文件标签：构成html最基本的标签</p><ul><li>html:html文档的根标签</li><li>head：头标签。用于指定html文档的一些属性。引入外部的资源</li><li>title：标题标签。</li><li>body：体标签</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;：html 5 中定义该文档是html文档</span><br></pre></td></tr></table></figure></li><li><p>文本标签：和文本有关的标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">* 注释：&lt;!-- 注释内容 --&gt;</span><br><span class="line">* &lt;h1&gt; to &lt;h6&gt;：标题标签</span><br><span class="line">* h1~h6:字体大小逐渐递减</span><br><span class="line">* &lt;p&gt;：段落标签</span><br><span class="line">* &lt;br&gt;：换行标签</span><br><span class="line">* &lt;hr/&gt;：展示一条水平线</span><br><span class="line">* 属性：</span><br><span class="line">* color：颜色</span><br><span class="line">* width：宽度</span><br><span class="line">* size：高度</span><br><span class="line">* align：对其方式</span><br><span class="line">* center：居中</span><br><span class="line">* left：左对齐</span><br><span class="line">* right：右对齐</span><br><span class="line">* &lt;b&gt;：字体加粗</span><br><span class="line">* &lt;i&gt;：字体斜体</span><br><span class="line">* &lt;font&gt;:字体标签</span><br><span class="line">* &lt;center&gt;:文本居中</span><br><span class="line">* 属性：</span><br><span class="line">* color：颜色</span><br><span class="line">* size：大小</span><br><span class="line">* face：字体</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 属性定义：</span><br><span class="line">* color：</span><br><span class="line">1. 英文单词：red,green,blue</span><br><span class="line">2. rgb(值1，值2，值3)：值的范围：0~255  如  rgb(0,0,255)</span><br><span class="line">3. #值1值2值3：值的范围：00~FF之间。如： #FF00FF</span><br><span class="line">* width：</span><br><span class="line">1. 数值：width=&#x27;20&#x27; ,数值的单位，默认是 px(像素)</span><br><span class="line">2. 数值%：占比相对于父元素的比例</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">* 案例：公司简介</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;ch&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;黑马程序员简介&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    公司简介</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&lt;hr color=&quot;#ffd700&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;font color=&quot;#FF0000&quot;&gt;&quot;中关村黑马程序员训练营&quot;&lt;/font&gt;是由&lt;b&gt;&lt;i&gt;传智播客&lt;/i&gt;&lt;/b&gt;联合中关村软件园、CSDN， 并委托传智播客进行教学实施的软件开发高端培训机构，致力于服务各大软件企业，解决当前软件开发技术飞速发展， 而企业招不到优秀人才的困扰。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">目前，“中关村黑马程序员训练营”已成长为行业“学员质量好、课程内容深、企业满意”的移动开发高端训练基地， 并被评为中关村软件园重点扶持人才企业。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line"></span><br><span class="line">黑马程序员的学员多为大学毕业后，有理想、有梦想，想从事IT行业，而没有环境和机遇改变自己命运的年轻人。 黑马程序员的学员筛选制度，远比现在90%以上的企业招聘流程更为严格。任何一名学员想成功入学“黑马程序员”， 必须经历长达2个月的面试流程，这些流程中不仅包括严格的技术测试、自学能力测试，还包括性格测试、压力测试、 品德测试等等测试。毫不夸张地说，黑马程序员训练营所有学员都是精挑细选出来的。百里挑一的残酷筛选制度确 保学员质量，并降低企业的用人风险。</span><br><span class="line">中关村黑马程序员训练营不仅着重培养学员的基础理论知识，更注重培养项目实施管理能力，并密切关注技术革新， 不断引入先进的技术，研发更新技术课程，确保学员进入企业后不仅能独立从事开发工作，更能给企业带来新的技术体系和理念。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line"></span><br><span class="line">一直以来，黑马程序员以技术视角关注IT产业发展，以深度分享推进产业技术成长，致力于弘扬技术创新，倡导分享、 开放和协作，努力打造高质量的IT人才服务平台。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr color=&quot;#ffd700&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;gray&quot; size=&quot;2&quot;&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">        江苏传智播客教育科技股份有限公司&lt;br&gt;</span><br><span class="line">        版权所有Copyright 2006-2018&amp;copy;, All Rights Reserved 苏ICP备16007882</span><br><span class="line">    &lt;/center&gt;</span><br><span class="line">&lt;/font&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>图片标签：</p><ul><li>img：展示图片<ul><li>属性：<ul><li>src：指定图片的位置</li></ul></li></ul></li><li>代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--展示一张图片 img--&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;img src=&quot;image/jingxuan_2.jpg&quot; align=&quot;right&quot; alt=&quot;古镇&quot; width=&quot;500&quot; height=&quot;500&quot;/&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;!--</span><br><span class="line">      相对路径</span><br><span class="line">          * 以.开头的路径</span><br><span class="line">              * ./：代表当前目录  ./image/1.jpg</span><br><span class="line">              * ../:代表上一级目录</span><br><span class="line">   --&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;img src=&quot;./image/jiangwai_1.jpg&quot;&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;img src=&quot;../image/jiangwai_1.jpg&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>列表标签：</p><ul><li>有序列表：<ul><li>ol:</li><li>li:</li></ul></li><li>无序列表：<ul><li>ul:</li><li>li:</li></ul></li></ul></li><li><p>链接标签：</p><ul><li><p>a:定义一个超链接</p><ul><li>属性：<ul><li>href：指定访问资源的URL(统一资源定位符)</li><li>target：指定打开资源的方式<ul><li>_self:默认值，在当前页面打开</li><li>_blank：在空白页面打开</li></ul></li></ul></li><li>代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--超链接  a--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;http://www.itcast.cn&quot;&gt;点我&lt;/a&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;http://www.itcast.cn&quot; target=&quot;_self&quot;&gt;点我&lt;/a&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;a href=&quot;http://www.itcast.cn&quot; target=&quot;_blank&quot;&gt;点我&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;./5_列表标签.html&quot;&gt;列表标签&lt;/a&gt;&lt;br&gt;</span><br><span class="line">    &lt;a href=&quot;mailto:itcast@itcast.cn&quot;&gt;联系我们&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;a href=&quot;http://www.itcast.cn&quot;&gt;&lt;img src=&quot;image/jiangwai_1.jpg&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>div和span：</p><ul><li>div:每一个div占满一整行。块级标签<ul><li>span：文本信息在一行展示，行内标签 内联标签</li></ul></li></ul></li><li><p>语义化标签：html5中为了提高程序的可读性，提供了一些标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;header&gt;：页眉</span><br><span class="line">2. &lt;footer&gt;：页脚</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web概念概述&quot;&gt;&lt;a href=&quot;#web概念概述&quot; class=&quot;headerlink&quot; title=&quot;web概念概述&quot;&gt;&lt;/a&gt;web概念概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JavaWeb：&lt;ul&gt;
&lt;li&gt;使用Java语言开发基于互联网的项目&lt;/li&gt;
&lt;/u</summary>
      
    
    
    
    
    <category term="Java-web" scheme="http://example.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统基础1.0</title>
    <link href="http://example.com/2022/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%801-0/"/>
    <id>http://example.com/2022/03/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%801-0/</id>
    <published>2022-03-30T14:28:23.000Z</published>
    <updated>2022-03-30T14:56:15.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言程序举例"><a href="#C语言程序举例" class="headerlink" title="C语言程序举例"></a>C语言程序举例</h1><h2 id="用“系统思维”分析问题"><a href="#用“系统思维”分析问题" class="headerlink" title="用“系统思维”分析问题"></a>用“系统思维”分析问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">double a = 10;</span><br><span class="line">println(&quot;a = %d&quot;,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：在IA-32上运行时，打印结果为a&#x3D;0</p><p>在x86-64上运行时，打印出来的a是一个不确定值</p><h4 id="理解该问题需要知道"><a href="#理解该问题需要知道" class="headerlink" title="理解该问题需要知道"></a>理解该问题需要知道</h4><ul><li>IEEE 754 的表示</li><li>X87 FPU的体系结构</li><li>IA-32和x86-64中过程调用的参数传递</li><li>计算机内部的运算电路</li></ul><h2 id="什么是计算机系统？"><a href="#什么是计算机系统？" class="headerlink" title="什么是计算机系统？"></a>什么是计算机系统？</h2><h4 id="计算机系统抽象层的转换"><a href="#计算机系统抽象层的转换" class="headerlink" title="计算机系统抽象层的转换"></a>计算机系统抽象层的转换</h4><p>![截屏2022-03-30 22.49.52](&#x2F;Users&#x2F;mhy&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;计算机系统基础1-0&#x2F;截屏2022-03-30 22.49.52.png)</p><h2 id="计算机系统基础-内容提要"><a href="#计算机系统基础-内容提要" class="headerlink" title="计算机系统基础 内容提要"></a>计算机系统基础 内容提要</h2><h4 id="使学生清楚理解计算机是如何生产和运行可执行文件的"><a href="#使学生清楚理解计算机是如何生产和运行可执行文件的" class="headerlink" title="使学生清楚理解计算机是如何生产和运行可执行文件的"></a>使学生清楚理解计算机是如何生产和运行可执行文件的</h4><h2 id="为什么学习这门课程"><a href="#为什么学习这门课程" class="headerlink" title="为什么学习这门课程"></a>为什么学习这门课程</h2><ul><li>为了编程时少错误</li><li>可以找出错误</li><li>明白程序是怎样在计算机上执行的</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C语言程序举例&quot;&gt;&lt;a href=&quot;#C语言程序举例&quot; class=&quot;headerlink&quot; title=&quot;C语言程序举例&quot;&gt;&lt;/a&gt;C语言程序举例&lt;/h1&gt;&lt;h2 id=&quot;用“系统思维”分析问题&quot;&gt;&lt;a href=&quot;#用“系统思维”分析问题&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="计算机系统基础" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JDBC连接池&amp;JDBCTemplate</title>
    <link href="http://example.com/2022/03/30/JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0-JDBCTemplate/"/>
    <id>http://example.com/2022/03/30/JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0-JDBCTemplate/</id>
    <published>2022-03-30T00:33:17.000Z</published>
    <updated>2022-03-30T08:23:56.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ol><li><p>概念：其实就是一个容器(集合)，存放数据库连接的容器。</p><ol><li>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</li></ol></li><li><p>好处：</p><ol><li>节约资源</li><li>用户访问高效</li></ol></li><li><p>实现：</p><ol><li>标准接口：DataSource   javax.sql包下的<ol><li>方法：<ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul></li></ol></li><li>一般我们不去实现它，有数据库厂商来实现<ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ol></li></ol></li><li><p>C3P0：数据库连接池技术</p><ul><li><p>步骤</p><ol><li>导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，<ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li>定义配置文件：<ul><li>名称： c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可。</li></ul></li><li>创建核心对象 数据库连接池对象  <ul><li>ComboPooledDataSource</li></ul></li><li>获取连接： getConnection</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//1.创建数据库连接池对象</span><br><span class="line">      DataSource ds  = new ComboPooledDataSource();</span><br><span class="line">      //2. 获取连接对象</span><br><span class="line">      Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p><ol><li><p>步骤：</p><ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul></li><li>加载配置文件。Properties</li><li>获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//3.加载配置文件</span><br><span class="line">        Properties pro = new Properties();</span><br><span class="line">        InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);</span><br><span class="line">        pro.load(is);</span><br><span class="line">        //4.获取连接池对象</span><br><span class="line">        DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        //5.获取连接</span><br><span class="line">        Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure></li><li><p>定义工具类</p><ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol><p>代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public class JDBCUtils &#123;</span><br><span class="line">    private static DataSource ds;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        Properties pro = new Properties();</span><br><span class="line">        try &#123;</span><br><span class="line">            pro.load(DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));</span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Connection getConnection() throws SQLException &#123;</span><br><span class="line">        return ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void close(Statement stmt,Connection conn)&#123;</span><br><span class="line">       /* if(stmt != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(conn != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                conn.close();//归还连接</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;*/</span><br><span class="line"></span><br><span class="line">        close(null,stmt,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void close(ResultSet rs , Statement stmt, Connection conn)&#123;</span><br><span class="line">        if(rs != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(stmt != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(conn != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                conn.close();//归还连接</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static DataSource getDataSource()&#123;</span><br><span class="line">        return  ds;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul><li>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</li><li>步骤<ul><li>导入jar包</li><li>创建JdbcTemplate对象。依赖于数据源DataSource<ul><li>JdbcTemplate template &#x3D; new JdbcTemplate(ds);</li></ul></li></ul></li><li>调用JdbcTemplate的方法来完成CRUD的操作<ul><li>update():执行DML语句。增、删、改语句</li><li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li>queryForList():查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li>query():查询结果，将结果封装为JavaBean对象</li><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ul><p>练习</p><ul><li>需求<ol><li>修改1号数据的 salary 为 10000</li><li>添加一条记录</li><li>删除刚才添加的记录</li><li>查询id为1的记录，将其封装为Map集合</li><li>查询所有记录，将其封装为List</li><li>查询所有记录，将其封装为Emp对象的List集合</li><li>查询总记录数</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//1. 获取JDBCTemplate对象</span><br><span class="line">    private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 1. 修改1号数据的 salary 为 10000</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void test1()&#123;</span><br><span class="line"></span><br><span class="line">        //2. 定义sql</span><br><span class="line">        String sql = &quot;update emp set salary = 10000 where id = 1001&quot;;</span><br><span class="line">        //3. 执行sql</span><br><span class="line">        int count = template.update(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 2. 添加一条记录</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void test2()&#123;</span><br><span class="line">        String sql = &quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;;</span><br><span class="line">        int count = template.update(sql, 1015, &quot;郭靖&quot;, 10);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 3.删除刚才添加的记录</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void test3()&#123;</span><br><span class="line">        String sql = &quot;delete from emp where id = ?&quot;;</span><br><span class="line">        int count = template.update(sql, 1015);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 4.查询id为1001的记录，将其封装为Map集合</span><br><span class="line">     * 注意：这个方法查询的结果集长度只能是1</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void test4()&#123;</span><br><span class="line">        String sql = &quot;select * from emp where id = ? or id = ?&quot;;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(sql, 1001,1002);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        //&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 5. 查询所有记录，将其封装为List</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void test5()&#123;</span><br><span class="line">        String sql = &quot;select * from emp&quot;;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line"></span><br><span class="line">        for (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test6_2()&#123;</span><br><span class="line">        String sql = &quot;select * from emp&quot;;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, new BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));</span><br><span class="line">        for (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 7. 查询总记录数</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test7()&#123;</span><br><span class="line">        String sql = &quot;select count(id) from emp&quot;;</span><br><span class="line">        Long total = template.queryForObject(sql, Long.class);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test6()&#123;</span><br><span class="line">        String sql = &quot;select * from emp&quot;;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, new RowMapper&lt;Emp&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public Emp mapRow(ResultSet rs, int i) throws SQLException &#123;</span><br><span class="line">                Emp emp = new Emp();</span><br><span class="line">                int id = rs.getInt(&quot;id&quot;);</span><br><span class="line">                String ename = rs.getString(&quot;ename&quot;);</span><br><span class="line">                int job_id = rs.getInt(&quot;job_id&quot;);</span><br><span class="line">                int mgr = rs.getInt(&quot;mgr&quot;);</span><br><span class="line">                Date joindate = rs.getDate(&quot;joindate&quot;);</span><br><span class="line">                double salary = rs.getDouble(&quot;salary&quot;);</span><br><span class="line">                double bonus = rs.getDouble(&quot;bonus&quot;);</span><br><span class="line">                int dept_id = rs.getInt(&quot;dept_id&quot;);</span><br><span class="line"></span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setEname(ename);</span><br><span class="line">                emp.setJob_id(job_id);</span><br><span class="line">                emp.setMgr(mgr);</span><br><span class="line">                emp.setJoindate(joindate);</span><br><span class="line">                emp.setSalary(salary);</span><br><span class="line">                emp.setBonus(bonus);</span><br><span class="line">                emp.setDept_id(dept_id);</span><br><span class="line"></span><br><span class="line">                return emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">for (Emp emp : list) &#123;</span><br><span class="line">  System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据库连接池&quot;&gt;&lt;a href=&quot;#数据库连接池&quot; class=&quot;headerlink&quot; title=&quot;数据库连接池&quot;&gt;&lt;/a&gt;数据库连接池&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;概念：其实就是一个容器(集合)，存放数据库连接的容器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当系统初</summary>
      
    
    
    
    
    <category term="Java-web" scheme="http://example.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>操作系统上的程序</title>
    <link href="http://example.com/2022/03/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%9A%84%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2022/03/29/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%9A%84%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-03-29T13:27:57.000Z</published>
    <updated>2022-03-30T00:30:10.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态机与数字电路"><a href="#状态机与数字电路" class="headerlink" title="状态机与数字电路"></a>状态机与数字电路</h1><h2 id="状态机：复习"><a href="#状态机：复习" class="headerlink" title="状态机：复习"></a>状态机：复习</h2><p>概念：<a href="https://blog.csdn.net/pingxiaozhao/article/details/109239311">https://blog.csdn.net/pingxiaozhao/article/details/109239311</a></p><p>数字逻辑电路</p><ul><li>状态&#x3D;寄存器保存的值（flip-flop）</li><li>初始状态&#x3D;RESET（implementation dependent）</li><li>迁移&#x3D;组合逻辑电路计算寄存器下一周期的值</li></ul><p> 例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X′=¬X∧Y</span><br><span class="line">Y′=¬X∧¬Y</span><br></pre></td></tr></table></figure><h1 id="什么是程序（源代码视角）"><a href="#什么是程序（源代码视角）" class="headerlink" title="什么是程序（源代码视角）"></a>什么是程序（源代码视角）</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;状态机与数字电路&quot;&gt;&lt;a href=&quot;#状态机与数字电路&quot; class=&quot;headerlink&quot; title=&quot;状态机与数字电路&quot;&gt;&lt;/a&gt;状态机与数字电路&lt;/h1&gt;&lt;h2 id=&quot;状态机：复习&quot;&gt;&lt;a href=&quot;#状态机：复习&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="http://example.com/2022/03/27/JDBC/"/>
    <id>http://example.com/2022/03/27/JDBC/</id>
    <published>2022-03-27T07:22:27.000Z</published>
    <updated>2022-03-29T08:25:20.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC:"></a>JDBC:</h2><ol><li>概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库<ul><li>JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul></li><li>快速入门<ul><li>步骤<ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar<ol><li>复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下</li><li>右键–&gt;Add As Library</li></ol></li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol></li></ul></li></ol><p>代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//1. 导入驱动jar包</span><br><span class="line">        //2.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        //3.获取数据库连接对象</span><br><span class="line">        Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/db3&quot;, &quot;root&quot;, &quot;root&quot;);</span><br><span class="line">        //4.定义sql语句</span><br><span class="line">        String sql = &quot;update account set balance = 500 where id = 1&quot;;</span><br><span class="line">        //5.获取执行sql的对象 Statement</span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        //6.执行sql</span><br><span class="line">        int count = stmt.executeUpdate(sql);</span><br><span class="line">        //7.处理结果</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        //8.释放资源</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br></pre></td></tr></table></figure><p>3.详解各个对象</p><ol><li>DriverManager：驱动管理对象</li></ol><ul><li><p>功能：</p><ol><li>注册驱动：告诉程序该使用哪一个数据库驱动jar<br>static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。<br>写代码使用：  Class.forName(“com.mysql.jdbc.Driver”);<br>通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">    java.sql.DriverManager.registerDriver(new Driver());</span><br><span class="line">        &#125; catch (SQLException E) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。</p><p>2.获取数据库连接：</p><ul><li>方法：static Connection getConnection(String url, String user, String password) </li><li>参数<ul><li>url：指定连接的路径<ul><li>语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称</li><li>例子：jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db3</li><li>细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称</li><li>user：用户名</li><li>password：密码</li></ul></li></ul></li></ul></li></ul><p>2.Connection：数据库连接对象</p><ol><li>功能：<ol><li>获取执行sql 的对象<ul><li>Statement createStatement()</li><li>PreparedStatement prepareStatement(String sql)</li></ul></li><li>管理事务：<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</li><li>提交事务：commit() </li><li>回滚事务：rollback()</li></ul></li><li>Statement：执行sql的对象<ol><li>执行sql<ol><li>boolean execute(String sql) ：可以执行任意的sql 了解 </li><li>int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句<ul><li>返回值：影响的行数，可以通过这个影响的行数判断DML语句是</li></ul></li><li>ResultSet executeQuery(String sql)  ：执行DQL（select)语句</li></ol></li></ol></li></ol></li></ol><p>3.Statement：执行sql的对象</p><ol><li><p>执行sql</p><ol><li>boolean execute(String sql) ：可以执行任意的sql 了解 </li><li>int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句<ul><li>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</li></ul></li><li>ResultSet executeQuery(String sql)  ：执行DQL（select)语句</li></ol><p>练习</p><ol><li>account表 添加一条记录</li><li>account表 修改记录</li><li>account表 删除一条记录</li></ol><p>代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = null;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            //1. 注册驱动</span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">            //2. 定义sql</span><br><span class="line">            String sql = &quot;insert into account values(null,&#x27;王五&#x27;,3000)&quot;;</span><br><span class="line">            //3.获取Connection对象</span><br><span class="line">            conn = DriverManager.getConnection(&quot;jdbc:mysql:///db3&quot;, &quot;root&quot;, &quot;root&quot;);</span><br><span class="line">            //4.获取执行sql的对象 Statement</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            //5.执行sql</span><br><span class="line">            int count = stmt.executeUpdate(sql);//影响的行数</span><br><span class="line">            //6.处理结果</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            if(count &gt; 0)&#123;</span><br><span class="line">                System.out.println(&quot;添加成功！&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.out.println(&quot;添加失败！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            //stmt.close();</span><br><span class="line">            //7. 释放资源</span><br><span class="line">            //避免空指针异常</span><br><span class="line">            if(stmt != null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(conn != null)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><p>4.ResultSet：结果集对象,封装查询结果</p><ul><li>boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</li><li>getXxx(参数):获取数据<ul><li>Xxx：代表数据类型   如： int getInt() ,    String getString()</li><li>参数：<ol><li>int：代表列的编号,从1开始   如： getString(1)</li><li>String：代表列名称。 如： getDouble(“balance”)</li></ol></li><li>注意：</li><li>使用步骤：<ol><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据</li></ol></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//循环判断游标是否是最后一行末尾。</span><br><span class="line">while(rs.next())&#123;</span><br><span class="line">//获取数据</span><br><span class="line">//6.2 获取数据</span><br><span class="line">int id = rs.getInt(1);</span><br><span class="line">String name = rs.getString(&quot;name&quot;);</span><br><span class="line">double balance = rs.getDouble(3);</span><br><span class="line"></span><br><span class="line">System.out.println(id + &quot;---&quot; + name + &quot;---&quot; + balance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>练习<ul><li>定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。<ol><li>定义Emp类</li><li>定义方法 public List<Emp> findAll(){}</Emp></li><li>实现方法 select * from emp;</li></ol></li></ul></li></ul><p>5.PreparedStatement：执行sql的对象</p><ol><li>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<ol><li>输入用户随便，输入密码：a’ or ‘a’ &#x3D; ‘a</li><li>sql：select * from user where username &#x3D; ‘fhdsjkf’ and password &#x3D; ‘a’ or ‘a’ &#x3D; ‘a’</li></ol></li><li>解决sql注入问题：使用PreparedStatement对象来解决</li><li>预编译的SQL：参数使用?作为占位符</li><li>步骤：<ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql<ul><li>注意：sql的参数使用？作为占位符。 如：select * from user where username &#x3D; ? and password &#x3D; ?;</li></ul></li><li>获取执行sql语句的对象  PreparedStatement  Connection.prepareStatement(String sql) </li><li>给？赋值：<ul><li>方法： setXxx(参数1,参数2)<ul><li>参数1：？的位置编号 从1 开始</li><li>参数2：？的值</li></ul></li></ul></li><li>执行sql，接受返回结果，不需要传递sql语句</li><li>处理结果</li><li>释放资源</li></ol></li><li>注意：后期都会使用PreparedStatement来完成增删改查的所有操作<ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ol><h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><ul><li><p>目的</p></li><li><p>分析</p><ol><li><p>注册驱动也抽取</p></li><li><p>抽取一个方法获取连接对象</p><ul><li>需求：不想传递参数（麻烦），还得保证工具类的通用性。</li><li>解决：配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.properties</span><br><span class="line">url=</span><br><span class="line">user=</span><br><span class="line">password=</span><br></pre></td></tr></table></figure></li><li><p>抽取一个方法释放资源</p></li></ol></li><li><p>代码实现：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class JDBCUtils &#123;</span><br><span class="line">    private static String url;</span><br><span class="line">    private static String user;</span><br><span class="line">    private static String password;</span><br><span class="line">    private static String driver;</span><br><span class="line">    /**</span><br><span class="line">     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span><br><span class="line">     */</span><br><span class="line">    static&#123;</span><br><span class="line">        //读取资源文件，获取值。</span><br><span class="line">try &#123;</span><br><span class="line">            //1. 创建Properties集合类。</span><br><span class="line">            Properties pro = new Properties();</span><br><span class="line"></span><br><span class="line">            //获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res  = classLoader.getResource(&quot;jdbc.properties&quot;);</span><br><span class="line">            String path = res.getPath();</span><br><span class="line">            System.out.println(path);///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties</span><br><span class="line">            //2. 加载文件</span><br><span class="line">           // pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));</span><br><span class="line">            pro.load(new FileReader(path));</span><br><span class="line"></span><br><span class="line">            //3. 获取数据，赋值</span><br><span class="line">            url = pro.getProperty(&quot;url&quot;);</span><br><span class="line">            user = pro.getProperty(&quot;user&quot;);</span><br><span class="line">            password = pro.getProperty(&quot;password&quot;);</span><br><span class="line">            driver = pro.getProperty(&quot;driver&quot;);</span><br><span class="line">            //4. 注册驱动</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 获取连接</span><br><span class="line">     * @return 连接对象</span><br><span class="line">     */</span><br><span class="line">    public static Connection getConnection() throws SQLException &#123;</span><br><span class="line"></span><br><span class="line">        return DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 释放资源</span><br><span class="line">     * @param stmt</span><br><span class="line">     * @param conn</span><br><span class="line">     */</span><br><span class="line">    public static void close(Statement stmt,Connection conn)&#123;</span><br><span class="line">        if( stmt != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if( conn != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 释放资源</span><br><span class="line">     * @param stmt</span><br><span class="line">     * @param conn</span><br><span class="line">     */</span><br><span class="line">    public static void close(ResultSet rs,Statement stmt, Connection conn)&#123;</span><br><span class="line">        if( rs != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if( stmt != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if( conn != null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>练习</p><ul><li><p>需求：</p><ol><li>通过键盘录入用户名和密码</li><li>判断用户是否登录成功<ul><li>select * from user where username &#x3D; “” and password &#x3D; “”;</li><li>如果这个sql有查询结果，则成功，反之，则失败</li></ul></li></ol></li><li><p>步骤</p><ol><li>创建数据库表 user</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE USER(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(32),</span><br><span class="line">PASSWORD VARCHAR(32)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO USER VALUES(NULL,&#x27;zhangsan&#x27;,&#x27;123&#x27;);</span><br><span class="line">INSERT INTO USER VALUES(NULL,&#x27;lisi&#x27;,&#x27;234&#x27;)</span><br></pre></td></tr></table></figure><p>2.代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class JDBCDemo9 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //1.键盘录入，接受用户名和密码</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入用户名：&quot;);</span><br><span class="line">        String username = sc.nextLine();</span><br><span class="line">        System.out.println(&quot;请输入密码：&quot;);</span><br><span class="line">        String password = sc.nextLine();</span><br><span class="line">        //2.调用方法</span><br><span class="line">        boolean flag = new JDBCDemo9().login(username, password);</span><br><span class="line">        //3.判断结果，输出不同语句</span><br><span class="line">        if(flag)&#123;</span><br><span class="line">            //登录成功</span><br><span class="line">            System.out.println(&quot;登录成功！&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;用户名或密码错误！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>3.登录方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 登录方法</span><br><span class="line">     */</span><br><span class="line">    public boolean login(String username ,String password)&#123;</span><br><span class="line">        if(username == null || password == null)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //连接数据库判断是否登录成功</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        Statement stmt =  null;</span><br><span class="line">        ResultSet rs = null;</span><br><span class="line">        //1.获取连接</span><br><span class="line">        try &#123;</span><br><span class="line">            conn =  JDBCUtils.getConnection();</span><br><span class="line">            //2.定义sql</span><br><span class="line">            String sql = &quot;select * from user where username = &#x27;&quot;+username+&quot;&#x27; and password = &#x27;&quot;+password+&quot;&#x27; &quot;;</span><br><span class="line">            //3.获取执行sql的对象</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            //4.执行查询</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            //5.判断</span><br><span class="line">           /* if(rs.next())&#123;//如果有下一行，则返回true</span><br><span class="line">                return true;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;*/</span><br><span class="line">           return rs.next();//如果有下一行，则返回true</span><br><span class="line"></span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            JDBCUtils.close(rs,stmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line">         return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h2><ol><li>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</li><li>操作<ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li>使用Connection对象来管理事务<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：commit() <ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback() <ul><li>在catch中回滚事务</li></ul></li></ul></li><li>代码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public class JDBCDemo10 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        PreparedStatement pstmt1 = null;</span><br><span class="line">        PreparedStatement pstmt2 = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //1.获取连接</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            //开启事务</span><br><span class="line">            conn.setAutoCommit(false);</span><br><span class="line"></span><br><span class="line">            //2.定义sql</span><br><span class="line">            //2.1 张三 - 500</span><br><span class="line">            String sql1 = &quot;update account set balance = balance - ? where id = ?&quot;;</span><br><span class="line">            //2.2 李四 + 500</span><br><span class="line">            String sql2 = &quot;update account set balance = balance + ? where id = ?&quot;;</span><br><span class="line">            //3.获取执行sql对象</span><br><span class="line">            pstmt1 = conn.prepareStatement(sql1);</span><br><span class="line">            pstmt2 = conn.prepareStatement(sql2);</span><br><span class="line">            //4. 设置参数</span><br><span class="line">            pstmt1.setDouble(1,500);</span><br><span class="line">            pstmt1.setInt(2,1);</span><br><span class="line"></span><br><span class="line">            pstmt2.setDouble(1,500);</span><br><span class="line">            pstmt2.setInt(2,2);</span><br><span class="line">            //5.执行sql</span><br><span class="line">            pstmt1.executeUpdate();</span><br><span class="line">            // 手动制造异常</span><br><span class="line">            int i = 3/0;</span><br><span class="line"></span><br><span class="line">            pstmt2.executeUpdate();</span><br><span class="line">            //提交事务</span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            //事务回滚</span><br><span class="line">            try &#123;</span><br><span class="line">                if(conn != null) &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            JDBCUtils.close(pstmt1,conn);</span><br><span class="line">            JDBCUtils.close(pstmt2,null);</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JDBC&quot;&gt;&lt;a href=&quot;#JDBC&quot; class=&quot;headerlink&quot; title=&quot;JDBC:&quot;&gt;&lt;/a&gt;JDBC:&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库</summary>
      
    
    
    
    
    <category term="Java-web" scheme="http://example.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>MySQL多表和事物</title>
    <link href="http://example.com/2022/03/26/MySQL%E5%A4%9A%E8%A1%A8%E5%92%8C%E4%BA%8B%E7%89%A9/"/>
    <id>http://example.com/2022/03/26/MySQL%E5%A4%9A%E8%A1%A8%E5%92%8C%E4%BA%8B%E7%89%A9/</id>
    <published>2022-03-26T01:03:21.000Z</published>
    <updated>2022-03-29T01:33:49.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li>查询语法<ul><li>select<br>    列名列表<br>  from<br>      表名列表<br>  where….</li></ul></li><li>准备sql</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建部门表</span><br><span class="line">CREATE TABLE dept(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">INSERT INTO dept (NAME) VALUES (&#x27;开发部&#x27;),(&#x27;市场部&#x27;),(&#x27;财务部&#x27;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">创建员工表</span><br><span class="line">CREATE TABLE emp (</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(10),</span><br><span class="line">gender CHAR(1), -- 性别</span><br><span class="line">salary DOUBLE, -- 工资</span><br><span class="line">join_date DATE, -- 入职日期</span><br><span class="line">dept_id INT,</span><br><span class="line">FOREIGN KEY (dept_id) REFERENCES dept(id) -- 外键，关联部门表(部门表的主键)</span><br><span class="line">);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#x27;孙悟空&#x27;,&#x27;男&#x27;,7200,&#x27;2013-02-24&#x27;,1);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#x27;猪八戒&#x27;,&#x27;男&#x27;,3600,&#x27;2010-12-02&#x27;,2);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#x27;唐僧&#x27;,&#x27;男&#x27;,9000,&#x27;2008-08-08&#x27;,2);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#x27;白骨精&#x27;,&#x27;女&#x27;,5000,&#x27;2015-10-07&#x27;,3);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#x27;蜘蛛精&#x27;,&#x27;女&#x27;,4500,&#x27;2011-03-14&#x27;,1);</span><br></pre></td></tr></table></figure><ul><li><p>笛卡尔积</p><ul><li>有两个集合A,B .取这两个集合的所有组成情况。</li><li>要完成多表查询，需要消除无用的数据</li></ul></li><li><p>多表查询的分类：</p><ol><li><p>内连接查询：</p><ol><li><p>隐式内连接：使用where条件消除无用数据</p><ul><li>例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工信息和对应的部门信息</span><br><span class="line"></span><br><span class="line">SELECT * FROM emp,dept WHERE emp.`dept_id` = dept.`id`;</span><br><span class="line"></span><br><span class="line">-- 查询员工表的名称，性别。部门表的名称</span><br><span class="line">SELECT emp.name,emp.gender,dept.name FROM emp,dept WHERE emp.`dept_id` = dept.`id`;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">t1.name, -- 员工表的姓名</span><br><span class="line">t1.gender,-- 员工表的性别</span><br><span class="line">t2.name -- 部门表的名称</span><br><span class="line">FROM</span><br><span class="line">emp t1,</span><br><span class="line">dept t2</span><br><span class="line">WHERE </span><br><span class="line">t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure></li><li><p>显式内连接：</p><ul><li>语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件</li><li>例<ul><li>SELECT * FROM emp INNER JOIN dept ON emp.<code>dept_id</code> &#x3D; dept.<code>id</code>;    </li><li>SELECT * FROM emp JOIN dept ON emp.<code>dept_id</code> &#x3D; dept.<code>id</code>;</li></ul></li></ul></li><li><p>内连接查询：</p><ol><li>从哪些表中查询数据</li><li>条件是什么</li><li>查询哪些字段</li></ol></li></ol></li><li><p>外链接查询：</p><ol><li><p>左外连接：</p><ul><li>语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；</li><li>查询的是左表所有数据以及其交集部分。</li><li>例子</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span><br><span class="line">SELECT t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure></li><li><p>右外连接：</p><ul><li>语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；</li><li>查询的是右表所有数据以及其交集部分。</li><li>例子</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`;</span><br></pre></td></tr></table></figure></li><li><p>子查询：</p></li></ol><ul><li>概念：查询中嵌套查询，称嵌套查询为子查询。</li></ul>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 查询工资最高的员工信息</span><br><span class="line">-- 1 查询最高的工资是多少 9000</span><br><span class="line">SELECT MAX(salary) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 2 查询员工信息，并且工资等于9000的</span><br><span class="line">SELECT * FROM emp WHERE emp.`salary` = 9000;</span><br><span class="line"></span><br><span class="line">-- 一条sql就完成这个操作。子查询</span><br><span class="line">SELECT * FROM emp WHERE emp.`salary` = (SELECT MAX(salary) FROM emp);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>子查询的不同种情况</p><ol><li><p>子查询的结果是单行单列的：</p><ul><li>子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;&#x3D; &lt; &lt;&#x3D; &#x3D;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工工资小于平均工资的人</span><br><span class="line">SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);</span><br></pre></td></tr></table></figure></li><li><p>子查询的结果是多行单列的：</p><ul><li>子查询可以作为条件，使用运算符in来判断</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询&#x27;财务部&#x27;和&#x27;市场部&#x27;所有的员工信息</span><br><span class="line">SELECT id FROM dept WHERE NAME = &#x27;财务部&#x27; OR NAME = &#x27;市场部&#x27;;</span><br><span class="line">SELECT * FROM emp WHERE dept_id = 3 OR dept_id = 2;</span><br><span class="line">-- 子查询</span><br><span class="line">SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME = &#x27;财务部&#x27; OR NAME = &#x27;市场部&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>子查询的结果是多行多列的：</p><ul><li>子查询可以作为一张虚拟表参与查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span><br><span class="line"></span><br><span class="line">-- 子查询</span><br><span class="line">SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.`join_date` &gt; &#x27;2011-11-11&#x27;) t2</span><br><span class="line">WHERE t1.id = t2.dept_id;</span><br><span class="line"></span><br><span class="line">-- 普通内连接</span><br><span class="line">SELECT * FROM emp t1,dept t2 WHERE t1.`dept_id` = t2.`id` AND t1.`join_date` &gt;  &#x27;2011-11-11&#x27;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>练习</p><p>表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">-- 部门表</span><br><span class="line">CREATE TABLE dept (</span><br><span class="line">  id INT PRIMARY KEY PRIMARY KEY, -- 部门id</span><br><span class="line">  dname VARCHAR(50), -- 部门名称</span><br><span class="line">  loc VARCHAR(50) -- 部门所在地</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加4个部门</span><br><span class="line">INSERT INTO dept(id,dname,loc) VALUES </span><br><span class="line">(10,&#x27;教研部&#x27;,&#x27;北京&#x27;),</span><br><span class="line">(20,&#x27;学工部&#x27;,&#x27;上海&#x27;),</span><br><span class="line">(30,&#x27;销售部&#x27;,&#x27;广州&#x27;),</span><br><span class="line">(40,&#x27;财务部&#x27;,&#x27;深圳&#x27;);</span><br><span class="line"></span><br><span class="line">-- 职务表，职务名称，职务描述</span><br><span class="line">CREATE TABLE job (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  jname VARCHAR(20),</span><br><span class="line">  description VARCHAR(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加4个职务</span><br><span class="line">INSERT INTO job (id, jname, description) VALUES</span><br><span class="line">(1, &#x27;董事长&#x27;, &#x27;管理整个公司，接单&#x27;),</span><br><span class="line">(2, &#x27;经理&#x27;, &#x27;管理部门员工&#x27;),</span><br><span class="line">(3, &#x27;销售员&#x27;, &#x27;向客人推销产品&#x27;),</span><br><span class="line">(4, &#x27;文员&#x27;, &#x27;使用办公软件&#x27;);</span><br><span class="line"></span><br><span class="line">-- 员工表</span><br><span class="line">CREATE TABLE emp (</span><br><span class="line">  id INT PRIMARY KEY, -- 员工id</span><br><span class="line">  ename VARCHAR(50), -- 员工姓名</span><br><span class="line">  job_id INT, -- 职务id</span><br><span class="line">  mgr INT , -- 上级领导</span><br><span class="line">  joindate DATE, -- 入职日期</span><br><span class="line">  salary DECIMAL(7,2), -- 工资</span><br><span class="line">  bonus DECIMAL(7,2), -- 奖金</span><br><span class="line">  dept_id INT, -- 所在部门编号</span><br><span class="line">  CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),</span><br><span class="line">  CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加员工</span><br><span class="line">INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES </span><br><span class="line">(1001,&#x27;孙悟空&#x27;,4,1004,&#x27;2000-12-17&#x27;,&#x27;8000.00&#x27;,NULL,20),</span><br><span class="line">(1002,&#x27;卢俊义&#x27;,3,1006,&#x27;2001-02-20&#x27;,&#x27;16000.00&#x27;,&#x27;3000.00&#x27;,30),</span><br><span class="line">(1003,&#x27;林冲&#x27;,3,1006,&#x27;2001-02-22&#x27;,&#x27;12500.00&#x27;,&#x27;5000.00&#x27;,30),</span><br><span class="line">(1004,&#x27;唐僧&#x27;,2,1009,&#x27;2001-04-02&#x27;,&#x27;29750.00&#x27;,NULL,20),</span><br><span class="line">(1005,&#x27;李逵&#x27;,4,1006,&#x27;2001-09-28&#x27;,&#x27;12500.00&#x27;,&#x27;14000.00&#x27;,30),</span><br><span class="line">(1006,&#x27;宋江&#x27;,2,1009,&#x27;2001-05-01&#x27;,&#x27;28500.00&#x27;,NULL,30),</span><br><span class="line">(1007,&#x27;刘备&#x27;,2,1009,&#x27;2001-09-01&#x27;,&#x27;24500.00&#x27;,NULL,10),</span><br><span class="line">(1008,&#x27;猪八戒&#x27;,4,1004,&#x27;2007-04-19&#x27;,&#x27;30000.00&#x27;,NULL,20),</span><br><span class="line">(1009,&#x27;罗贯中&#x27;,1,NULL,&#x27;2001-11-17&#x27;,&#x27;50000.00&#x27;,NULL,10),</span><br><span class="line">(1010,&#x27;吴用&#x27;,3,1006,&#x27;2001-09-08&#x27;,&#x27;15000.00&#x27;,&#x27;0.00&#x27;,30),</span><br><span class="line">(1011,&#x27;沙僧&#x27;,4,1004,&#x27;2007-05-23&#x27;,&#x27;11000.00&#x27;,NULL,20),</span><br><span class="line">(1012,&#x27;李逵&#x27;,4,1006,&#x27;2001-12-03&#x27;,&#x27;9500.00&#x27;,NULL,30),</span><br><span class="line">(1013,&#x27;小白龙&#x27;,4,1004,&#x27;2001-12-03&#x27;,&#x27;30000.00&#x27;,NULL,20),</span><br><span class="line">(1014,&#x27;关羽&#x27;,4,1007,&#x27;2002-01-23&#x27;,&#x27;13000.00&#x27;,NULL,10);</span><br><span class="line"></span><br><span class="line">-- 工资等级表</span><br><span class="line">CREATE TABLE salarygrade (</span><br><span class="line">  grade INT PRIMARY KEY,   -- 级别</span><br><span class="line">  losalary INT,  -- 最低工资</span><br><span class="line">  hisalary INT -- 最高工资</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加5个工资等级</span><br><span class="line">INSERT INTO salarygrade(grade,losalary,hisalary) VALUES </span><br><span class="line">(1,7000,12000),</span><br><span class="line">(2,12010,14000),</span><br><span class="line">(3,14010,20000),</span><br><span class="line">(4,20010,30000),</span><br><span class="line">(5,30010,99990);</span><br></pre></td></tr></table></figure><p>需求</p><p>需求1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</span><br><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表</span><br><span class="line">2.查询条件 emp.job_id = job.id</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">SELECT </span><br><span class="line">t1.`id`, -- 员工编号</span><br><span class="line">t1.`ename`, -- 员工姓名</span><br><span class="line">t1.`salary`,-- 工资</span><br><span class="line">t2.`jname`, -- 职务名称</span><br><span class="line">t2.`description` -- 职务描述</span><br><span class="line">FROM </span><br><span class="line">emp t1, job t2</span><br><span class="line">WHERE </span><br><span class="line">t1.`job_id` = t2.`id`;</span><br></pre></td></tr></table></figure><p>需求2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</span><br><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept</span><br><span class="line">2. 条件： emp.job_id = job.id and emp.dept_id = dept.id</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">t1.`id`, -- 员工编号</span><br><span class="line">t1.`ename`, -- 员工姓名</span><br><span class="line">t1.`salary`,-- 工资</span><br><span class="line">t2.`jname`, -- 职务名称</span><br><span class="line">t2.`description`, -- 职务描述</span><br><span class="line">t3.`dname`, -- 部门名称</span><br><span class="line">t3.`loc` -- 部门位置</span><br><span class="line">FROM </span><br><span class="line">emp t1, job t2,dept t3</span><br><span class="line">WHERE </span><br><span class="line">t1.`job_id` = t2.`id` AND t1.`dept_id` = t3.`id`;</span><br></pre></td></tr></table></figure><p>需求3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 3.查询员工姓名，工资，工资等级</span><br><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1.员工姓名，工资 emp  工资等级 salarygrade</span><br><span class="line">2.条件 emp.salary &gt;= salarygrade.losalary and emp.salary &lt;= salarygrade.hisalary</span><br><span class="line">emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</span><br><span class="line">*/</span><br><span class="line">SELECT </span><br><span class="line">t1.ename ,</span><br><span class="line">t1.`salary`,</span><br><span class="line">t2.*</span><br><span class="line">FROM emp t1, salarygrade t2</span><br><span class="line">WHERE t1.`salary` BETWEEN t2.`losalary` AND t2.`hisalary`;</span><br></pre></td></tr></table></figure><p>需求4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</span><br><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade</span><br><span class="line">2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">SELECT </span><br><span class="line">t1.`ename`,</span><br><span class="line">t1.`salary`,</span><br><span class="line">t2.`jname`,</span><br><span class="line">t2.`description`,</span><br><span class="line">t3.`dname`,</span><br><span class="line">t3.`loc`,</span><br><span class="line">t4.`grade`</span><br><span class="line">FROM </span><br><span class="line">emp t1,job t2,dept t3,salarygrade t4</span><br><span class="line">WHERE </span><br><span class="line">t1.`job_id` = t2.`id` </span><br><span class="line">AND t1.`dept_id` = t3.`id`</span><br><span class="line">AND t1.`salary` BETWEEN t4.`losalary` AND t4.`hisalary`;</span><br></pre></td></tr></table></figure><p>需求5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 5.查询出部门编号、部门名称、部门位置、部门人数</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表</span><br><span class="line">2.使用分组查询。按照emp.dept_id完成分组，查询count(id)</span><br><span class="line">3.使用子查询将第2步的查询结果和dept表进行关联查询</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">SELECT </span><br><span class="line">t1.`id`,t1.`dname`,t1.`loc` , t2.total</span><br><span class="line">FROM </span><br><span class="line">dept t1,</span><br><span class="line">(SELECT</span><br><span class="line">dept_id,COUNT(id) total</span><br><span class="line">FROM </span><br><span class="line">emp</span><br><span class="line">GROUP BY dept_id) t2</span><br><span class="line">WHERE t1.`id` = t2.dept_id;</span><br></pre></td></tr></table></figure><p>需求6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-- 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">分析：</span><br><span class="line">1.姓名 emp， 直接上级的姓名 emp</span><br><span class="line">* emp表的id 和 mgr 是自关联</span><br><span class="line">2.条件 emp.id = emp.mgr</span><br><span class="line">3.查询左表的所有数据，和 交集数据</span><br><span class="line">* 使用左外连接查询</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">select</span><br><span class="line">t1.ename,</span><br><span class="line">t1.mgr,</span><br><span class="line">t2.`id`,</span><br><span class="line">t2.ename</span><br><span class="line">from emp t1, emp t2</span><br><span class="line">where t1.mgr = t2.`id`;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">t1.ename,</span><br><span class="line">t1.mgr,</span><br><span class="line">t2.`id`,</span><br><span class="line">t2.`ename`</span><br><span class="line">FROM emp t1</span><br><span class="line">LEFT JOIN emp t2</span><br><span class="line">ON t1.`mgr` = t2.`id`;</span><br></pre></td></tr></table></figure><h2 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h2><ol><li><p>事物的基本介绍</p><ol><li>概念<ul><li>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</li></ul></li><li>操作<ol><li>开启事务： start transaction;</li><li>回滚：rollback;</li><li>提交：commit;</li></ol></li><li>例子：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE account (</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(10),</span><br><span class="line">balance DOUBLE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO account (NAME, balance) VALUES (&#x27;zhangsan&#x27;, 1000), (&#x27;lisi&#x27;, 1000);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 0. 开启事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line">-- 1. 张三账户 -500</span><br><span class="line"></span><br><span class="line">UPDATE account SET balance = balance - 500 WHERE NAME = &#x27;zhangsan&#x27;;</span><br><span class="line">-- 2. 李四账户 +500</span><br><span class="line">-- 出错了...</span><br><span class="line">UPDATE account SET balance = balance + 500 WHERE NAME = &#x27;lisi&#x27;;</span><br><span class="line"></span><br><span class="line">-- 发现执行没有问题，提交事务</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 发现出问题了，回滚事务</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><p>4.MySQL数据库中事务默认自动提交</p><ul><li>事务提交的两种方式：</li><li>自动提交：<br>- mysql就是自动提交的<br>- 一条DML(增删改)语句会自动提交一次事务。</li><li>手动提交：<ul><li>Oracle 数据库默认是手动提交事务</li><li>需要先开启事务，再提交</li></ul></li><li>修改事务的默认提交方式：<ul><li>查看事务的默认提交方式：SELECT @@autocommit; – 1 代表自动提交  0 代表手动提交</li><li>修改默认提交方式： set @@autocommit &#x3D; 0;</li></ul></li></ul></li><li><p>事务的四大特征：</p><ol><li>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</li><li>持久性：当事务提交或回滚后，数据库会持久化的保存数据。</li><li>隔离性：多个事务之间。相互独立。</li><li>一致性：事务操作前后，数据总量不变</li></ol></li><li><p>事务的隔离级别（了解）</p><ul><li>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</li><li>存在问题：<ol><li>脏读：一个事务，读取到另一个事务中没有提交的数据</li><li>不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。</li><li>幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li></ol></li><li>隔离级别<ol><li>read uncommitted：读未提交<br>        * 产生的问题：脏读、不可重复读、幻读</li><li>read committed：读已提交 （Oracle）<br>        * 产生的问题：不可重复读、幻读</li><li>repeatable read：可重复读 （MySQL默认）<br>        * 产生的问题：幻读</li><li>serializable：串行化<br>        * 可以解决所有的问题</li></ol></li><li>注意：隔离级别从小到大安全性越来越高，但是效率越来越低<ul><li>数据库查询隔离级别：<br>        * select @@tx_isolation;</li><li>数据库设置隔离级别：<br>        * set global transaction isolation level  级别字符串;</li></ul></li><li>演示：</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level read uncommitted;</span><br><span class="line">start transaction;</span><br><span class="line">-- 转账操作</span><br><span class="line">update account set balance = balance - 500 where id = 1;</span><br><span class="line">update account set balance = balance + 500 where id = 2;</span><br></pre></td></tr></table></figure><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL:"></a>DCL:</h2><ul><li><p>SQL分类：</p><ol><li>DDL：操作数据库和表</li><li>DML：增删改表中数据</li><li>DQL：查询表中数据</li><li>DCL：管理用户，授权</li></ol></li><li><p>DBA：数据库管理员</p></li><li><p>DCL：管理用户，授权</p><ol><li><p>管理用户</p><ol><li>添加用户：<ul><li>语法：CREATE USER ‘用户名‘@’主机名’ IDENTIFIED BY ‘密码’;</li></ul></li><li>删除用户：<ul><li>语法：DROP USER ‘用户名‘@’主机名’;</li></ul></li><li>修改用户密码：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UPDATE USER SET PASSWORD = PASSWORD(&#x27;新密码&#x27;) WHERE USER = &#x27;用户名&#x27;;</span><br><span class="line">UPDATE USER SET PASSWORD = PASSWORD(&#x27;abc&#x27;) WHERE USER = &#x27;lisi&#x27;;</span><br><span class="line"></span><br><span class="line">SET PASSWORD FOR &#x27;用户名&#x27;@&#x27;主机名&#x27; = PASSWORD(&#x27;新密码&#x27;);</span><br><span class="line">SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = PASSWORD(&#x27;123&#x27;);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>mysql中忘记了root用户的密码？</p><ol><li>cmd – &gt; net stop mysql 停止mysql服务<ul><li>需要管理员运行该cmd</li></ul></li><li>使用无验证方式启动mysql服务： mysqld –skip-grant-tables</li><li>打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</li><li>use mysql;</li><li>update user set password &#x3D; password(‘你的新密码’) where user &#x3D; ‘root’;</li><li>关闭两个窗口</li><li>打开任务管理器，手动结束mysqld.exe 的进程</li><li>启动mysql服务</li><li>使用新密码登录。</li></ol></li><li><p>查询用户：</p><ol><li>切换到mysql数据库<ul><li>USE myql;</li></ul></li><li>查询user表<ul><li>SELECT * FROM USER;</li></ul></li></ol></li><li><p>通配符： % 表示可以在任意主机使用用户登录数据库</p></li></ul><p>2.权限管理：</p><ol><li><p>查询权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查询权限</span><br><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line">SHOW GRANTS FOR &#x27;lisi&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>授予权限：</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 授予权限</span><br><span class="line">grant 权限列表 on 数据库名.表名 to &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line">-- 给张三用户授予所有权限，在任意数据库任意表上</span><br><span class="line"></span><br><span class="line">GRANT ALL ON *.* TO &#x27;zhangsan&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>撤销权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 撤销权限：</span><br><span class="line">revoke 权限列表 on 数据库名.表名 from &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line">REVOKE UPDATE ON db3.`account` FROM &#x27;lisi&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;多表查询&quot;&gt;&lt;a href=&quot;#多表查询&quot; class=&quot;headerlink&quot; title=&quot;多表查询&quot;&gt;&lt;/a&gt;多表查询&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;查询语法&lt;ul&gt;
&lt;li&gt;select&lt;br&gt;    列名列表&lt;br&gt;  from&lt;br&gt;      表名列表&lt;</summary>
      
    
    
    
    
    <category term="Java-web" scheme="http://example.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>四级英语</title>
    <link href="http://example.com/2022/03/24/%E5%9B%9B%E7%BA%A7%E5%8D%95%E8%AF%8D1-6%E4%B8%B2%E8%AF%8D/"/>
    <id>http://example.com/2022/03/24/%E5%9B%9B%E7%BA%A7%E5%8D%95%E8%AF%8D1-6%E4%B8%B2%E8%AF%8D/</id>
    <published>2022-03-24T14:36:21.000Z</published>
    <updated>2022-03-31T16:03:19.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="四级词汇"><a href="#四级词汇" class="headerlink" title="四级词汇"></a>四级词汇</h2><h3 id="第一串词：view（看；被看见的）"><a href="#第一串词：view（看；被看见的）" class="headerlink" title="第一串词：view（看；被看见的）"></a>第一串词：view（看；被看见的）</h3><h4 id="view-v-认为-n-观点；风景"><a href="#view-v-认为-n-观点；风景" class="headerlink" title="view        v.认为    n.观点；风景"></a>view        v.认为    n.观点；风景</h4><h4 id="re-再一次"><a href="#re-再一次" class="headerlink" title="re - : 再一次"></a>re - : 再一次</h4><ul><li>review    n.v.回顾；复习；评论</li></ul><h4 id="inter-相互"><a href="#inter-相互" class="headerlink" title="inter - : 相互"></a>inter - : 相互</h4><ul><li>interview    n. v. 采访；面试；面谈</li><li>interviewee     n. 被面试者，被接见者，被访问者</li><li>interviewer     n.采访者；见面者；进行面试<ul><li>employer    雇主</li><li>employee    雇员</li></ul></li></ul><h3 id="第二串词：quire-x2F-quest-x2F-quer-to-ask-询问，to-seek-寻找"><a href="#第二串词：quire-x2F-quest-x2F-quer-to-ask-询问，to-seek-寻找" class="headerlink" title="第二串词：quire&#x2F;quest&#x2F;quer(to ask 询问，to seek 寻找)"></a>第二串词：quire&#x2F;quest&#x2F;quer(to ask 询问，to seek 寻找)</h3><h4 id="question-n-问题-v-质疑；怀疑"><a href="#question-n-问题-v-质疑；怀疑" class="headerlink" title="question    n.问题 v.质疑；怀疑"></a>question    n.问题 v.质疑；怀疑</h4><h5 id="tion-：名词词尾"><a href="#tion-：名词词尾" class="headerlink" title="-tion ：名词词尾"></a>-tion ：名词词尾</h5><h4 id="request-n-v-请求；需要（“请”）"><a href="#request-n-v-请求；需要（“请”）" class="headerlink" title="request    n. v. 请求；需要（“请”）"></a>request    n. v. 请求；需要（“请”）</h4><ul><li>guest        客人（正式，客气）</li></ul><h5 id="re-：再"><a href="#re-：再" class="headerlink" title="re - ：再"></a>re - ：再</h5><ul><li>restart    重启</li><li>request sb to do sth    请求某人做某事</li></ul><h4 id="require-v-需要；要求（-x3D-need）"><a href="#require-v-需要；要求（-x3D-need）" class="headerlink" title="require    v.需要；要求（&#x3D; need）"></a>require    v.需要；要求（&#x3D; need）</h4><ul><li>中性词</li></ul><h4 id="requirement-n-要求；必要条件"><a href="#requirement-n-要求；必要条件" class="headerlink" title="requirement    n. 要求；必要条件"></a>requirement    n. 要求；必要条件</h4><ul><li>to meet&#x2F;satisfy the requirements<ul><li>符合条件</li></ul></li></ul><h4 id="acquire-v-获得；取得；学到（技巧，学问）"><a href="#acquire-v-获得；取得；学到（技巧，学问）" class="headerlink" title="acquire    v. 获得；取得；学到（技巧，学问）"></a>acquire    v. 获得；取得；学到（技巧，学问）</h4><ul><li><h5 id="ac-：强调"><a href="#ac-：强调" class="headerlink" title="ac - ：强调"></a>ac - ：强调</h5><ul><li>技巧 kill</li></ul></li></ul><h4 id="inquire-v-询问；查究"><a href="#inquire-v-询问；查究" class="headerlink" title="inquire    v.询问；查究"></a>inquire    v.询问；查究</h4><ul><li><h5 id="in-：进来，向内"><a href="#in-：进来，向内" class="headerlink" title="in - ：进来，向内"></a>in - ：进来，向内</h5><ul><li>income 收入</li></ul></li></ul><h4 id="conquer-v-征服"><a href="#conquer-v-征服" class="headerlink" title="conquer    v. 征服"></a>conquer    v. 征服</h4><ul><li><h5 id="con-：共同，强调"><a href="#con-：共同，强调" class="headerlink" title="con - ：共同，强调"></a>con - ：共同，强调</h5></li><li><p>conquer your fear       克服恐惧</p></li><li><p>conquer the world       征服世界</p></li><li><p>overcome   克服小问题</p></li></ul><h3 id="第3串词：duce-x2F-duct-x2F-duc（to-lead-引导；拉）"><a href="#第3串词：duce-x2F-duct-x2F-duc（to-lead-引导；拉）" class="headerlink" title="第3串词：duce&#x2F;duct&#x2F;duc（to lead 引导；拉）"></a>第3串词：duce&#x2F;duct&#x2F;duc（to lead 引导；拉）</h3><h4 id="produce-v-生产；引起；创作"><a href="#produce-v-生产；引起；创作" class="headerlink" title="produce    v.生产；引起；创作"></a>produce    v.生产；引起；创作</h4><ul><li><h5 id="pro-：向前"><a href="#pro-：向前" class="headerlink" title="pro - ：向前"></a>pro - ：向前</h5></li></ul><h4 id="educate-v-教育；培养"><a href="#educate-v-教育；培养" class="headerlink" title="educate    v. 教育；培养"></a>educate    v. 教育；培养</h4><ul><li><h5 id="e-（ex-）：出（out）"><a href="#e-（ex-）：出（out）" class="headerlink" title="e - （ex - ）：出（out）"></a>e - （ex - ）：出（out）</h5></li><li><h5 id="ate：动词词尾"><a href="#ate：动词词尾" class="headerlink" title="-ate：动词词尾"></a>-ate：动词词尾</h5></li><li><p>（正式）教育，内容比teach广泛（周围人言传身教，家庭的影响，熏陶）</p></li><li><p>train ：训练，培养</p></li><li><p>tutor：一对一</p></li><li><p>teach：“教”：最普通用语，教授具体知识，技能</p></li></ul><h4 id="education-n-教育；培养"><a href="#education-n-教育；培养" class="headerlink" title="education    n. 教育；培养"></a>education    n. 教育；培养</h4><ul><li>higher education  高等教育（指含大学以上的教育）</li></ul><h4 id="educational-adj-教育的；有教育意义的"><a href="#educational-adj-教育的；有教育意义的" class="headerlink" title="educational    adj.教育的；有教育意义的"></a>educational    adj.教育的；有教育意义的</h4><ul><li>educational reform   教育改革</li></ul><h4 id="product-n-产品；产物"><a href="#product-n-产品；产物" class="headerlink" title="product    n. 产品；产物"></a>product    n. 产品；产物</h4><h4 id="production-n-生产；制造"><a href="#production-n-生产；制造" class="headerlink" title="production    n. 生产；制造"></a>production    n. 生产；制造</h4><h4 id="produce-v-生产；引起；创作-1"><a href="#produce-v-生产；引起；创作-1" class="headerlink" title="produce    v.生产；引起；创作"></a>produce    v.生产；引起；创作</h4><h4 id="producer-n-生产商"><a href="#producer-n-生产商" class="headerlink" title="producer    n. 生产商"></a>producer    n. 生产商</h4><h4 id="producetive-adj-多产的；有成效的"><a href="#producetive-adj-多产的；有成效的" class="headerlink" title="producetive    adj.多产的；有成效的"></a>producetive    adj.多产的；有成效的</h4><ul><li>productive workers   高效（多产的）工人</li><li>a productive meeting   有成效的会议</li></ul><h4 id="byproduct-n-副产品（中性词）"><a href="#byproduct-n-副产品（中性词）" class="headerlink" title="byproduct    n.副产品（中性词）"></a>byproduct    n.副产品（中性词）</h4><ul><li>by your side<ul><li>在你身边</li></ul></li><li>side effect<ul><li>副作用（中性词）</li></ul></li></ul><h4 id="productivity-n-生产力；生产率"><a href="#productivity-n-生产力；生产率" class="headerlink" title="productivity    n.生产力；生产率"></a>productivity    n.生产力；生产率</h4><h4 id="conduct-n-行为-v-实施；引导；指挥；传导（热，电）"><a href="#conduct-n-行为-v-实施；引导；指挥；传导（热，电）" class="headerlink" title="conduct    n.行为    v.实施；引导；指挥；传导（热，电）"></a>conduct    n.行为    v.实施；引导；指挥；传导（热，电）</h4><ul><li><h5 id="con-x2F-com-：共同，强调"><a href="#con-x2F-com-：共同，强调" class="headerlink" title="con-&#x2F;com-：共同，强调"></a>con-&#x2F;com-：共同，强调</h5></li><li><p>conduct business 做生意</p></li><li><p>I am deeply hurt by her conduct.</p><ul><li>她的行为深深地伤害了我</li></ul></li></ul><h4 id="induce-v-诱导，劝说；导致（中性词）"><a href="#induce-v-诱导，劝说；导致（中性词）" class="headerlink" title="induce    v.诱导，劝说；导致（中性词）"></a>induce    v.诱导，劝说；导致（中性词）</h4><ul><li><h5 id="in-：进来，向内-1"><a href="#in-：进来，向内-1" class="headerlink" title="in-：进来，向内"></a>in-：进来，向内</h5></li><li><p>induce me to take the jib</p><ul><li>诱使我接受这份工作</li></ul></li><li><p>Some drugs will induce sleep</p><ul><li>有些药物会使人昏昏欲睡</li></ul></li></ul><h4 id="reduce-v-减少；降低"><a href="#reduce-v-减少；降低" class="headerlink" title="reduce    v.减少；降低"></a>reduce    v.减少；降低</h4><ul><li><h5 id="re-：向后，往回"><a href="#re-：向后，往回" class="headerlink" title="re-：向后，往回"></a>re-：向后，往回</h5></li><li><p>reduce the speed 减速</p></li><li><p>reduce the risk of heart disease 降低心脏病风险</p></li></ul><h4 id="reduction-n-减少-下降"><a href="#reduction-n-减少-下降" class="headerlink" title="reduction    n.减少;下降"></a>reduction    n.减少;下降</h4><h4 id="Introduce-v-介绍；引进"><a href="#Introduce-v-介绍；引进" class="headerlink" title="Introduce    v.介绍；引进"></a>Introduce    v.介绍；引进</h4><ul><li>introduced A to B<ul><li>把A介绍给B</li></ul></li><li>The new law was introduced in 1991.<ul><li>这项法律是于1991年开始实施</li></ul></li><li>introduce the technology to the world。<ul><li>把这项技术推向世界</li></ul></li></ul><h4 id="introduction-n-介绍-引进"><a href="#introduction-n-介绍-引进" class="headerlink" title="introduction    n.介绍;引进"></a>introduction    n.介绍;引进</h4><ul><li><h5 id="Intro-在内，向内（within）"><a href="#Intro-在内，向内（within）" class="headerlink" title="Intro-:在内，向内（within）"></a>Intro-:在内，向内（within）</h5></li></ul><h4 id="reproduce-v-复制；繁殖"><a href="#reproduce-v-复制；繁殖" class="headerlink" title="reproduce    v.复制；繁殖"></a>reproduce    v.复制；繁殖</h4><h4 id="reproduction-n-繁殖；复制"><a href="#reproduction-n-繁殖；复制" class="headerlink" title="reproduction    n.繁殖；复制"></a>reproduction    n.繁殖；复制</h4><h4 id="reproductive-adj-繁殖的"><a href="#reproductive-adj-繁殖的" class="headerlink" title="reproductive    adj.繁殖的"></a>reproductive    adj.繁殖的</h4><ul><li><h5 id="re-再"><a href="#re-再" class="headerlink" title="re-:再"></a>re-:再</h5></li></ul><h3 id="第四串词：fess（to-say，to-talk-说）"><a href="#第四串词：fess（to-say，to-talk-说）" class="headerlink" title="第四串词：fess（to say，to talk 说）"></a>第四串词：fess（to say，to talk 说）</h3><h4 id="Professor-n-教授；教师"><a href="#Professor-n-教授；教师" class="headerlink" title="Professor    n.教授；教师"></a>Professor    n.教授；教师</h4><h4 id="profession-n-职业，专业；声明"><a href="#profession-n-职业，专业；声明" class="headerlink" title="profession    n.职业，专业；声明"></a>profession    n.职业，专业；声明</h4><ul><li><h5 id="sion-名词词尾"><a href="#sion-名词词尾" class="headerlink" title="-sion:名词词尾"></a>-sion:名词词尾</h5></li><li><p>The medical&#x2F;legal profession   医学专业,法律专业</p></li></ul><h4 id="professional-adj-专业的；职业的-n-专家；专门人才"><a href="#professional-adj-专业的；职业的-n-专家；专门人才" class="headerlink" title="professional    adj.专业的；职业的 n.专家；专门人才"></a>professional    adj.专业的；职业的 n.专家；专门人才</h4><ul><li><h5 id="al：形容词，名词词尾"><a href="#al：形容词，名词词尾" class="headerlink" title="-al：形容词，名词词尾"></a>-al：形容词，名词词尾</h5></li><li><p>Professional skills    专业技能</p></li><li><p>health professionals   健康方面的专门人才</p></li></ul><h3 id="第5串词：just-x2F-jur-x2F-jud-law-法律，right-正义"><a href="#第5串词：just-x2F-jur-x2F-jud-law-法律，right-正义" class="headerlink" title="第5串词：just&#x2F;jur&#x2F;jud(law 法律，right 正义)"></a>第5串词：just&#x2F;jur&#x2F;jud(law 法律，right 正义)</h3><h4 id="just-adj-公正的，合理的；正直的-adv-只是；刚才"><a href="#just-adj-公正的，合理的；正直的-adv-只是；刚才" class="headerlink" title="just    adj.公正的，合理的；正直的    adv.只是；刚才"></a>just    adj.公正的，合理的；正直的    adv.只是；刚才</h4><ul><li>I just saw him.   我刚才还见过他</li><li>a just decision&#x2F;society   一个公正的决定&#x2F;社会</li></ul><h4 id="justice-n-公正，公平"><a href="#justice-n-公正，公平" class="headerlink" title="justice    n.公正，公平"></a>justice    n.公正，公平</h4><ul><li><h5 id="ce：名词词尾"><a href="#ce：名词词尾" class="headerlink" title="-ce：名词词尾"></a>-ce：名词词尾</h5></li></ul><h4 id="justify-v-证明正确；替…辩护（解释）"><a href="#justify-v-证明正确；替…辩护（解释）" class="headerlink" title="justify    v.证明正确；替…辩护（解释）"></a>justify    v.证明正确；替…辩护（解释）</h4><ul><li><h5 id="fy：动词词尾"><a href="#fy：动词词尾" class="headerlink" title="-fy：动词词尾"></a>-fy：动词词尾</h5><ul><li>beautify    美化</li></ul></li><li><p>Justify a war     证明战争是正确的</p></li><li><p>Justify your wrong actions    为了你的错误行为辩护</p></li></ul><h4 id="adjust-v-调整；校准"><a href="#adjust-v-调整；校准" class="headerlink" title="adjust    v.调整；校准"></a>adjust    v.调整；校准</h4><ul><li><h5 id="ad-：向着"><a href="#ad-：向着" class="headerlink" title="ad-：向着"></a>ad-：向着</h5></li></ul><h4 id="adjustment-n-调整-调节"><a href="#adjustment-n-调整-调节" class="headerlink" title="adjustment    n.调整,调节"></a>adjustment    n.调整,调节</h4><h4 id="injure-v-伤害，损害"><a href="#injure-v-伤害，损害" class="headerlink" title="injure    v.伤害，损害"></a>injure    v.伤害，损害</h4><ul><li><h5 id="in-：否定前zu"><a href="#in-：否定前zu" class="headerlink" title="in-：否定前zu"></a>in-：否定前zu</h5></li></ul><h4 id="injury-n-伤害-损伤"><a href="#injury-n-伤害-损伤" class="headerlink" title="injury    n.伤害,损伤"></a>injury    n.伤害,损伤</h4><h4 id="judge-n-法官；裁判员-v-判断；裁判；评价"><a href="#judge-n-法官；裁判员-v-判断；裁判；评价" class="headerlink" title="judge    n.法官；裁判员 v.判断；裁判；评价"></a>judge    n.法官；裁判员 v.判断；裁判；评价</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;四级词汇&quot;&gt;&lt;a href=&quot;#四级词汇&quot; class=&quot;headerlink&quot; title=&quot;四级词汇&quot;&gt;&lt;/a&gt;四级词汇&lt;/h2&gt;&lt;h3 id=&quot;第一串词：view（看；被看见的）&quot;&gt;&lt;a href=&quot;#第一串词：view（看；被看见的）&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="英语四级" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>MySQL约束</title>
    <link href="http://example.com/2022/03/24/MySQL%E7%BA%A6%E6%9D%9F/"/>
    <id>http://example.com/2022/03/24/MySQL%E7%BA%A6%E6%9D%9F/</id>
    <published>2022-03-24T07:03:27.000Z</published>
    <updated>2022-03-25T07:44:57.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL:查询语句"></a>DQL:查询语句</h2><h4 id="1-排序查询"><a href="#1-排序查询" class="headerlink" title="1.排序查询"></a>1.排序查询</h4><ul><li>语法：order by 子句<ul><li>order by 排序字段1 排序方式1 ，  排序字段2 排序方式2…</li></ul></li><li>排序方式：<ul><li>ASC：升序，默认的。</li><li>DESC：降序。</li></ul></li><li>注意<ul><li>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</li></ul></li></ul><h4 id="2-聚合函数"><a href="#2-聚合函数" class="headerlink" title="2.聚合函数"></a>2.聚合函数</h4><p>将一列数据作为一个整体，进行纵向的计算。</p><ul><li>count：计算个数<ul><li>一般选择非空的列：主键</li><li>count(*)</li></ul></li><li>max：计算最大值</li><li>min：计算最小值</li><li>sum：计算和</li><li>avg：计算平均值</li></ul><p>注意</p><ul><li>聚合函数的计算，排除null值。</li></ul><p>解决方案</p><ul><li>选择不包含非空的列进行计算</li><li>IFNULL函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(english) FROM student;</span><br></pre></td></tr></table></figure><h4 id="3-分组查询"><a href="#3-分组查询" class="headerlink" title="3.分组查询"></a>3.分组查询</h4><ul><li>语法：group by 分组字段；</li><li>注意：<ul><li>分组之后查询的字段：分组字段、聚合函数</li><li>where 和 having 的区别？</li><li>where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</li><li>where 后不可以跟聚合函数，having可以进行聚合函数的判断。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 按照性别分组。分别查询男、女同学的平均分</span><br><span class="line">SELECT sex , AVG(math) FROM student GROUP BY sex;</span><br><span class="line"></span><br><span class="line">-- 按照性别分组。分别查询男、女同学的平均分,人数</span><br><span class="line">SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;</span><br><span class="line"></span><br><span class="line">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组</span><br><span class="line">SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex;</span><br><span class="line"></span><br><span class="line">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人</span><br><span class="line">SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex HAVING COUNT(id) &gt; 2;</span><br><span class="line"></span><br><span class="line">SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math &gt; 70 GROUP BY sex HAVING 人数 &gt; 2;</span><br></pre></td></tr></table></figure><h4 id="4-分页查询"><a href="#4-分页查询" class="headerlink" title="4.分页查询"></a>4.分页查询</h4><ul><li>语法：limit 开始的索引,每页查询的条数;</li><li>公式：开始的索引 &#x3D; （当前的页码 - 1） * 每页显示的条数</li><li>limit 是一个MySQL”方言”</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 每页显示3条记录 </span><br><span class="line">SELECT * FROM student LIMIT 0,3; -- 第1页</span><br><span class="line"></span><br><span class="line">SELECT * FROM student LIMIT 3,3; -- 第2页</span><br><span class="line"></span><br><span class="line">SELECT * FROM student LIMIT 6,3; -- 第3页</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>概念：对表中的数据进行限定，保证数据的正确性、有效性和完整性。</li><li>分类：<ul><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ul></li><li>非空约束：not null，某一列的值不能为null<ul><li>创建表时添加约束</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT,</span><br><span class="line">NAME VARCHAR(20) NOT NULL -- name为非空</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>- </p><ul><li>创建表完后，添加非空约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</span><br></pre></td></tr></table></figure><p>- </p><ul><li>删除name的非空约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY NAME VARCHAR(20);</span><br></pre></td></tr></table></figure><ul><li><p>唯一约束：unique，某一列的值不能重复</p><ul><li><p>注意</p><ul><li>唯一约束可以有NULL值，但是只能有一条记录为null</li></ul></li><li><p>在创建表时，添加唯一约束</p><ul><li>&#96;&#96;&#96;<br>CREATE TABLE stu(<br>        id INT,<br>        phone_number VARCHAR(20) UNIQUE – 手机号<br>    );<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 删除唯一约束</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    ALTER TABLE stu DROP INDEX phone_number;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在表创建完后，添加唯一约束</p><ul><li>&#96;&#96;&#96;<br>ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - </span><br><span class="line"></span><br><span class="line">- 主键约束：primary key。</span><br><span class="line"></span><br><span class="line">  - 注意：</span><br><span class="line"></span><br><span class="line">    - 含义：非空且唯一</span><br><span class="line">    - 一张表只能有一个字段为主键</span><br><span class="line">    - 主键就是表中记录的唯一标识</span><br><span class="line"></span><br><span class="line">  - 在创建表时，添加主键约束</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    create table stu(</span><br><span class="line">    id int primary key,-- 给id添加主键约束</span><br><span class="line">    name varchar(20)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除主键</p></li><li><pre><code>-- 错误 alter table stu modify id int ;        ALTER TABLE stu DROP PRIMARY KEY;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 创建完表后，添加主键</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  ALTER TABLE stu MODIFY id INT PRIMARY KEY;</span><br></pre></td></tr></table></figure></code></pre></li><li></li></ul></li><li><p>自动增长</p><ul><li><p>概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</p></li><li><p>在创建表时，添加主键约束，并且完成主键自增长</p></li><li><pre><code>create table stu(            id int primary key auto_increment,-- 给id添加主键约束            name varchar(20)        );<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 删除自动增长</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  ALTER TABLE stu MODIFY id INT;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>添加自动增长</p></li><li><pre><code>ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - </span><br><span class="line"></span><br><span class="line">- 外键约束</span><br><span class="line"></span><br><span class="line">  - foreign key,让表与表产生关系，从而保证数据的正确性。</span><br><span class="line"></span><br><span class="line">  - 在创建表时，可以添加外键</span><br><span class="line"></span><br><span class="line">    - ```</span><br><span class="line">      create table 表名(</span><br><span class="line">      ....</span><br><span class="line">      --外键列</span><br><span class="line">      constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</span><br><span class="line">      );</span><br></pre></td></tr></table></figure></code></pre></li><li><p>删除外键</p><ul><li>&#96;&#96;&#96;<br>ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 创建表之后，添加外键</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>级联操作</p><ul><li><p>添加级联操作</p><ul><li>&#96;&#96;&#96;<br>语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称<br>                FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE  ;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 分类：</span><br><span class="line"></span><br><span class="line">    - 级联更新：ON UPDATE CASCADE </span><br><span class="line">    - 级联删除：ON DELETE CASCADE </span><br><span class="line"></span><br><span class="line">## 数据库的设计</span><br><span class="line"></span><br><span class="line">1. 多表之间的关系</span><br><span class="line">   1. 分类：</span><br><span class="line">      1. 一对一(了解)：</span><br><span class="line">         - 如：人和身份证</span><br><span class="line">         - 分析：一个人只有一个身份证，一个身份证只能对应一个人</span><br><span class="line">      2. 一对多(多对一)：</span><br><span class="line">         - 如：部门和员工</span><br><span class="line">         - 分析：一个部门有多个员工，一个员工只能对应一个部门</span><br><span class="line">      3. 多对多：</span><br><span class="line">         -  如：学生和课程</span><br><span class="line">         - 分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</span><br><span class="line">   2. 实现关系：</span><br><span class="line">      1. 一对多(多对一)：</span><br><span class="line">         - 如：部门和员工</span><br><span class="line">         - 实现方式：在多的一方建立外键，指向一的一方的主键。</span><br><span class="line">      2.  多对多：</span><br><span class="line">         - 如：学生和课程</span><br><span class="line">         - 实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</span><br><span class="line">      3.  一对一(了解)：</span><br><span class="line">         - 如：人和身份证</span><br><span class="line">         - 实现方式：一对一关系实现，可以在任意一方添加唯一（unique）外键指向另一方的主键。</span><br><span class="line">   3. 案例</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ol><li>多表之间的关系<ol><li><p>分类：</p><ol><li>一对一(了解)：<ul><li>如：人和身份证</li><li>分析：一个人只有一个身份证，一个身份证只能对应一个人</li></ul></li><li>一对多(多对一)：<ul><li>如：部门和员工</li><li>分析：一个部门有多个员工，一个员工只能对应一个部门</li></ul></li><li>多对多：<ul><li>如：学生和课程</li><li>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li></ul></li></ol></li><li><p>实现关系：</p><ol><li>一对多(多对一)：<ul><li>如：部门和员工</li><li>实现方式：在多的一方建立外键，指向一的一方的主键。</li></ul></li><li>多对多：<ul><li>如：学生和课程</li><li>实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</li></ul></li><li>一对一(了解)：<ul><li>如：人和身份证</li><li>实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</li></ul></li></ol></li><li><p>案例<br> – 创建旅游线路分类表 tab_category<br> – cid 旅游线路分类主键，自动增长<br> – cname 旅游线路分类名称非空，唯一，字符串 100<br> CREATE TABLE tab_category (<br> cid INT PRIMARY KEY AUTO_INCREMENT,<br> cname VARCHAR(100) NOT NULL UNIQUE<br> );</p><p> – 创建旅游线路表 tab_route<br> &#x2F;*<br> rid 旅游线路主键，自动增长<br> rname 旅游线路名称非空，唯一，字符串 100<br> price 价格<br> rdate 上架时间，日期类型<br> cid 外键，所属分类<br> *&#x2F;<br> CREATE TABLE tab_route(<br> rid INT PRIMARY KEY AUTO_INCREMENT,<br> rname VARCHAR(100) NOT NULL UNIQUE,<br> price DOUBLE,<br> rdate DATE,<br> cid INT,<br> FOREIGN KEY (cid) REFERENCES tab_category(cid)<br> );</p><p> &#x2F;*创建用户表 tab_user<br> uid 用户主键，自增长<br> username 用户名长度 100，唯一，非空<br> password 密码长度 30，非空<br> name 真实姓名长度 100<br> birthday 生日<br> sex 性别，定长字符串 1<br> telephone 手机号，字符串 11<br> email 邮箱，字符串长度 100<br> *&#x2F;<br> CREATE TABLE tab_user (<br> uid INT PRIMARY KEY AUTO_INCREMENT,<br> username VARCHAR(100) UNIQUE NOT NULL,<br> PASSWORD VARCHAR(30) NOT NULL,<br> NAME VARCHAR(100),<br> birthday DATE,<br> sex CHAR(1) DEFAULT ‘男’,<br> telephone VARCHAR(11),<br> email VARCHAR(100)<br> );</p><p> &#x2F;*<br> 创建收藏表 tab_favorite<br> rid 旅游线路 id，外键<br> date 收藏时间<br> uid 用户 id，外键<br> rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次<br> *&#x2F;<br> CREATE TABLE tab_favorite (<br> rid INT, – 线路id<br> DATE DATETIME,<br> uid INT, – 用户id<br> – 创建复合主键<br> PRIMARY KEY(rid,uid), – 联合主键<br> FOREIGN KEY (rid) REFERENCES tab_route(rid),<br> FOREIGN KEY(uid) REFERENCES tab_user(uid)<br> );</p></li></ol></li></ol><pre><code>2.数据库设计的范式- 概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求- 设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。- 目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。- 分类  - 第一范式（1NF）：每一列都是不可分割的原子数据项  - 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）    - 几个概念：      1. 函数依赖：A--&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A                             例如：学号--&gt;姓名。  （学号，课程名称） --&gt; 分数      2. 完全函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。                             例如：（学号，课程名称） --&gt; 分数      3. 部分函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。                             例如：（学号，课程名称） -- &gt; 姓名      4. 传递函数依赖：A--&gt;B, B -- &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A                             例如：学号--&gt;系名，系名--&gt;系主任      5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码                             例如：该表中码为：（学号，课程名称）         - 主属性：码属性组中的所有属性         - 非主属性：除过码属性组的属性  - 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）## 数据库的备份与还原1. 命令行：   - 语法：     - 备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径     -  还原：       1. 登录数据库       2. 创建数据库       3. 使用数据库       4. 执行文件。source 文件路径2. 图形化工具：</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DQL-查询语句&quot;&gt;&lt;a href=&quot;#DQL-查询语句&quot; class=&quot;headerlink&quot; title=&quot;DQL:查询语句&quot;&gt;&lt;/a&gt;DQL:查询语句&lt;/h2&gt;&lt;h4 id=&quot;1-排序查询&quot;&gt;&lt;a href=&quot;#1-排序查询&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Java-web" scheme="http://example.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础</title>
    <link href="http://example.com/2022/03/22/MySQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/03/22/MySQL%E5%9F%BA%E7%A1%80/</id>
    <published>2022-03-22T03:13:04.000Z</published>
    <updated>2022-03-23T15:18:09.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><ol><li>数据库的英文单词： DataBase 简称 ： DB</li><li>什么数据库？<ul><li>用于存储和管理数据的仓库。</li></ul></li><li>数据库的特点：<ol><li>持久化存储数据的。其实数据库就是一个文件系统</li><li>方便存储和管理数据</li><li>使用了统一的方式操作数据库 – SQL</li></ol></li><li>常见的数据库软件</li><li>MySQL</li></ol><h2 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h2><p>Mac安装</p><p>参考文献：<a href="https://www.jianshu.com/p/a8e4068a7a8a/">https://www.jianshu.com/p/a8e4068a7a8a/</a></p><p><a href="https://zhuanlan.zhihu.com/p/360858309">https://zhuanlan.zhihu.com/p/360858309</a></p><p>Mac卸载</p><p>参考文献：<a href="https://www.jianshu.com/p/276c1271ae14">https://www.jianshu.com/p/276c1271ae14</a></p><p>配置</p><ol><li><p>手动。</p><pre><code> 2. cmd--&gt; services.msc 打开服务的窗口 3. 使用管理员打开cmd     * net start mysql : 启动mysql的服务     * net stop mysql:关闭mysql服务</code></pre></li></ol><p>Mac参考文献：<a href="https://blog.csdn.net/qq_36004521/article/details/80637886">https://blog.csdn.net/qq_36004521/article/details/80637886</a></p><p>MySQL登录<br>        1. mysql -uroot -p密码<br>        2. mysql -hip -uroot -p连接目标的密码<br>        3. mysql –host&#x3D;ip –user&#x3D;root –password&#x3D;连接目标的密码<br>    * MySQL退出<br>        1. exit<br>        2. quit</p><p>Mac mysql的命令参考文献：<a href="https://www.jianshu.com/p/c4756bcd6cbc">https://www.jianshu.com/p/c4756bcd6cbc</a></p><p><a href="https://blog.csdn.net/qq_19484963/article/details/80431703">https://blog.csdn.net/qq_19484963/article/details/80431703</a></p><p>MySQL目录结构</p><ol><li>MySQL安装目录：basedir&#x3D;”D:&#x2F;develop&#x2F;MySQL&#x2F;“<br> 1. 配置文件 my.ini</li><li>MySQL数据目录：datadir&#x3D;”C:&#x2F;ProgramData&#x2F;MySQL&#x2F;MySQL Server 5.5&#x2F;Data&#x2F;“<br> * 几个概念<br>     * 数据库：文件夹<br>     * 表：文件<br>     * 数据：数据</li></ol><h2 id="SQL基本概念"><a href="#SQL基本概念" class="headerlink" title="SQL基本概念"></a>SQL基本概念</h2><p>什么是SQL</p><ul><li>Structured Query Language：结构化查询语言</li><li>其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</li></ul><p>SQL通用语法</p><ul><li>SQL 语句可以单行或多行书写，以分号结尾。</li><li>可使用空格和缩进来增强语句的可读性。</li><li>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</li><li>3 种注释<ul><li>单行注释: – 注释内容 或 # 注释内容(mysql 特有) </li><li>多行注释: &#x2F;* 注释 *&#x2F;</li></ul></li></ul><p>SQL分类</p><ul><li>DDL(Data Definition Language)数据定义语言<ul><li>用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</li></ul></li><li>DML(Data Manipulation Language)数据操作语言<ul><li>用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</li></ul></li><li>DQL(Data Query Language)数据查询语言<ul><li>用来查询数据库中表的记录(数据)。关键字：select, where 等</li></ul></li><li>DCL(Data Control Language)数据控制语言(了解)<ul><li>用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</li></ul></li></ul><h2 id="DDL-操作数据库、表"><a href="#DDL-操作数据库、表" class="headerlink" title="DDL:操作数据库、表"></a>DDL:操作数据库、表</h2><h3 id="1-操作数据库：CRUD"><a href="#1-操作数据库：CRUD" class="headerlink" title="1.操作数据库：CRUD"></a>1.操作数据库：CRUD</h3><p>1.C（Create）：创建</p><ul><li>创建数据库：<ul><li>create database 数据库名称;</li></ul></li><li>创建数据库，判断不存在，再创建：<ul><li>create database if not exists 数据库</li></ul></li></ul><p>名称</p><ul><li>创建数据库，并指定字符集<ul><li>create database 数据库名称 character set 字符集名;</li></ul></li></ul><p>练习</p><ul><li>创建db4数据库，判断是否存在，并制定字符集为gbk<ul><li>create database if not exists db4 character set gbk;</li></ul></li></ul><p>2.R（Retrieve）：查询</p><ul><li>查询所有数据库的名称:<br>  - show databases;</li><li>查询某个数据库的字符集:查询某个数据库的创建语句<ul><li>show create database 数据库名称;</li></ul></li></ul><p>3.U(Update):修改</p><ul><li>修改数据库的字符集<ul><li>alter database 数据库名称 character set 字符集名称;</li></ul></li></ul><p>4.D(Delete):删除</p><ul><li>删除数据库<ul><li>drop database 数据库名称;</li></ul></li><li>判断数据库存在，存在再删除<ul><li>drop database if exists 数据库名称;</li></ul></li></ul><p>5.使用数据库</p><ul><li>查询当前正在使用的数据库名称<ul><li>select database();</li></ul></li><li>使用数据库<br>        * use 数据库名称;</li></ul><h3 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h3><p>1.C（Create）：创建</p><ul><li>语法：<ul><li>create table 表名(<br>列名1 数据类型1,<br>列名2 数据类型2,<br>….<br>列名n 数据类型n<br>);</li><li>注意：最后一列，不需要加逗号（,）</li><li>数据库类型：<ul><li>int：整数类型<ul><li>age int,</li></ul></li><li>double:小数类型<ul><li>score double(5,2)</li></ul></li><li>date:日期，只包含年月日，yyyy-MM-dd</li><li>datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss</li><li>timestamp:时间错类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss    <ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</li></ul></li><li>varchar：字符串<ul><li>name varchar(20):姓名最大20个字符</li><li>zhangsan 8个字符  张三 2个字符</li></ul></li></ul></li><li>创建表</li><li>create table student(<br>    id int,<br>      name varchar(32),<br>      age int ,<br>      score double(4,1),<br>      birthday date,<br>      insert_time timestamp<br>  );</li><li>复制表<ul><li>create table 表名 like 被复制的表名;</li></ul></li></ul></li></ul><p>2,R(Retrieve):查询</p><ul><li>查询某个数据库中所有的表名称<ul><li>show tables;</li></ul></li><li>查询表结构<ul><li>desc 表名;</li></ul></li></ul><p>3.U（Updata）：修改</p><ul><li>修改表名<ul><li>alter table 表名 rename to 新的表名;</li></ul></li><li>修改表的字符集<ul><li>alter table 表名 character set 字符集名称;</li></ul></li><li>添加一列<ul><li>alter table 表名 add 列名 数据类型;</li></ul></li><li>修改列名称 类型<ul><li>alter table 表名 change 列名 新列别 新数据类型;</li><li>alter table 表名 modify 列名 新数据类型;</li></ul></li><li>删除列<ul><li>alter table 表名 drop 列名;</li></ul></li></ul><p>4.D（Delete）：删除</p><ul><li>drop table 表名;</li><li>drop table  if exists 表名 ;</li></ul><p>客户端图形化工具：SQLYog</p><h2 id="DML：增删改表中的数据"><a href="#DML：增删改表中的数据" class="headerlink" title="DML：增删改表中的数据"></a>DML：增删改表中的数据</h2><p>1.添加数据</p><ul><li>语法<ul><li>insert into 表名(列名1,列名2,…列名n) values(值1,值2,…值n);</li></ul></li><li>注意<ul><li>列名和值要一一对应。</li><li>如果表名后，不定义列名，则默认给所有列添加值<br>        insert into 表名 values(值1,值2,…值n);</li><li>除了数字类型，其他类型需要使用引号(单双都可以)引起来</li></ul></li></ul><p>2.删除数据</p><p>语法</p><ul><li>select * from 表名;<ul><li>delete from 表名 [where 条件]</li></ul></li><li>注意<ul><li>如果不加条件，则删除表中所有记录。</li><li>如果要删除所有记录<ul><li>delete from 表名; – 不推荐使用。有多少条记录就会执行多少次删除操作</li><li>TRUNCATE TABLE 表名; – 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</li></ul></li></ul></li></ul><p>3.修改数据</p><p>语法</p><ul><li>update 表名 set 列名1 &#x3D; 值1, 列名2 &#x3D; 值2,… [where 条件];</li></ul><p>注意</p><ul><li>如果不加任何条件，则会将表中所有记录全部修改。</li></ul><h2 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h2><ul><li>select * from 表名;</li></ul><p>语法</p><pre><code>select    字段列表from    表名列表where    条件列表group by    分组字段having    分组之后的条件order by    排序limit    分页限定</code></pre><ul><li><p>基础查询</p><ul><li><p>多个字断查询</p><ul><li>select 字段名1，字段名2… from 表名；</li><li>注意<ul><li>如果查询所有字段，则可以使用*来替代字段列表。</li></ul></li></ul></li><li><p>去除重复：</p></li><li><p>distinct</p></li><li><pre><code>select distinct 字段名1 from 表名;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ​计算列</span><br><span class="line"></span><br><span class="line">  - 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</span><br><span class="line"></span><br><span class="line">    - ```</span><br><span class="line">      select name,math,english,math+english from student;</span><br></pre></td></tr></table></figure>- </code></pre></li><li><p>ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null</p><ul><li>表达式1：哪个字段需要判断是否为null</li><li>如果该字段为null后的替换值 表达式2。</li></ul></li><li><p>起别名</p><ul><li>as：as也可以省略</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,math,english,math + ifnull(english,0) as 总分 from student;</span><br></pre></td></tr></table></figure><ul><li>条件查询<ul><li>where子句后跟条件</li><li>运算符<ul><li>&#x2F;&gt;、&lt; 、&lt;&#x3D; 、&gt;&#x3D; 、&#x3D; 、&lt;&gt;</li><li>BETWEEN…AND  </li><li>IN( 集合) </li><li>LIKE：模糊查询<ul><li>占位符：<ul><li>_:单个任意字符</li><li>%：多个任意字符</li></ul></li></ul></li><li>IS NULL  </li><li>and  或 &amp;&amp;</li><li>or  或 || </li><li>not  或 !</li></ul></li></ul></li></ul><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 查询年龄大于20岁</span><br><span class="line">SELECT * FROM student WHERE age &gt; 20;</span><br><span class="line">SELECT * FROM student WHERE age &gt;= 20;</span><br><span class="line"></span><br><span class="line">-- 查询年龄等于20岁</span><br><span class="line">SELECT * FROM student WHERE age = 20;</span><br><span class="line"></span><br><span class="line">-- 查询年龄不等于20岁</span><br><span class="line">SELECT * FROM student WHERE age != 20;</span><br><span class="line">SELECT * FROM student WHERE age &lt;&gt; 20;</span><br><span class="line"></span><br><span class="line">-- 查询年龄大于等于20 小于等于30</span><br><span class="line">SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;</span><br><span class="line">SELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;</span><br><span class="line">SELECT * FROM student WHERE age BETWEEN 20 AND 30;</span><br><span class="line"></span><br><span class="line">-- 查询年龄22岁，18岁，25岁的信息</span><br><span class="line">SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25;</span><br><span class="line">SELECT * FROM student WHERE age IN (22,18,25);</span><br><span class="line"></span><br><span class="line">-- 查询英语成绩为null</span><br><span class="line">SELECT * FROM student WHERE english = NULL; -- 不对的。null值不能使用 = （!=） 判断</span><br><span class="line"></span><br><span class="line">SELECT * FROM student WHERE english IS NULL;</span><br><span class="line"></span><br><span class="line">-- 查询英语成绩不为null</span><br><span class="line">SELECT * FROM student WHERE english  IS NOT NULL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询姓马的有哪些？ like</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#x27;马%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名第二个字是化的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &quot;_化%&quot;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名是3个字的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#x27;___&#x27;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名中包含德的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#x27;%德%&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据库的基本概念&quot;&gt;&lt;a href=&quot;#数据库的基本概念&quot; class=&quot;headerlink&quot; title=&quot;数据库的基本概念&quot;&gt;&lt;/a&gt;数据库的基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;数据库的英文单词： DataBase 简称 ： DB&lt;/li&gt;
&lt;li&gt;什么数据</summary>
      
    
    
    
    
    <category term="Java-web" scheme="http://example.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>注解</title>
    <link href="http://example.com/2022/03/21/%E6%B3%A8%E8%A7%A3/"/>
    <id>http://example.com/2022/03/21/%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-03-21T03:06:08.000Z</published>
    <updated>2022-03-22T03:09:19.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>概念：说明程序的。给计算机看的</p><p>注释：用文字描述程序的。给程序员看的</p><p>定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p><p>概念描述：<br>    * JDK1.5之后的新特性<br>    * 说明程序的<br>    * 使用注解：@注解名称</p><ul><li>作用分类：<br>  ①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】<br>  ②代码分析：通过代码里标识的注解对代码进行分析【使用反射】<br>  ③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li></ul><p>DK中预定义的一些注解<br>    * @Override    ：检测被该注解标注的方法是否是继承自父类(接口)的<br>    * @Deprecated：该注解标注的内容，表示已过时<br>    * @SuppressWarnings：压制警告<br>        * 一般传递参数all  @SuppressWarnings(“all”)</p><p>自定义注解</p><p> 格式：<br>        元注解<br>        public @interface 注解名称{<br>            属性列表;<br>        }</p><p>本质：注解本质上就是一个接口，该接口默认继承Annotation接口<br>        * public interface MyAnno extends java.lang.annotation.Annotation {}</p><p>属性：接口中的抽象方法</p><ol><li>属性的返回值类型有下列取值<br>         * 基本数据类型<br>         * String<br>         * 枚举<br>         * 注解<br>         * 以上类型的数组<ol start="2"><li>定义了属性，在使用时需要给属性赋值<br> 1. 如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。<br> 2. 如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。<br> 3. 数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li></ol></li></ol><p>元注解：用于描述注解的注解</p><ul><li>@Target：描述注解能够作用的位置<ul><li>ElementType取值：<ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul></li></ul></li><li>@Retention：描述注解被保留的阶段</li><li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到 参考Java运行三个阶段</li><li>@Documented：描述注解是否被抽取到api文档中</li><li>@Inherited：描述注解是否被子类继承</li></ul><p>在程序使用(解析)注解：获取注解中定义的属性值</p><pre><code> 1. 获取注解定义的位置的对象  （Class，Method,Field）1.  public class ProImpl implements Pro&#123;                public String className()&#123;                    return &quot;cn.itcast.annotation.Demo1&quot;;                &#125;                public String methodName()&#123;                    return &quot;show&quot;;                &#125;            &#125;3. 调用注解中的抽象方法获取配置的属性值1. 2. 获取指定的注解    * getAnnotation(Class)    //其实就是在内存中生成了一个该注解接口的子类实现对象</code></pre><p>案例：简单的测试框架</p><ul><li>小结：<ol><li>以后大多数时候，我们会使用注解，而不是自定义注解</li><li>注解给谁用？<ol><li>编译器</li><li>给解析程序用</li></ol></li><li>注解不是程序的一部分，可以理解为注解就是一个标签</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注解&quot;&gt;&lt;a href=&quot;#注解&quot; class=&quot;headerlink&quot; title=&quot;注解&quot;&gt;&lt;/a&gt;注解&lt;/h1&gt;&lt;p&gt;概念：说明程序的。给计算机看的&lt;/p&gt;
&lt;p&gt;注释：用文字描述程序的。给程序员看的&lt;/p&gt;
&lt;p&gt;定义：注解（Annotation），也叫元</summary>
      
    
    
    
    
    <category term="Java-web" scheme="http://example.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>MQTT基础协议（上）</title>
    <link href="http://example.com/2022/03/21/MQTT%E5%9F%BA%E7%A1%80%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://example.com/2022/03/21/MQTT%E5%9F%BA%E7%A1%80%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2022-03-20T18:37:12.000Z</published>
    <updated>2022-03-20T18:44:14.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-MQTT是什么"><a href="#1-1-MQTT是什么" class="headerlink" title="1.1 MQTT是什么"></a>1.1 MQTT是什么</h1><p><em>MQTT是一个客户端服务端架构的发布&#x2F;订阅模式的消息传输协议。它的设计思想是轻巧、开放、简单、规范，易于实现。这些特点使得它对很多场景来说都是很好的选择，特别是对于受限的环境如机器与机器的通信（M2M）以及物联网环境（IoT）。</em></p><ul><li>易于实现</li><li>数据传输的服务质量可控</li><li>占用带宽小</li><li>传输数据内容不可预知</li><li>设备连接状态可知</li></ul><p>目前MQTT主流版本有两个，分别是MQTT3.1.1和MQTT5。MQTT3.1.1是在2014年10月发布的，而MQTT5是在2019年3月发布的。由于MQTT3.1.1与MQTT5的时间相差了将近五年，且MQTT5的发布时间距今不久，因此在本文书写时（2020年10月），MQTT3.1.1仍然主流版本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-1-MQTT是什么&quot;&gt;&lt;a href=&quot;#1-1-MQTT是什么&quot; class=&quot;headerlink&quot; title=&quot;1.1 MQTT是什么&quot;&gt;&lt;/a&gt;1.1 MQTT是什么&lt;/h1&gt;&lt;p&gt;&lt;em&gt;MQTT是一个客户端服务端架构的发布&amp;#x2F;订阅模式的消</summary>
      
    
    
    
    
    <category term="物联网" scheme="http://example.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Junit和反射和注解</title>
    <link href="http://example.com/2022/03/20/Junit%E5%92%8C%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
    <id>http://example.com/2022/03/20/Junit%E5%92%8C%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-03-20T08:54:35.000Z</published>
    <updated>2022-03-20T13:39:55.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Junit单元测试："><a href="#Junit单元测试：" class="headerlink" title="Junit单元测试："></a>Junit单元测试：</h1><p>测试分类：</p><ul><li><p>黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</p></li><li><p>白盒测试：需要写代码的。关注程序具体的执行流程。</p></li></ul><p>Junit使用：白盒测试</p><p>步骤</p><p>1.定义一个测试类(测试用例)</p><pre><code>* 建议：        * 测试类名：被测试的类名Test        CalculatorTest        * 包名：xxx.xxx.xx.test        cn.itcast.test</code></pre><p>2.定义测试方法：可以独立运行</p><pre><code>* 建议：        * 方法名：test测试的方法名        testAdd()          * 返回值：void        * 参数列表：空参</code></pre><p>3.给方法加@Test</p><p>4.导入junit依赖环境</p><ul><li>判定结果：<br>  * 红色：失败<br>  * 绿色：成功<br><br>  * 一般我们会使用断言操作来处理结果<br>      <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEquals(期望的结果,运算的结果);</span><br></pre></td></tr></table></figure><ul><li>补充：<ul><li>@Before:<ul><li>修饰的方法会在测试方法之前被自动执行</li><li>用于资源的申请</li></ul></li><li>@After:<ul><li>修饰的方法会在测试方法执行之后自动被执行</li><li>用于资源的释放</li></ul></li></ul></li></ul></li></ul><h1 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h1><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码</p><p>反射：将类的各个组成部分封装为其他对象，这就是反射机制</p><p>​    好处</p><ul><li>可以在程序运行过程中，操作这些对象。代码提示也是利用特性</li><li>可以解耦，提高程序的可扩展性。</li></ul><p>获取Class对象的方法：</p><ul><li>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li>类名.class：通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li>对象.getClass()：getClass()方法在Object类中定义着。<ul><li>多用于对象的获取字节码的方式</li></ul></li></ul><p>结论</p><ul><li>同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</li></ul><p>Class对象功能：</p><p>​    获取功能：</p><pre><code>1. 获取成员变量们</code></pre><ul><li><p>Field[] getFields() ：获取所有public修饰的成员变量</p></li><li><p>Field getField(String name)   获取指定名称的 public修饰的成员变量</p></li><li><p>Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符</p></li><li><p>Field getDeclaredField(String name)</p></li></ul><ol start="2"><li>获取构造方法们</li></ol><ul><li><p>Constructor&lt;?&gt;[] getConstructors()  </p></li><li><p>Constructor<T> getConstructor(类&lt;?&gt;… parameterTypes)</T></p></li><li><p>Constructor<T> getDeclaredConstructor(类&lt;?&gt;… parameterTypes) </T></p></li><li><p>Constructor&lt;?&gt;[] getDeclaredConstructors()</p></li></ul><ol start="3"><li>获取成员方法们：</li></ol><ul><li><p>Method[] getMethods()  </p></li><li><p>Method getMethod(String name, 类&lt;?&gt;… parameterTypes)  </p></li><li><p>Method[] getDeclaredMethods()  </p></li><li><p>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)</p></li></ul><ol start="4"><li>获取全类名</li></ol><ul><li>String getName()</li></ul><p>1.获取成员变量方法参数</p><p>Field：成员变量</p><p>​    操作：</p><ol><li>设置值</li></ol><ul><li>void set(Object obj, Object value)</li></ul><ol start="2"><li>获取值</li></ol><ul><li>get(Object obj)</li></ul><ol start="3"><li>忽略访问权限修饰符的安全检查</li></ol><ul><li>setAccessible(true):暴力反射</li></ul><p>2.获取构造方法参数</p><p>Constructor:构造方法</p><p>​    创建对象：</p><ul><li>T newInstance(Object… initargs)  </li><li>如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</li></ul><p>3.获取成员方法参数</p><p>Method：方法对象</p><p>​    执行方法：</p><ul><li>Object invoke(Object obj, Object… args)  （参数，实参列表）</li></ul><p>获取方法名称：</p><ul><li>String getName:获取方法名</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Junit单元测试：&quot;&gt;&lt;a href=&quot;#Junit单元测试：&quot; class=&quot;headerlink&quot; title=&quot;Junit单元测试：&quot;&gt;&lt;/a&gt;Junit单元测试：&lt;/h1&gt;&lt;p&gt;测试分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;黑盒测试：不需要写代码，给输入值</summary>
      
    
    
    
    
    <category term="Java-web" scheme="http://example.com/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>操作系统概述</title>
    <link href="http://example.com/2022/03/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2022/03/20/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</id>
    <published>2022-03-20T06:13:34.000Z</published>
    <updated>2022-03-20T14:08:36.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要学习操作系统-目的"><a href="#为什么要学习操作系统-目的" class="headerlink" title="为什么要学习操作系统 目的"></a>为什么要学习操作系统 目的</h1><p>你体内的 “编程力量” 尚未完全觉醒</p><ul><li>每天都在用的东西，你还没搞明白<ul><li>窗口是怎么创建的？<a href="https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/">为什么 Ctrl-C 有时不能退出程序</a>？</li></ul></li><li>组里的服务器有 128 个处理器，但你的程序却只能用一个 😂</li><li>你每天都在用的东西，你却实现不出来<ul><li>浏览器、编译器、IDE、游戏&#x2F;外挂、任务管理器、杀毒软件、病毒……</li></ul></li></ul><h2 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h2><ul><li>操作系统：事实上，是一个软件体系，负责使程序易于运行（甚至让你看起来可以同时运行多个程序），允许程序共享内存，允许程序与设备交互，以及其他类似的有趣事情。</li><li>管理软&#x2F;硬件资源、为程序提供服务” 的程序</li></ul><h2 id="理解操作系统"><a href="#理解操作系统" class="headerlink" title="理解操作系统"></a>理解操作系统</h2><ul><li>问出正确的问题：操作系统如何从一开始变成现在这样的？</li><li>三个重要的线索<ul><li>计算机 (硬件)</li><li>程序 (软件)</li><li>操作系统 (管理软件的软件)</li></ul></li><li>本课程狭义的操作系统 例：win liunx</li></ul><h2 id="1940s的计算机"><a href="#1940s的计算机" class="headerlink" title="1940s的计算机"></a>1940s的计算机</h2><p>电子计算机的实现</p><ul><li>逻辑门：<a href="https://www.bilibili.com/video/av59005720">真空电子管</a></li><li>存储器：延迟线 (delay lines)</li><li>输入&#x2F;输出：打孔纸带&#x2F;指示灯</li></ul><p>没有操作系统</p><p>能把程序放上去就很了不起了</p><ul><li>程序直接用指令操作硬件</li><li>不需要画蛇添足的程序来管理它</li></ul><h2 id="1950s计算机"><a href="#1950s计算机" class="headerlink" title="1950s计算机"></a>1950s计算机</h2><p>更快更小的逻辑门 (晶体管)、更大的内存 (磁芯)、丰富的 I&#x2F;O 设备</p><ul><li>I&#x2F;O 设备的速度已经严重低于处理器的速度，中断机制出现 (1953)</li></ul><h2 id="1960s计算机"><a href="#1960s计算机" class="headerlink" title="1960s计算机"></a>1960s计算机</h2><p>集成电路、总线出现</p><ul><li>更快的处理器</li><li>更快、更大的内存；虚拟存储出现<ul><li>可以同时载入多个程序而不用 “换卡” 了</li></ul></li><li>更丰富的 I&#x2F;O 设备；完善的中断&#x2F;异常机制</li></ul><h2 id="1960s操作系统"><a href="#1960s操作系统" class="headerlink" title="1960s操作系统"></a>1960s操作系统</h2><p>能载入多个程序到内存且灵活调度它们的管理程序，包括程序可以调用的 API。</p><p>同时将多个程序载入内存是一项巨大的能力</p><ul><li>有了进程 (process) 的概念</li><li>进程在执行 I&#x2F;O 时，可以将 CPU 让给另一个进程<ul><li>在多个地址空间隔离的程序之间切换</li><li>虚拟存储使一个程序出 bug 不会 crash 整个系统</li></ul></li></ul><p>操作系统中自然地增加进程管理 API</p><p>基于中断 (例如时钟) 机制</p><ul><li>时钟中断：使程序在执行时，异步地插入函数调用</li><li>由操作系统 (调度策略) 决定是否要切换到另一个程序执行</li><li>Multics (MIT, 1965)<ul><li>现代操作系统诞生</li></ul></li></ul><h2 id="1970s-计算机和操作系统"><a href="#1970s-计算机和操作系统" class="headerlink" title="1970s+计算机和操作系统"></a>1970s+计算机和操作系统</h2><p>和现代大差不差</p><h2 id="今天的操作系统"><a href="#今天的操作系统" class="headerlink" title="今天的操作系统"></a>今天的操作系统</h2><p>通过 “虚拟化” 硬件资源为程序运行提供服务的软件。</p><p>空前复杂的系统之一</p><ul><li>更复杂的处理器和内存<ul><li>非对称多处理器 (ARM big.LITTLE; Intel P&#x2F;E-cores)</li><li>Non-uniform Memory Access (NUMA)</li><li>更多的硬件机制 Intel-VT&#x2F;AMD-V, TrustZone&#x2F;<del>SGX</del>, TSX, …</li></ul></li><li>更多的设备和资源<ul><li>网卡、SSD、GPU、FPGA…</li></ul></li><li>复杂的应用需求和应用环境<ul><li>服务器、个人电脑、智能手机、手表、手环、IoT&#x2F;微控制器……</li></ul></li></ul><h2 id="理解操作系统：三个根本问题"><a href="#理解操作系统：三个根本问题" class="headerlink" title="理解操作系统：三个根本问题"></a>理解操作系统：三个根本问题</h2><p>操作系统服务谁？</p><ul><li>程序 &#x3D; 状态机</li><li>课程涉及：多线程 Linux 应用程序</li></ul><hr><p>(设计&#x2F;应用视角) 操作系统为程序提供什么服务？</p><ul><li>操作系统 &#x3D; 对象 + API</li><li>课程涉及：POSIX + 部分 Linux 特性</li></ul><hr><p>(实现&#x2F;硬件视角) 如何实现操作系统提供的服务？</p><ul><li>操作系统 &#x3D; C 程序<ul><li>完成初始化后就成为 interrupt&#x2F;trap&#x2F;fault handler</li></ul></li><li>课程涉及：xv6, 自制迷你操作系统</li></ul><h1 id="如何学习操作系统"><a href="#如何学习操作系统" class="headerlink" title="如何学习操作系统"></a>如何学习操作系统</h1><p>计算机专业学生必须具备的核心素质。</p><ol><li>是一个合格的操作系统用户<ul><li>会 STFW&#x2F;RTFM 自己动手解决问题</li><li>不怕使用任何命令行工具<ul><li>vim, tmux, grep, gcc, binutils, …</li></ul></li></ul></li><li>不惧怕写代码<ul><li>能管理一定规模 (数千行) 的代码</li><li>能在出 bug 时默念 “机器永远是对的、我肯定能调出来的”<ul><li>然后开始用正确的工具&#x2F;方法调试</li></ul></li></ul></li></ol><hr><p>给 “学渣” 们的贴心提示：补基础、补基础、补基础</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么要学习操作系统-目的&quot;&gt;&lt;a href=&quot;#为什么要学习操作系统-目的&quot; class=&quot;headerlink&quot; title=&quot;为什么要学习操作系统 目的&quot;&gt;&lt;/a&gt;为什么要学习操作系统 目的&lt;/h1&gt;&lt;p&gt;你体内的 “编程力量” 尚未完全觉醒&lt;/p&gt;
&lt;ul</summary>
      
    
    
    
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>模块化</title>
    <link href="http://example.com/2022/03/19/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://example.com/2022/03/19/%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2022-03-19T08:51:45.000Z</published>
    <updated>2022-03-20T05:53:50.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-模块化"><a href="#1-模块化" class="headerlink" title="1.模块化"></a>1.模块化</h2><h3 id="1-1-模块化概述"><a href="#1-1-模块化概述" class="headerlink" title="1.1 模块化概述"></a>1.1 模块化概述</h3><p>Java语言随着这些年的发展已经成为了一门影响深远的编程语言，无数平台，系统都采用Java语言编写。但是，伴随着发展，Java也越来越庞大，逐渐发展成为一门“臃肿”的语言。而且，无论是运行一个大型的软件系统，还是运行一个小的程序，即使程序只需要使用Java的部分核心功能，JVM也要加载整个JRE环境。为了给Java“瘦身”，让Java实现轻量化，Java 9正式的推出了模块化系统。Java被拆分为N多个模块，并允许Java程序可以根据需要选择加载程序必须的Java模块，这样就可以让Java以轻量化的方式来运行其实，Java 7的时候已经提出了模块化的概念，但由于其过于复杂，Java 7，Java 8都一直未能真正推出，直到Java9才真正成熟起来。对于Java语言来说，模块化系统是一次真正的自我革新，这种革新使得“古老而庞大”的Java语言重新焕发年轻的活力</p><h3 id="1-2-模块的基本使用步骤"><a href="#1-2-模块的基本使用步骤" class="headerlink" title="1.2 模块的基本使用步骤"></a>1.2 模块的基本使用步骤</h3><p>模块的使用步骤</p><ol><li>在项目中创建两个模块。一个是myOne,一个是myTwo</li><li>在myOne模块中创建以下包和以下类，并在类中添加方法</li><li>在myTwo模块中创建以下包和以下类，并在类中创建别的模块对象并使用</li><li>在myOne模块中src目录下，创建module-info.java，并写入exports+包名</li><li>在myTwo模块中src目录下，创建module-info.java，并写入require+模块名</li><li>如果出错，按下alt+enter 选择依赖</li></ol><h3 id="1-3-模块服务的使用"><a href="#1-3-模块服务的使用" class="headerlink" title="1.3 模块服务的使用"></a>1.3 模块服务的使用</h3><p>模块服务使用使用步骤</p><ol><li>在myOne模块中新建一个包，提供一个接口和两个实现类</li><li>在myOne模块中修改module-info.java文件，添加以下内容<ol><li>导出模块：export com.itheima_03;</li><li>服务提供：provides MyService with itheima;<ol><li>指定MyService的服务实现类是itheima</li></ol></li></ol></li><li>在myTwo这个文件的描述文件中添加如下配置<ol><li>声明服务接口：uses MyService</li></ol></li><li>在myTwo这个模块的类中使用MySerrive结构提供的服务<ol><li>ServiceLoader：一种加载服务实现的工具</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-模块化&quot;&gt;&lt;a href=&quot;#1-模块化&quot; class=&quot;headerlink&quot; title=&quot;1.模块化&quot;&gt;&lt;/a&gt;1.模块化&lt;/h2&gt;&lt;h3 id=&quot;1-1-模块化概述&quot;&gt;&lt;a href=&quot;#1-1-模块化概述&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>野格</title>
    <link href="http://example.com/2022/03/19/%E9%87%8E%E6%A0%BC/"/>
    <id>http://example.com/2022/03/19/%E9%87%8E%E6%A0%BC/</id>
    <published>2022-03-19T02:12:34.000Z</published>
    <updated>2022-03-22T15:57:02.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="野格"><a href="#野格" class="headerlink" title="野格"></a>野格</h1><p>酒标上的单词来自德语单词 jager代表猎人 meister代表大师的意思</p><h2 id="酿酒历史"><a href="#酿酒历史" class="headerlink" title="酿酒历史"></a>酿酒历史</h2><p>第一代酿酒人柯特*迈斯特是一位英勇的猎手，野格的前生并不是酒，而是印有鹿头的止咳药水，德国冬天异常寒冷，猎人在行动时容易染上风寒，为了解决这个问题，野格一代目在止咳水的基础上，添加了酒精，配上一些帮助消化，缓解呼吸道症状的草药来帮助猎手，猎手在行动中容易掉装备，所有选择这种最抗摔的墨绿色方瓶子，到1934年，纳粹德国颁布了帝国狩猎法，在这个法律中规定只有最杰出的猎手，才可以冠名“猎人大师“的名号，野格一代目也是在这是创建了商标，赚了一波热度</p><h2 id="鹿头来源"><a href="#鹿头来源" class="headerlink" title="鹿头来源"></a>鹿头来源</h2><p>基督教中的两位猎人守护神，传闻中他们皈依耶稣时，看到了圣鹿出现在十字架中央</p><h2 id="成分"><a href="#成分" class="headerlink" title="成分"></a>成分</h2><p>德国本土草本利口酒，其中成分含有56种不同的药材，水果，植物根茎以及辛香料 已公开的有杜松子，人参，甘草，肉桂，茴香，生姜，柑橘类果皮等等</p><h2 id="制作工艺"><a href="#制作工艺" class="headerlink" title="制作工艺"></a>制作工艺</h2><p>野格采用风干材料，把晒干的草本在中性酒精里浸泡三天，得到基础的香气以及颜色，整个浸泡工序要反反复复进行多次，大概要持续五个月，才进行首次过滤，放到橡木桶里进行陈年，经过365天的窖藏，药草酒得到了进一步成熟，酒液里杂醇类物质也会被逐渐分解，提高整体的口感，特别是经过橡木桶的润色之后，这个野格的酒体颜色会变更加深邃，同时减少草本植物带来的青涩味道，增强酒体结构，更加突出橡木的香气与果香，野格35度并不是来自蒸馏，它是在桶成一年后再次加入中性酒精，水，焦糖以及白砂糖，最终调整成品，</p><h2 id="为什么加酒精"><a href="#为什么加酒精" class="headerlink" title="为什么加酒精"></a>为什么加酒精</h2><p>光他本身的材料没有足够的糖分无法合成很多的酒精，所以要加中性酒精。</p><h2 id="两大配方用料"><a href="#两大配方用料" class="headerlink" title="两大配方用料"></a>两大配方用料</h2><p>草本风味来自</p><ul><li><p>甘草</p><ul><li>增加天然甜味</li><li>药用价值</li><li>甘草素野格甜味之一，当年糖值钱</li><li>葑酮，香水中会用</li><li>茴香稀，遇水乳化，使酒浑浊乳白色</li></ul></li><li><p>茴香</p><ul><li>重要香料</li><li>大量茴香稀</li><li>拧烯，提供柠檬香气</li><li>桉油醇，樟脑丸气息</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;野格&quot;&gt;&lt;a href=&quot;#野格&quot; class=&quot;headerlink&quot; title=&quot;野格&quot;&gt;&lt;/a&gt;野格&lt;/h1&gt;&lt;p&gt;酒标上的单词来自德语单词 jager代表猎人 meister代表大师的意思&lt;/p&gt;
&lt;h2 id=&quot;酿酒历史&quot;&gt;&lt;a href=&quot;#酿酒历史</summary>
      
    
    
    
    
    <category term="酒" scheme="http://example.com/tags/%E9%85%92/"/>
    
  </entry>
  
  <entry>
    <title>类加载器和反射</title>
    <link href="http://example.com/2022/03/17/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2022/03/17/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%92%8C%E5%8F%8D%E5%B0%84/</id>
    <published>2022-03-17T07:32:30.000Z</published>
    <updated>2022-03-20T13:39:54.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1.类加载器"></a>1.类加载器</h2><h3 id="1-1-类加载"><a href="#1-1-类加载" class="headerlink" title="1.1 类加载"></a>1.1 类加载</h3><p>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载，类的连接，类的初始化这三个步骤来对类进行初始化。如果不出现意外情况，JVM将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化</p><h4 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h4><ul><li>就是指将class文件读入内存，并为之创建一个java.lang.Class对象</li><li>任何类被使用时，系统都会为之建立一个java.lang.Class对象</li></ul><h4 id="类的连接"><a href="#类的连接" class="headerlink" title="类的连接"></a>类的连接</h4><ul><li>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li><li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值</li><li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li></ul><h4 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h4><ul><li>在该阶段，主要就是对类变量进行初始化</li></ul><h4 id="类的初始化步骤"><a href="#类的初始化步骤" class="headerlink" title="类的初始化步骤"></a>类的初始化步骤</h4><ul><li>假如类还未被加载和连接，则程序先加载并连接该类</li><li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li><li>假如类中有初始化语句，则系统依次执行这些初始化语句</li><li>注意：在执行第2个步骤的时候，系统对直接父类的初始化步骤也遵循初始化步骤1-3</li></ul><h4 id="类的初始化时机"><a href="#类的初始化时机" class="headerlink" title="类的初始化时机"></a>类的初始化时机</h4><ul><li>创建类的实例</li><li>调用类的类方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul><h3 id="1-2-类加载器"><a href="#1-2-类加载器" class="headerlink" title="1.2 类加载器"></a>1.2 类加载器</h3><h4 id="类加载器作用"><a href="#类加载器作用" class="headerlink" title="类加载器作用"></a>类加载器作用</h4><ul><li>负责将.class文件加载到内存中，并为之生成对应的java.lang.Class对象。</li><li>虽然我们不用过分关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行！</li></ul><h4 id="JVM的类加载机制"><a href="#JVM的类加载机制" class="headerlink" title="JVM的类加载机制"></a>JVM的类加载机制</h4><ul><li>全盘负责：就是当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li><li>父类委托：就是当一个类加载器负责加载某个Class时，先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li><li>缓存机制：保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存储到缓存区</li></ul><h4 id="Java中内置类加载器"><a href="#Java中内置类加载器" class="headerlink" title="Java中内置类加载器"></a>Java中内置类加载器</h4><ul><li>Bootstrap class loader：它是虚拟机的内置类加载器，通常表示为null，并且没有父null</li><li>Platform class loader：平台类加载器可以看到所有平台类，平台类包括由平台类加载器或其祖先定义的JavaSE平台API，其实现类和JDK特定的运行时类</li><li>System class loader：它也被称为应用程序类加载器，与平台类加载器不同。系统类加载器通常用于定义应用程序类路径，模块路径和JDK特定工具上的类</li><li>类加载器的继承关系：System的父加载器为Platform，而Platform的父加载器为Bootstrap</li></ul><h4 id="ClassLoader中的两个方法"><a href="#ClassLoader中的两个方法" class="headerlink" title="ClassLoader中的两个方法"></a>ClassLoader中的两个方法</h4><ul><li>static ClassLoader getSystemClassLoader()   返回用于委派的系统类加载器</li><li>ClassLoader getParent()   返回父类加载器进行委派</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class ClassLoaderDemo&#123;</span><br><span class="line">public static void main(String[]args)&#123;</span><br><span class="line">//static ClassLoader getSystemClassLoader():返回用于委派的系统类加载器</span><br><span class="line">ClassLoader c = ClassLoader.getSystemClassLoader();</span><br><span class="line">System.out.println(c);//AppClassLoader</span><br><span class="line"></span><br><span class="line">//ClassLoader getParent():返回父类加载器进行委派</span><br><span class="line">ClassLoader c2 = c.getParent();</span><br><span class="line">System.out.println(c2); //PlatformClassLoader</span><br><span class="line"></span><br><span class="line">ClassLoader c3 = c2.getParent();</span><br><span class="line">System.out.println(c3);//null</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-反射"><a href="#2-反射" class="headerlink" title="2.反射"></a>2.反射</h2><h3 id="2-1-反射的概述"><a href="#2-1-反射的概述" class="headerlink" title="2.1 反射的概述"></a>2.1 反射的概述</h3><ul><li>是指在运行时去获取一个类的变量和方法信息。然后通过获取到的信息来创建对象，调用方法的一种机制。由于这种动态性，可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以扩展</li><li>可以访问一些类的私有成员</li></ul><h3 id="2-2-获取class类的对象"><a href="#2-2-获取class类的对象" class="headerlink" title="2.2 获取class类的对象"></a>2.2 获取class类的对象</h3><p>三种方法</p><ul><li>类名.class属性 </li><li>对象名.getClass()方法 该方法是Object类中方法，所有Java对象都可以调用此方法</li><li>Class.forName(全类名)方法，需要传入字符串参数，该字符串参数是某个类的全路径，也是完整包名的路径</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class ReflectDemo&#123;</span><br><span class="line">public static void main(String[] args)throwsClassNotFoundException&#123;</span><br><span class="line">//使用类的class属性来获取该类对应的Class对象</span><br><span class="line">Class&lt;Student&gt;c1=Student.class;</span><br><span class="line">System.out.println(c1);</span><br><span class="line">Class&lt;Student&gt;c2=Student.class;</span><br><span class="line">System.out.println(c1==c2);</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">//调用对象的getClass()方法，返回该对象所属类对应的Class对象</span><br><span class="line">Student s = new Student();</span><br><span class="line">Class&lt;? extends Student&gt; c3 = s.getClass();</span><br><span class="line">System.out.println(c1==c3);</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">//使用Class类中的静态方法</span><br><span class="line">forName(String className)</span><br><span class="line">Class&lt;?&gt; c4 = Class.forName(&quot;com.itheima_02.Student&quot;);</span><br><span class="line">System.out.println(c1 == c4);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-反射获取构造方法并使用"><a href="#2-3-反射获取构造方法并使用" class="headerlink" title="2.3 反射获取构造方法并使用"></a>2.3 反射获取构造方法并使用</h3><p>Class类获取构造方法对象的方法</p><ul><li>Constructor&lt;?&gt;[] getConstructors()<ul><li>返回所有公共构造方法对象的数组</li></ul></li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()<ul><li>返回所有构造方法对象的数组</li></ul></li><li>Constructor getConstructor(Class&lt;?&gt;… parameterTypes)<ul><li>返回单个公共构造方法对象</li></ul></li><li>Constructor getDeclaredConstructor(Class&lt;?&gt;…parameterTypes)<ul><li>返回单个构造方法对象</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//获取Class对象</span><br><span class="line">Class&lt;?&gt;c=Class.forName(&quot;com.itheima_02.Student&quot;);</span><br><span class="line"></span><br><span class="line">//Constructor&lt;?&gt;[] getConstructors() 返回一个包含 Constructor对象的数组，Constructor对象反映了由该Class对象表示的类的所有公共构造函数、</span><br><span class="line">Constructor&lt;?&gt;[]cons=c.getConstructors();</span><br><span class="line"></span><br><span class="line">//Constructor&lt;?&gt;[]getDeclaredConstructors()返回反映由该Class对象表示的类声明的所有构造函数的Constructor对象的数组</span><br><span class="line">Constructor&lt;?&gt;[] cons = c.getDeclaredConstructors();</span><br><span class="line">for(Constructor con : cons)&#123;</span><br><span class="line">System.out.println(con);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">//Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;...parameterTypes) 返回一个Constructor对象，该对象反映由该Class对象表示的类的指定公共构造函数</span><br><span class="line">//参数：你要获取的构造方法的参数的个数和数据类型对应的字节码文件对象</span><br><span class="line"></span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line"></span><br><span class="line">//Constructor提供了一个类的单个构造函数的信息和访问权限</span><br><span class="line">//T newInstance(Object...i nitargs) 使用由此 Constructor 对象表示的构造函数，使用指定的初始化参数来创建和初始化构造函数的声明类的新实例</span><br><span class="line"></span><br><span class="line">Object obj = con.newInstance();</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Constructor类用于创建对象的方法</p><ul><li>T newInstance(Object…initargs)<ul><li>根据指定的构造方法创建对象</li></ul></li></ul><h3 id="2-4-反射获取构造方法并使用练习"><a href="#2-4-反射获取构造方法并使用练习" class="headerlink" title="2.4 反射获取构造方法并使用练习"></a>2.4 反射获取构造方法并使用练习</h3><p>通过反射获取构造方法并创建对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ReflectDemo02 &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        //获取Class类型</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(&quot;com.itheima_01.Student&quot;);</span><br><span class="line"></span><br><span class="line">        //获取带三个参数带构造方法</span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor(String.class, int.class, String.class);</span><br><span class="line"></span><br><span class="line">        //创造新的对象</span><br><span class="line">        Object obj = con.newInstance(&quot;马宏跃&quot;,&quot;20&quot;,&quot;内蒙古&quot;);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习2</p><p>获取私有构造方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; c = Class.forName(&quot;com.itheima_02.Student&quot;);</span><br><span class="line"></span><br><span class="line">Constructor&lt;?&gt; con =c.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">//暴力反射</span><br><span class="line">//public void setAccessible(booleanflag):值为true，取消访问检查</span><br><span class="line"></span><br><span class="line">con.setAccessible(true);</span><br><span class="line">Object obj = con.newInstance(&quot;林青霞&quot;);</span><br><span class="line">Systeam.out.println(obj);</span><br></pre></td></tr></table></figure><h3 id="2-5-反射获取成员变量并使用"><a href="#2-5-反射获取成员变量并使用" class="headerlink" title="2.5 反射获取成员变量并使用"></a>2.5 反射获取成员变量并使用</h3><p>方法</p><ul><li>Field[] getFields()<ul><li>返回所有公共成员变量对象的数组</li></ul></li><li>Field[] getDeclaredFields()<ul><li>返回所有成员变量对象的数组</li></ul></li><li>Field getField(String name)<ul><li>返回单个公共成员变量对象</li></ul></li><li>Field getDeclaredField(String name)<ul><li>返回单个成员变量对象</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ReflectDemo01 &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        //获取对象</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(&quot;com.itheima_01.Student&quot;);</span><br><span class="line"></span><br><span class="line">        Field[] fields = c.getDeclaredFields();</span><br><span class="line">        for(Field field : fields)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;-----------&quot;);</span><br><span class="line">        Field addressField = c.getField(&quot;address&quot;);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line">        addressField.set(obj,&quot;西安&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Field类中用于给成员变量赋值的方法</p><ul><li>void set(Object obj,Object value)<ul><li>给obj对象的成员变量赋值为value</li></ul></li></ul><h3 id="2-6-反射获取成员变量并且使用练习"><a href="#2-6-反射获取成员变量并且使用练习" class="headerlink" title="2.6 反射获取成员变量并且使用练习"></a>2.6 反射获取成员变量并且使用练习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class ReflectDemo02 &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(&quot;com.itheima_01.Student&quot;);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line">        Field nameField = c.getDeclaredField(&quot;name&quot;);</span><br><span class="line">        //取消限制</span><br><span class="line">        nameField.setAccessible(true);</span><br><span class="line">        nameField.set(obj,&quot;马宏跃&quot;);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-反射获取成员方法并使用"><a href="#2-7-反射获取成员方法并使用" class="headerlink" title="2.7 反射获取成员方法并使用"></a>2.7 反射获取成员方法并使用</h3><p>方法</p><ul><li>Method[] getMethods()<ul><li>返回所有公共成员方法对象的数组，包括继承的</li></ul></li><li>Method[] getDeclaredMethods()<ul><li>返回所有成员方法对象的数组，不包括继承的</li></ul></li><li>Method getMethod(String name, Class&lt;?&gt;…parameterTypes)<ul><li>返回单个公共成员方法对象</li></ul></li><li>Method getDeclaredMethod(String name, Class&lt;?&gt;…parameterTypes)<ul><li>返回单个成员方法对象</li></ul></li></ul><p>用于执行方法的方法</p><ul><li>Objectinvoke(Object obj,Object… args)<ul><li>调用obj对象的成员方法，参数是args,返回值是Object类型</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class ReflectDemo01 &#123;</span><br><span class="line">    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(&quot;com.itheima_01.Student&quot;);</span><br><span class="line"></span><br><span class="line">        Method m = c.getMethod(&quot;method1&quot;);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line">        m.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-8-反射获取成员方法并且使用练习"><a href="#2-8-反射获取成员方法并且使用练习" class="headerlink" title="2.8 反射获取成员方法并且使用练习"></a>2.8 反射获取成员方法并且使用练习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class ReflectDemo02 &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(&quot;com.itheima_01.Student&quot;);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line">        Method m2 = c.getMethod(&quot;method2&quot; , String.class);</span><br><span class="line">        Object i2 = m2.invoke(obj,&quot;马宏跃&quot;);</span><br><span class="line"></span><br><span class="line">        Method m3 = c.getMethod(&quot;method3&quot; , String.class, int.class);</span><br><span class="line">        Object i3 = m3.invoke(obj,&quot;马宏跃&quot;,30);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line"></span><br><span class="line">        Method f1 = c.getDeclaredMethod(&quot;function&quot;);</span><br><span class="line">        f1.setAccessible(true);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9-反射练习"><a href="#2-9-反射练习" class="headerlink" title="2.9 反射练习"></a>2.9 反射练习</h3><p>在Integer的集合中，加入字符串数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class RelectTest_01 &#123;</span><br><span class="line">    public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; array = new ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        array.add(10);</span><br><span class="line">        array.add(20);</span><br><span class="line"></span><br><span class="line">        Class&lt;? extends ArrayList&gt; c = array.getClass();</span><br><span class="line">        Method m = c.getMethod(&quot;add&quot; , Object.class);</span><br><span class="line"></span><br><span class="line">        m.invoke(array,&quot;hello&quot;);</span><br><span class="line">        m.invoke(array,&quot;world&quot;);</span><br><span class="line">        m.invoke(array,&quot;Java&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习2 通过配置文件来创建任何类，并且使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class RelectTest_02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Properties prop = new Properties();</span><br><span class="line">        FileReader fr = new FileReader(&quot;MyReflect\\class.txt&quot;);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        String className = prop.getProperty(&quot;className&quot;);</span><br><span class="line">        String methodName = prop.getProperty(&quot;methodName&quot;);</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">                className=com.itheima_05.Student</span><br><span class="line">                methodName=study</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(className);</span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line">        Method m = c.getMethod(methodName);</span><br><span class="line">        m.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-类加载器&quot;&gt;&lt;a href=&quot;#1-类加载器&quot; class=&quot;headerlink&quot; title=&quot;1.类加载器&quot;&gt;&lt;/a&gt;1.类加载器&lt;/h2&gt;&lt;h3 id=&quot;1-1-类加载&quot;&gt;&lt;a href=&quot;#1-1-类加载&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SUZE龙胆酒</title>
    <link href="http://example.com/2022/03/16/SUZE%E9%BE%99%E8%83%86%E9%85%92/"/>
    <id>http://example.com/2022/03/16/SUZE%E9%BE%99%E8%83%86%E9%85%92/</id>
    <published>2022-03-16T15:22:58.000Z</published>
    <updated>2022-03-16T15:41:31.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SUZE龙胆酒"><a href="#SUZE龙胆酒" class="headerlink" title="SUZE龙胆酒"></a>SUZE龙胆酒</h1><h2 id="一句话概括"><a href="#一句话概括" class="headerlink" title="一句话概括"></a>一句话概括</h2><p>这是一种以龙胆植物作为主要原料，搭配了像香草，橙子，以及其他多种草药作为辅料的法国利口酒</p><h2 id="味道"><a href="#味道" class="headerlink" title="味道"></a>味道</h2><p>苦中带甜，闻上去草本气息非常突出，还会有浓郁的花香，有甘草橙皮，姜黄的味道</p><h2 id="原料"><a href="#原料" class="headerlink" title="原料"></a>原料</h2><p>龙胆植物，十年左右壮年龙胆</p><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>采摘后的龙胆需要切割，完了后放在食用酒精浸泡一年，然后取一部分龙胆根，挤成汁放进去一起蒸馏，最后和浸泡液一起调配，我们需要加水，加糖，大概稀释到20度左右进行装瓶</p><h2 id="品牌故事"><a href="#品牌故事" class="headerlink" title="品牌故事"></a>品牌故事</h2><p>费尔南德穆勒发明 起初接受家族酒厂生意不景气，遇到酿酒黑天鹅事件，根瘤蚜虫病，让很多葡萄酒白兰地行业受到很大打击，他和儿子进行发明，大胆使用龙胆发明 冰镇开胃，1889获得了世博会金奖，官网讲说他跟嫂子关系好，使用用嫂子的名字</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>白尼格罗尼</p><h2 id="喝法"><a href="#喝法" class="headerlink" title="喝法"></a>喝法</h2><p>少数可以直接饮用，加冰块</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SUZE龙胆酒&quot;&gt;&lt;a href=&quot;#SUZE龙胆酒&quot; class=&quot;headerlink&quot; title=&quot;SUZE龙胆酒&quot;&gt;&lt;/a&gt;SUZE龙胆酒&lt;/h1&gt;&lt;h2 id=&quot;一句话概括&quot;&gt;&lt;a href=&quot;#一句话概括&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="酒" scheme="http://example.com/tags/%E9%85%92/"/>
    
  </entry>
  
  <entry>
    <title>计算机的基本组成</title>
    <link href="http://example.com/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90/"/>
    <id>http://example.com/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90/</id>
    <published>2022-03-16T10:48:08.000Z</published>
    <updated>2022-03-24T07:00:45.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2-计算机的基本组成"><a href="#1-2-计算机的基本组成" class="headerlink" title="1.2 计算机的基本组成"></a>1.2 计算机的基本组成</h2><h3 id="一-冯-诺依曼计算机的特点"><a href="#一-冯-诺依曼计算机的特点" class="headerlink" title="一. 冯.诺依曼计算机的特点"></a>一. 冯.诺依曼计算机的特点</h3><ol><li><p>计算机由五大部件组成</p><ol><li>运算器</li><li>控制器</li><li>存储器</li><li>输入设备</li><li>输出设备</li></ol></li><li><p>指令和数据以同等地位存于存储器，可按地址寻址</p><ol><li>混合存储</li></ol></li><li><p>指令和数据用二进制表示</p></li><li><p>指令由操作码和地址码</p></li><li><p>存储程序（核心）</p></li><li><p>以运算器为中心</p><ol><li>算数运算</li><li>逻辑运算</li></ol><p>![截屏2022-03-16 18.59.22](&#x2F;Users&#x2F;mhy&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;计算机的基本组成&#x2F;截屏2022-03-16 18.59.22.png)</p></li></ol><p>缺点：什么都要经过运算器，运算器过于繁忙</p><h3 id="二-计算机硬件框图"><a href="#二-计算机硬件框图" class="headerlink" title="二.计算机硬件框图"></a>二.计算机硬件框图</h3><h4 id="1-以存储器为中心的计算机硬件框图"><a href="#1-以存储器为中心的计算机硬件框图" class="headerlink" title="1.以存储器为中心的计算机硬件框图"></a>1.以存储器为中心的计算机硬件框图</h4><img src="/2022/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90/mhy/blog/source/_posts/计算机的基本组成/截屏2022-03-16 19.04.14.png" alt="截屏2022-03-16 19.04.14" style="zoom:67%;"><ul><li>系统复杂性管理方法（3Y）<ul><li>层次化：将被设计的系统划分为多个模块或子模块</li><li>模块化：有明确定义的功能和接口</li><li>规则性：模块更容易被重用</li></ul></li></ul><h3 id="三-计算机的工作步骤"><a href="#三-计算机的工作步骤" class="headerlink" title="三.计算机的工作步骤"></a>三.计算机的工作步骤</h3><ol><li>上机前的准备<ol><li>建立数学模型</li><li>确定计算方法</li><li>编制解题程序<ol><li>程序–运算的全部步骤</li><li>指令–每一个步骤</li></ol></li></ol></li></ol><p>指令格式：操作码+地址码</p><ul><li>指令和数据都是保存着存储器中的</li></ul><h4 id="1-存储器的基本组成"><a href="#1-存储器的基本组成" class="headerlink" title="(1)存储器的基本组成"></a>(1)存储器的基本组成</h4><p>存储体-存储单元-存储元件（0&#x2F;1）</p><p>大楼 -   房间     -床号            （无人&#x2F;有人）</p><p>存储单元    存放一串二进制代码</p><p>存储字    存储单元中二进制代码组合</p><p>存储字长    存储单元中二进制代码位数</p><p>​                    每一个存储单元有一个地址</p><p>按地址寻址</p><p>MAR    地址寄存器，反映存储单元的个数</p><p>MDR    数据寄存器，反映存储字长</p><h4 id="2-运算器的基本组成及操作过程"><a href="#2-运算器的基本组成及操作过程" class="headerlink" title="(2)运算器的基本组成及操作过程"></a>(2)运算器的基本组成及操作过程</h4><p>MQ    乘商寄存器</p><p>ACC    累加器</p><p>ALU    算术逻辑单元</p><p>X            操作寄存器</p><p>![截屏2022-03-24 09.30.02](&#x2F;Users&#x2F;mhy&#x2F;blog&#x2F;source&#x2F;_posts&#x2F;计算机的基本组成&#x2F;截屏2022-03-24 09.30.02.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-2-计算机的基本组成&quot;&gt;&lt;a href=&quot;#1-2-计算机的基本组成&quot; class=&quot;headerlink&quot; title=&quot;1.2 计算机的基本组成&quot;&gt;&lt;/a&gt;1.2 计算机的基本组成&lt;/h2&gt;&lt;h3 id=&quot;一-冯-诺依曼计算机的特点&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="计算机组成原理" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Stream流</title>
    <link href="http://example.com/2022/03/16/Stream%E6%B5%81/"/>
    <id>http://example.com/2022/03/16/Stream%E6%B5%81/</id>
    <published>2022-03-16T08:42:39.000Z</published>
    <updated>2022-03-17T07:28:48.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Stream流"><a href="#1-Stream流" class="headerlink" title="1 Stream流"></a>1 Stream流</h2><h3 id="1-1-体验Stream流"><a href="#1-1-体验Stream流" class="headerlink" title="1.1 体验Stream流"></a>1.1 体验Stream流</h3><p>使用Stream流的方式完成过滤操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).filter(s -&gt; s.length()==<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>直接阅读代码的字面意思就可理解语意：生成流，过滤姓张，过滤长度为3，逐一打印</li><li>Stream流把真正的函数式风格引入Java中</li></ul><h3 id="1-2-Stream流的生成方式"><a href="#1-2-Stream流的生成方式" class="headerlink" title="1.2 Stream流的生成方式"></a>1.2 Stream流的生成方式</h3><p>Stream流的使用</p><ul><li>生成流<ul><li>通过数据源（集合，数组等）生成流</li><li>list.stream()</li></ul></li><li>中间操作<ul><li>一个流后面可以跟随零个或多个中间操作，主要为了打开流，做出某种程度的数据过滤&#x2F;映射，然后返回一个新的流，交给下一个操作使用</li><li>filter()</li></ul></li><li>终结操作<ul><li>一个流只能有一个终结操作，当这个操作执行后，流就被使用“光”了，无法在被操作，所以这必定是流的最后一个操作</li><li>forEach()</li></ul></li></ul><h4 id="Stream流的常见生成方式"><a href="#Stream流的常见生成方式" class="headerlink" title="Stream流的常见生成方式"></a>Stream流的常见生成方式</h4><ul><li>Collection 体系的集合可以使用默认方法stream()生成流<ul><li>default Stream<E>stream()</E></li></ul></li><li>Map体系的集合间接的生成流</li><li>数组可以通过Stream接口的静态方法of(T…..values)生成流</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class StreamDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //Collection体系集合可以使用默认stream()生成流</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">        Stream&lt;String&gt; listStream = list.stream();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = new HashSet&lt;String&gt;();</span><br><span class="line">        Stream&lt;String&gt; setStream = set.stream();</span><br><span class="line"></span><br><span class="line">        //Map体系集合间接生成流</span><br><span class="line">        Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();</span><br><span class="line">        Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line">        Stream&lt;Integer&gt; IntStream = map.values().stream();</span><br><span class="line">        Stream&lt;Map.Entry&lt;String,Integer&gt;&gt; entryStream = map.entrySet().stream();</span><br><span class="line"></span><br><span class="line">        //数组可以通过Stream接口的静态方法of(T...values)生成流</span><br><span class="line">        String[] strArray = &#123;&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;&#125;;</span><br><span class="line">        Stream&lt;String&gt; strArrayStream = Stream.of(strArray);</span><br><span class="line">        Stream&lt;String&gt; strArrayStream1 = Stream.of(&quot;hello&quot;,&quot;world&quot;,&quot;java&quot;);</span><br><span class="line">        Stream&lt;Integer&gt; inArrayStream = Stream.of(10,20,30);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-Stream流的常见中间操作"><a href="#1-3-Stream流的常见中间操作" class="headerlink" title="1.3 Stream流的常见中间操作"></a>1.3 Stream流的常见中间操作</h3><ul><li>Stream<T>filter(Predicate predicate): 用于对流中的数据进行过滤<ul><li>Predicate接口中的方法</li><li>Boolean test(T t): 对给定的参数进行判断，返回一个布尔值</li></ul></T></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().filter(s -&gt; s.startsWith(&quot;张&quot;)).filter(s -&gt; s.length()==3).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>Stream<T>limit(long maxSize): 返回此流中的元素组成的流，截取前指定参数个数数据</T></li><li>Stream<T>skip(long n): 跳过指定参数个数数据，返回由该流的剩余元素组成的流</T></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().skip(2).limit(2).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>static<T> Stream<T>concat(Stream a,Stream b): 合并a和b两个流为一个流</T></T></li><li>Stream<T> distinct(): 返回由该流的不同元素(根据Object.equals(Object))组合的流</T></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.concat(s1,s2).forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream.concat(s1,s2).distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>Stream<T> sorted(): 返回由此流的元素组成的流，根据自然顺序排序</T></li><li>Stream<T> sorted(Comparator comparator): 返回由该流的元素组成的流，根据提供的Comparator进行排序<ul><li>根据比较器来排序</li></ul></T></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list.stream().sorted((s1,s2) -&gt; &#123;</span><br><span class="line">int num = s1.length()-s2.langth();</span><br><span class="line">int num2 = num==0?s1.compareTo(s2):num;</span><br><span class="line">return num2;</span><br><span class="line">&#125;).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li><R> Stream<R> map(Function mapper): 返回由给定函数应用于此流的元素的结果组成的流<ul><li>Function接口中的方法</li><li>R apply(T t)</li></ul></R></R></li><li>IntStream mapToInt(TonIntFunction mapper): 返回一个Instream其中包含将给定函数应用用于此流的元素结果<ul><li>InStream：表示原始int流</li><li>ToIntFunction接口中的方法      int applyAsInt(T value)</li><li>int sum(): 返回此流中元素总和</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().map(Integer::parseInt).forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int result = list.stream().mapTiInt(Intrger::parseInt).sum();</span><br></pre></td></tr></table></figure><h3 id="1-4-Stream流的常见终结操作方法"><a href="#1-4-Stream流的常见终结操作方法" class="headerlink" title="1.4 Stream流的常见终结操作方法"></a>1.4 Stream流的常见终结操作方法</h3><p>Stream流的常见终结操作方法</p><ul><li>void forEach(Consumer action): 对此流的每一个元素执行操作<ul><li>Consumer接口中的方法</li><li>void accept(T t): 对给定的参数执行此操作</li></ul></li><li>ling count(): 返回此流中的元素数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long count = list.stream().filter(s -&gt; s.startsWith(&quot;张&quot;)).count();</span><br></pre></td></tr></table></figure><h3 id="1-5-Stream流的收集操作"><a href="#1-5-Stream流的收集操作" class="headerlink" title="1.5 Stream流的收集操作"></a>1.5 Stream流的收集操作</h3><p>Stream流的收集方法</p><ul><li>R collect(Collector collector)</li><li>但是这个收集方法的参数是一个Collector接口</li></ul><p>工具类Collectors提供了具体的收集方法</p><ul><li>public static <T> Collector toList(): 把元素收集到List集合中</T></li><li>public static <T> Collector toSet(): 把元素收集到Set集合中</T></li><li>public static Collector toMap(Function keyMapper,Function valueMapper): 把元素收集到Map集合中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list&lt;String&gt; names = listStream.collect(Collectors.tolist());</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Integer&gt; map = arrsyStream.collect(Collectors.toMap(s -&gt; s.split(&quot;,&quot;)[0]),s -&gt; Integer.parseInt(s.split(&quot;,&quot;)[1]) );</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Stream流&quot;&gt;&lt;a href=&quot;#1-Stream流&quot; class=&quot;headerlink&quot; title=&quot;1 Stream流&quot;&gt;&lt;/a&gt;1 Stream流&lt;/h2&gt;&lt;h3 id=&quot;1-1-体验Stream流&quot;&gt;&lt;a href=&quot;#1-1-体验Stream</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>百利甜</title>
    <link href="http://example.com/2022/03/15/%E7%99%BE%E5%88%A9%E7%94%9C/"/>
    <id>http://example.com/2022/03/15/%E7%99%BE%E5%88%A9%E7%94%9C/</id>
    <published>2022-03-15T15:06:50.000Z</published>
    <updated>2022-03-15T15:46:16.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="百利甜-Baileys"><a href="#百利甜-Baileys" class="headerlink" title="百利甜 Baileys"></a>百利甜 Baileys</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>香甜滑腻，充满了奶油的风味质感</p><ul><li>原因：酒液里添加了优质的爱尔兰奶油，顺便还搭配了一些可可，香草的提取物来丰富他们的味道层次</li></ul></li><li><p>酒精来自爱尔兰本地的威士忌</p></li><li><p>在一众利口酒中属于酒精度偏低的一类，仅有17%左右的酒精含量</p></li></ul><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ul><li>由帝亚吉欧的前身国际蒸馏酒公司出品</li><li>创始人汤姆·贾戈在20世纪70年代经过一系列的调研，先后研发出两款酒，马利宝椰子朗姆酒，百利奶油甜酒</li><li>时代背景，以前威士忌不受欢迎，被吐槽为“像白水一样寡淡”，另外爱尔兰奶制品十分发达，产能过剩，启发了发明的研发团队，做出奶+酒的尝试</li></ul><h2 id="基酒"><a href="#基酒" class="headerlink" title="基酒"></a>基酒</h2><ul><li>特别选用以玉米为主导的爱尔兰威士忌，所以会让酒液富含更多奶油香草气息</li><li>百利甜的威士忌基酒都是需要三年桶陈的，很少见</li><li>这些基酒会提前添加可可，香草提取物，并且用焦糖上色</li><li>爱尔兰奶油，牛奶会过的十分舒服</li></ul><h2 id="调酒过程"><a href="#调酒过程" class="headerlink" title="调酒过程"></a>调酒过程</h2><ul><li>由于酒和奶的密度不同，百利甜需要一些专业的均质机进行混合才能保证成品不会分层</li><li>由于它本身高糖，低酒精的特点容易造成酒体不稳定</li><li>成分检验十分严格</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>酒液比较娇贵，放在阴凉避光处</li><li>高糖低酒精，带有蛋奶成分的酒更加容易变质</li><li>采用深色瓶子罐装</li><li>不开封保质期两年</li><li>利口酒最好在开封后一个月内快速消灭</li></ul><h2 id="复杂性和平衡度"><a href="#复杂性和平衡度" class="headerlink" title="复杂性和平衡度"></a>复杂性和平衡度</h2><ul><li>百利甜很甜，很奶，但处了奶油的口感之外没有其他的风味表达</li><li>混合鸡尾酒非常容易破坏饮品的平衡度</li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://www.bilibili.com/video/BV1KK4y1S7E7?spm_id_from=333.1007.top_right_bar_window_history.content.click">https://www.bilibili.com/video/BV1KK4y1S7E7?spm_id_from=333.1007.top_right_bar_window_history.content.click</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;百利甜-Baileys&quot;&gt;&lt;a href=&quot;#百利甜-Baileys&quot; class=&quot;headerlink&quot; title=&quot;百利甜 Baileys&quot;&gt;&lt;/a&gt;百利甜 Baileys&lt;/h1&gt;&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="酒" scheme="http://example.com/tags/%E9%85%92/"/>
    
  </entry>
  
</feed>
